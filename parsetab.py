
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassoc=ADDASSIGNSUBASSIGNMULASSIGNDIVASSIGNnonassoc<>EQNEQLEQGEQleft+-DOTADDDOTSUBleft*/DOTMULDOTDIV\' ( ) * + , - / : ; < = > ADDASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQ EYE FOR GEQ ID IF INTNUM LEQ MULASSIGN NEQ ONES PRINT REALNUM RETURN STRING SUBASSIGN WHILE ZEROS [ ] { }program : instruction_lines\n               | empty empty : instruction_lines : instruction_lines instruction_line\n                         | instruction_lineinstruction_line : instruction \';\'instruction : assignment\n                   | while_loop\n                   | for_loop\n                   | if_else\n                   | printing\n                   | CONTINUE\n                   | BREAK\n                   | returningassignment : ID assignment_op expressionwhile_loop : WHILE condition statementsfor_loop : FOR ID \'=\' range statementsif_else : IF condition statements\n               | IF condition statements ELSE statementsprinting : PRINT array_linereturning : RETURN elementaryassignment_op : \'=\'\n                     | ADDASSIGN\n                     | SUBASSIGN\n                     | MULASSIGN\n                     | DIVASSIGNcondition : \'(\' bool_expression \')\'bool_expression : expression comparison_op expressioncomparison_op : \'<\'\n                     | \'>\'\n                     | EQ\n                     | NEQ\n                     | GEQ\n                     | LEQstatements : \'{\' program \'}\'range : id_or_number \':\' id_or_numberexpression : expression_binary\n                  | array\n                  | elementary\n                  | array_special\n                  | negation\n                  | transpositionarray : \'[\' array_lines \']\' array_lines : array_lines \';\' array_line\n                   | array_linearray_line : array_line \',\' expression\n                  | expressionarray_special : ZEROS array_special_specifier\n                     | ONES array_special_specifier\n                     | EYE array_special_specifier array_special_specifier : \'(\' id_or_number \')\'transposition : ID "\'"\n                     | array "\'" negation : \'-\' expressionelementary : id_or_number\n                  | STRINGid_or_number : ID\n                    | numbernumber : INTNUM\n              | REALNUMexpression_binary : normal_binary_expression\n                         | dot_binary_expressionnormal_binary_expression : add_expression\n                                | sub_expression\n                                | mul_expression\n                                | div_expressiondot_binary_expression : dot_add_expression\n                             | dot_sub_expression\n                             | dot_mul_expression\n                             | dot_div_expressionadd_expression : expression \'+\' expressionsub_expression : expression \'-\' expressionmul_expression : expression \'*\' expressiondiv_expression : expression \'/\' expressiondot_add_expression : expression DOTADD expressiondot_sub_expression : expression DOTSUB expressiondot_mul_expression : expression DOTMUL expressiondot_div_expression : expression DOTDIV expression'
    
_lr_action_items = {'$end':([0,1,2,3,4,20,21,],[-3,0,-1,-2,-5,-4,-6,]),'CONTINUE':([0,2,4,20,21,65,],[11,11,-5,-4,-6,11,]),'BREAK':([0,2,4,20,21,65,],[12,12,-5,-4,-6,12,]),'ID':([0,2,4,16,18,19,20,21,22,23,24,25,26,27,29,42,48,65,68,70,71,72,73,74,75,76,77,78,83,90,91,92,93,94,95,96,110,115,],[14,14,-5,30,49,62,-4,-6,49,-22,-23,-24,-25,-26,49,49,49,14,62,49,49,49,49,49,49,49,49,49,62,49,-29,-30,-31,-32,-33,-34,49,62,]),'WHILE':([0,2,4,20,21,65,],[15,15,-5,-4,-6,15,]),'FOR':([0,2,4,20,21,65,],[16,16,-5,-4,-6,16,]),'IF':([0,2,4,20,21,65,],[17,17,-5,-4,-6,17,]),'PRINT':([0,2,4,20,21,65,],[18,18,-5,-4,-6,18,]),'RETURN':([0,2,4,20,21,65,],[19,19,-5,-4,-6,19,]),'}':([2,3,4,20,21,65,88,],[-1,-2,-5,-4,-6,-3,112,]),';':([5,6,7,8,9,10,11,12,13,32,33,34,35,36,37,38,39,40,41,43,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,69,79,80,81,82,84,85,86,87,100,101,102,103,104,105,106,107,108,109,112,114,116,117,118,],[21,-7,-8,-9,-10,-11,-12,-13,-14,-20,-47,-37,-38,-39,-40,-41,-42,-61,-62,-55,-56,-57,-63,-64,-65,-66,-67,-68,-69,-70,-58,-59,-60,-21,-57,-15,-16,-18,-53,110,-45,-48,-49,-50,-54,-52,-46,-71,-72,-73,-74,-75,-76,-77,-78,-43,-35,-17,-19,-44,-51,]),'=':([14,30,],[23,68,]),'ADDASSIGN':([14,],[24,]),'SUBASSIGN':([14,],[25,]),'MULASSIGN':([14,],[26,]),'DIVASSIGN':([14,],[27,]),'(':([15,17,45,46,47,],[29,29,83,83,83,]),'[':([18,22,23,24,25,26,27,29,42,48,70,71,72,73,74,75,76,77,78,90,91,92,93,94,95,96,110,],[42,42,-22,-23,-24,-25,-26,42,42,42,42,42,42,42,42,42,42,42,42,42,-29,-30,-31,-32,-33,-34,42,]),'STRING':([18,19,22,23,24,25,26,27,29,42,48,70,71,72,73,74,75,76,77,78,90,91,92,93,94,95,96,110,],[44,44,44,-22,-23,-24,-25,-26,44,44,44,44,44,44,44,44,44,44,44,44,44,-29,-30,-31,-32,-33,-34,44,]),'ZEROS':([18,22,23,24,25,26,27,29,42,48,70,71,72,73,74,75,76,77,78,90,91,92,93,94,95,96,110,],[45,45,-22,-23,-24,-25,-26,45,45,45,45,45,45,45,45,45,45,45,45,45,-29,-30,-31,-32,-33,-34,45,]),'ONES':([18,22,23,24,25,26,27,29,42,48,70,71,72,73,74,75,76,77,78,90,91,92,93,94,95,96,110,],[46,46,-22,-23,-24,-25,-26,46,46,46,46,46,46,46,46,46,46,46,46,46,-29,-30,-31,-32,-33,-34,46,]),'EYE':([18,22,23,24,25,26,27,29,42,48,70,71,72,73,74,75,76,77,78,90,91,92,93,94,95,96,110,],[47,47,-22,-23,-24,-25,-26,47,47,47,47,47,47,47,47,47,47,47,47,47,-29,-30,-31,-32,-33,-34,47,]),'-':([18,22,23,24,25,26,27,29,33,34,35,36,37,38,39,40,41,42,43,44,48,49,50,51,52,53,54,55,56,57,58,59,60,63,67,70,71,72,73,74,75,76,77,78,79,82,84,85,86,87,90,91,92,93,94,95,96,100,101,102,103,104,105,106,107,108,109,110,113,118,],[48,48,-22,-23,-24,-25,-26,48,72,-37,-38,-39,-40,-41,-42,-61,-62,48,-55,-56,48,-57,-63,-64,-65,-66,-67,-68,-69,-70,-58,-59,-60,72,72,48,48,48,48,48,48,48,48,48,-53,-48,-49,-50,-54,-52,48,-29,-30,-31,-32,-33,-34,72,-71,-72,-73,-74,-75,-76,-77,-78,-43,48,72,-51,]),'INTNUM':([18,19,22,23,24,25,26,27,29,42,48,68,70,71,72,73,74,75,76,77,78,83,90,91,92,93,94,95,96,110,115,],[59,59,59,-22,-23,-24,-25,-26,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-29,-30,-31,-32,-33,-34,59,59,]),'REALNUM':([18,19,22,23,24,25,26,27,29,42,48,68,70,71,72,73,74,75,76,77,78,83,90,91,92,93,94,95,96,110,115,],[60,60,60,-22,-23,-24,-25,-26,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-29,-30,-31,-32,-33,-34,60,60,]),'{':([28,31,58,59,60,62,89,97,99,119,],[65,65,-58,-59,-60,-57,-27,65,65,-36,]),',':([32,33,34,35,36,37,38,39,40,41,43,44,49,50,51,52,53,54,55,56,57,58,59,60,79,81,82,84,85,86,87,100,101,102,103,104,105,106,107,108,109,117,118,],[70,-47,-37,-38,-39,-40,-41,-42,-61,-62,-55,-56,-57,-63,-64,-65,-66,-67,-68,-69,-70,-58,-59,-60,-53,70,-48,-49,-50,-54,-52,-46,-71,-72,-73,-74,-75,-76,-77,-78,-43,70,-51,]),']':([33,34,35,36,37,38,39,40,41,43,44,49,50,51,52,53,54,55,56,57,58,59,60,79,80,81,82,84,85,86,87,100,101,102,103,104,105,106,107,108,109,117,118,],[-47,-37,-38,-39,-40,-41,-42,-61,-62,-55,-56,-57,-63,-64,-65,-66,-67,-68,-69,-70,-58,-59,-60,-53,109,-45,-48,-49,-50,-54,-52,-46,-71,-72,-73,-74,-75,-76,-77,-78,-43,-44,-51,]),'+':([33,34,35,36,37,38,39,40,41,43,44,49,50,51,52,53,54,55,56,57,58,59,60,63,67,79,82,84,85,86,87,100,101,102,103,104,105,106,107,108,109,113,118,],[71,-37,-38,-39,-40,-41,-42,-61,-62,-55,-56,-57,-63,-64,-65,-66,-67,-68,-69,-70,-58,-59,-60,71,71,-53,-48,-49,-50,-54,-52,71,-71,-72,-73,-74,-75,-76,-77,-78,-43,71,-51,]),'*':([33,34,35,36,37,38,39,40,41,43,44,49,50,51,52,53,54,55,56,57,58,59,60,63,67,79,82,84,85,86,87,100,101,102,103,104,105,106,107,108,109,113,118,],[73,-37,-38,-39,-40,-41,-42,-61,-62,-55,-56,-57,-63,-64,-65,-66,-67,-68,-69,-70,-58,-59,-60,73,73,-53,-48,-49,-50,73,-52,73,73,73,-73,-74,73,73,-77,-78,-43,73,-51,]),'/':([33,34,35,36,37,38,39,40,41,43,44,49,50,51,52,53,54,55,56,57,58,59,60,63,67,79,82,84,85,86,87,100,101,102,103,104,105,106,107,108,109,113,118,],[74,-37,-38,-39,-40,-41,-42,-61,-62,-55,-56,-57,-63,-64,-65,-66,-67,-68,-69,-70,-58,-59,-60,74,74,-53,-48,-49,-50,74,-52,74,74,74,-73,-74,74,74,-77,-78,-43,74,-51,]),'DOTADD':([33,34,35,36,37,38,39,40,41,43,44,49,50,51,52,53,54,55,56,57,58,59,60,63,67,79,82,84,85,86,87,100,101,102,103,104,105,106,107,108,109,113,118,],[75,-37,-38,-39,-40,-41,-42,-61,-62,-55,-56,-57,-63,-64,-65,-66,-67,-68,-69,-70,-58,-59,-60,75,75,-53,-48,-49,-50,-54,-52,75,-71,-72,-73,-74,-75,-76,-77,-78,-43,75,-51,]),'DOTSUB':([33,34,35,36,37,38,39,40,41,43,44,49,50,51,52,53,54,55,56,57,58,59,60,63,67,79,82,84,85,86,87,100,101,102,103,104,105,106,107,108,109,113,118,],[76,-37,-38,-39,-40,-41,-42,-61,-62,-55,-56,-57,-63,-64,-65,-66,-67,-68,-69,-70,-58,-59,-60,76,76,-53,-48,-49,-50,-54,-52,76,-71,-72,-73,-74,-75,-76,-77,-78,-43,76,-51,]),'DOTMUL':([33,34,35,36,37,38,39,40,41,43,44,49,50,51,52,53,54,55,56,57,58,59,60,63,67,79,82,84,85,86,87,100,101,102,103,104,105,106,107,108,109,113,118,],[77,-37,-38,-39,-40,-41,-42,-61,-62,-55,-56,-57,-63,-64,-65,-66,-67,-68,-69,-70,-58,-59,-60,77,77,-53,-48,-49,-50,77,-52,77,77,77,-73,-74,77,77,-77,-78,-43,77,-51,]),'DOTDIV':([33,34,35,36,37,38,39,40,41,43,44,49,50,51,52,53,54,55,56,57,58,59,60,63,67,79,82,84,85,86,87,100,101,102,103,104,105,106,107,108,109,113,118,],[78,-37,-38,-39,-40,-41,-42,-61,-62,-55,-56,-57,-63,-64,-65,-66,-67,-68,-69,-70,-58,-59,-60,78,78,-53,-48,-49,-50,78,-52,78,78,78,-73,-74,78,78,-77,-78,-43,78,-51,]),'<':([34,35,36,37,38,39,40,41,43,44,49,50,51,52,53,54,55,56,57,58,59,60,67,79,82,84,85,86,87,101,102,103,104,105,106,107,108,109,118,],[-37,-38,-39,-40,-41,-42,-61,-62,-55,-56,-57,-63,-64,-65,-66,-67,-68,-69,-70,-58,-59,-60,91,-53,-48,-49,-50,-54,-52,-71,-72,-73,-74,-75,-76,-77,-78,-43,-51,]),'>':([34,35,36,37,38,39,40,41,43,44,49,50,51,52,53,54,55,56,57,58,59,60,67,79,82,84,85,86,87,101,102,103,104,105,106,107,108,109,118,],[-37,-38,-39,-40,-41,-42,-61,-62,-55,-56,-57,-63,-64,-65,-66,-67,-68,-69,-70,-58,-59,-60,92,-53,-48,-49,-50,-54,-52,-71,-72,-73,-74,-75,-76,-77,-78,-43,-51,]),'EQ':([34,35,36,37,38,39,40,41,43,44,49,50,51,52,53,54,55,56,57,58,59,60,67,79,82,84,85,86,87,101,102,103,104,105,106,107,108,109,118,],[-37,-38,-39,-40,-41,-42,-61,-62,-55,-56,-57,-63,-64,-65,-66,-67,-68,-69,-70,-58,-59,-60,93,-53,-48,-49,-50,-54,-52,-71,-72,-73,-74,-75,-76,-77,-78,-43,-51,]),'NEQ':([34,35,36,37,38,39,40,41,43,44,49,50,51,52,53,54,55,56,57,58,59,60,67,79,82,84,85,86,87,101,102,103,104,105,106,107,108,109,118,],[-37,-38,-39,-40,-41,-42,-61,-62,-55,-56,-57,-63,-64,-65,-66,-67,-68,-69,-70,-58,-59,-60,94,-53,-48,-49,-50,-54,-52,-71,-72,-73,-74,-75,-76,-77,-78,-43,-51,]),'GEQ':([34,35,36,37,38,39,40,41,43,44,49,50,51,52,53,54,55,56,57,58,59,60,67,79,82,84,85,86,87,101,102,103,104,105,106,107,108,109,118,],[-37,-38,-39,-40,-41,-42,-61,-62,-55,-56,-57,-63,-64,-65,-66,-67,-68,-69,-70,-58,-59,-60,95,-53,-48,-49,-50,-54,-52,-71,-72,-73,-74,-75,-76,-77,-78,-43,-51,]),'LEQ':([34,35,36,37,38,39,40,41,43,44,49,50,51,52,53,54,55,56,57,58,59,60,67,79,82,84,85,86,87,101,102,103,104,105,106,107,108,109,118,],[-37,-38,-39,-40,-41,-42,-61,-62,-55,-56,-57,-63,-64,-65,-66,-67,-68,-69,-70,-58,-59,-60,96,-53,-48,-49,-50,-54,-52,-71,-72,-73,-74,-75,-76,-77,-78,-43,-51,]),')':([34,35,36,37,38,39,40,41,43,44,49,50,51,52,53,54,55,56,57,58,59,60,62,66,79,82,84,85,86,87,101,102,103,104,105,106,107,108,109,111,113,118,],[-37,-38,-39,-40,-41,-42,-61,-62,-55,-56,-57,-63,-64,-65,-66,-67,-68,-69,-70,-58,-59,-60,-57,89,-53,-48,-49,-50,-54,-52,-71,-72,-73,-74,-75,-76,-77,-78,-43,118,-28,-51,]),"'":([35,49,109,],[79,87,-43,]),':':([58,59,60,62,98,],[-58,-59,-60,-57,115,]),'ELSE':([69,112,],[99,-35,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,65,],[1,88,]),'instruction_lines':([0,65,],[2,2,]),'empty':([0,65,],[3,3,]),'instruction_line':([0,2,65,],[4,20,4,]),'instruction':([0,2,65,],[5,5,5,]),'assignment':([0,2,65,],[6,6,6,]),'while_loop':([0,2,65,],[7,7,7,]),'for_loop':([0,2,65,],[8,8,8,]),'if_else':([0,2,65,],[9,9,9,]),'printing':([0,2,65,],[10,10,10,]),'returning':([0,2,65,],[13,13,13,]),'assignment_op':([14,],[22,]),'condition':([15,17,],[28,31,]),'array_line':([18,42,110,],[32,81,117,]),'expression':([18,22,29,42,48,70,71,72,73,74,75,76,77,78,90,110,],[33,63,67,33,86,100,101,102,103,104,105,106,107,108,113,33,]),'expression_binary':([18,22,29,42,48,70,71,72,73,74,75,76,77,78,90,110,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'array':([18,22,29,42,48,70,71,72,73,74,75,76,77,78,90,110,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'elementary':([18,19,22,29,42,48,70,71,72,73,74,75,76,77,78,90,110,],[36,61,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'array_special':([18,22,29,42,48,70,71,72,73,74,75,76,77,78,90,110,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'negation':([18,22,29,42,48,70,71,72,73,74,75,76,77,78,90,110,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'transposition':([18,22,29,42,48,70,71,72,73,74,75,76,77,78,90,110,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'normal_binary_expression':([18,22,29,42,48,70,71,72,73,74,75,76,77,78,90,110,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'dot_binary_expression':([18,22,29,42,48,70,71,72,73,74,75,76,77,78,90,110,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'id_or_number':([18,19,22,29,42,48,68,70,71,72,73,74,75,76,77,78,83,90,110,115,],[43,43,43,43,43,43,98,43,43,43,43,43,43,43,43,43,111,43,43,119,]),'add_expression':([18,22,29,42,48,70,71,72,73,74,75,76,77,78,90,110,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'sub_expression':([18,22,29,42,48,70,71,72,73,74,75,76,77,78,90,110,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'mul_expression':([18,22,29,42,48,70,71,72,73,74,75,76,77,78,90,110,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'div_expression':([18,22,29,42,48,70,71,72,73,74,75,76,77,78,90,110,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'dot_add_expression':([18,22,29,42,48,70,71,72,73,74,75,76,77,78,90,110,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'dot_sub_expression':([18,22,29,42,48,70,71,72,73,74,75,76,77,78,90,110,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'dot_mul_expression':([18,22,29,42,48,70,71,72,73,74,75,76,77,78,90,110,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'dot_div_expression':([18,22,29,42,48,70,71,72,73,74,75,76,77,78,90,110,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'number':([18,19,22,29,42,48,68,70,71,72,73,74,75,76,77,78,83,90,110,115,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'statements':([28,31,97,99,],[64,69,114,116,]),'bool_expression':([29,],[66,]),'array_lines':([42,],[80,]),'array_special_specifier':([45,46,47,],[82,84,85,]),'comparison_op':([67,],[90,]),'range':([68,],[97,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instruction_lines','program',1,'p_program','parser.py',28),
  ('program -> empty','program',1,'p_program','parser.py',29),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',32),
  ('instruction_lines -> instruction_lines instruction_line','instruction_lines',2,'p_instructions','parser.py',35),
  ('instruction_lines -> instruction_line','instruction_lines',1,'p_instructions','parser.py',36),
  ('instruction_line -> instruction ;','instruction_line',2,'p_instruction_line','parser.py',39),
  ('instruction -> assignment','instruction',1,'p_instruction','parser.py',42),
  ('instruction -> while_loop','instruction',1,'p_instruction','parser.py',43),
  ('instruction -> for_loop','instruction',1,'p_instruction','parser.py',44),
  ('instruction -> if_else','instruction',1,'p_instruction','parser.py',45),
  ('instruction -> printing','instruction',1,'p_instruction','parser.py',46),
  ('instruction -> CONTINUE','instruction',1,'p_instruction','parser.py',47),
  ('instruction -> BREAK','instruction',1,'p_instruction','parser.py',48),
  ('instruction -> returning','instruction',1,'p_instruction','parser.py',49),
  ('assignment -> ID assignment_op expression','assignment',3,'p_assignment','parser.py',55),
  ('while_loop -> WHILE condition statements','while_loop',3,'p_while_loop','parser.py',58),
  ('for_loop -> FOR ID = range statements','for_loop',5,'p_for_loop','parser.py',61),
  ('if_else -> IF condition statements','if_else',3,'p_if_else','parser.py',64),
  ('if_else -> IF condition statements ELSE statements','if_else',5,'p_if_else','parser.py',65),
  ('printing -> PRINT array_line','printing',2,'p_printing','parser.py',68),
  ('returning -> RETURN elementary','returning',2,'p_returning','parser.py',71),
  ('assignment_op -> =','assignment_op',1,'p_assignment_op','parser.py',77),
  ('assignment_op -> ADDASSIGN','assignment_op',1,'p_assignment_op','parser.py',78),
  ('assignment_op -> SUBASSIGN','assignment_op',1,'p_assignment_op','parser.py',79),
  ('assignment_op -> MULASSIGN','assignment_op',1,'p_assignment_op','parser.py',80),
  ('assignment_op -> DIVASSIGN','assignment_op',1,'p_assignment_op','parser.py',81),
  ('condition -> ( bool_expression )','condition',3,'p_condition','parser.py',87),
  ('bool_expression -> expression comparison_op expression','bool_expression',3,'p_bool_expression','parser.py',90),
  ('comparison_op -> <','comparison_op',1,'p_comparison_op','parser.py',93),
  ('comparison_op -> >','comparison_op',1,'p_comparison_op','parser.py',94),
  ('comparison_op -> EQ','comparison_op',1,'p_comparison_op','parser.py',95),
  ('comparison_op -> NEQ','comparison_op',1,'p_comparison_op','parser.py',96),
  ('comparison_op -> GEQ','comparison_op',1,'p_comparison_op','parser.py',97),
  ('comparison_op -> LEQ','comparison_op',1,'p_comparison_op','parser.py',98),
  ('statements -> { program }','statements',3,'p_statements','parser.py',104),
  ('range -> id_or_number : id_or_number','range',3,'p_range','parser.py',107),
  ('expression -> expression_binary','expression',1,'p_expression','parser.py',113),
  ('expression -> array','expression',1,'p_expression','parser.py',114),
  ('expression -> elementary','expression',1,'p_expression','parser.py',115),
  ('expression -> array_special','expression',1,'p_expression','parser.py',116),
  ('expression -> negation','expression',1,'p_expression','parser.py',117),
  ('expression -> transposition','expression',1,'p_expression','parser.py',118),
  ('array -> [ array_lines ]','array',3,'p_array','parser.py',124),
  ('array_lines -> array_lines ; array_line','array_lines',3,'p_array_lines','parser.py',127),
  ('array_lines -> array_line','array_lines',1,'p_array_lines','parser.py',128),
  ('array_line -> array_line , expression','array_line',3,'p_array_line','parser.py',131),
  ('array_line -> expression','array_line',1,'p_array_line','parser.py',132),
  ('array_special -> ZEROS array_special_specifier','array_special',2,'p_array_special','parser.py',138),
  ('array_special -> ONES array_special_specifier','array_special',2,'p_array_special','parser.py',139),
  ('array_special -> EYE array_special_specifier','array_special',2,'p_array_special','parser.py',140),
  ('array_special_specifier -> ( id_or_number )','array_special_specifier',3,'p_array_special_specifier','parser.py',143),
  ("transposition -> ID '",'transposition',2,'p_transposition','parser.py',146),
  ("transposition -> array '",'transposition',2,'p_transposition','parser.py',147),
  ('negation -> - expression','negation',2,'p_negation','parser.py',153),
  ('elementary -> id_or_number','elementary',1,'p_elementary','parser.py',159),
  ('elementary -> STRING','elementary',1,'p_elementary','parser.py',160),
  ('id_or_number -> ID','id_or_number',1,'p_id_or_number','parser.py',163),
  ('id_or_number -> number','id_or_number',1,'p_id_or_number','parser.py',164),
  ('number -> INTNUM','number',1,'p_number','parser.py',167),
  ('number -> REALNUM','number',1,'p_number','parser.py',168),
  ('expression_binary -> normal_binary_expression','expression_binary',1,'p_expression_binary','parser.py',174),
  ('expression_binary -> dot_binary_expression','expression_binary',1,'p_expression_binary','parser.py',175),
  ('normal_binary_expression -> add_expression','normal_binary_expression',1,'p_normal_binary_expression','parser.py',178),
  ('normal_binary_expression -> sub_expression','normal_binary_expression',1,'p_normal_binary_expression','parser.py',179),
  ('normal_binary_expression -> mul_expression','normal_binary_expression',1,'p_normal_binary_expression','parser.py',180),
  ('normal_binary_expression -> div_expression','normal_binary_expression',1,'p_normal_binary_expression','parser.py',181),
  ('dot_binary_expression -> dot_add_expression','dot_binary_expression',1,'p_dot_binary_expression','parser.py',184),
  ('dot_binary_expression -> dot_sub_expression','dot_binary_expression',1,'p_dot_binary_expression','parser.py',185),
  ('dot_binary_expression -> dot_mul_expression','dot_binary_expression',1,'p_dot_binary_expression','parser.py',186),
  ('dot_binary_expression -> dot_div_expression','dot_binary_expression',1,'p_dot_binary_expression','parser.py',187),
  ('add_expression -> expression + expression','add_expression',3,'p_add_expression','parser.py',190),
  ('sub_expression -> expression - expression','sub_expression',3,'p_sub_expression','parser.py',193),
  ('mul_expression -> expression * expression','mul_expression',3,'p_mul_expression','parser.py',196),
  ('div_expression -> expression / expression','div_expression',3,'p_div_expression','parser.py',199),
  ('dot_add_expression -> expression DOTADD expression','dot_add_expression',3,'p_dot_add_expression','parser.py',202),
  ('dot_sub_expression -> expression DOTSUB expression','dot_sub_expression',3,'p_dot_sub_expression','parser.py',205),
  ('dot_mul_expression -> expression DOTMUL expression','dot_mul_expression',3,'p_dot_mul_expression','parser.py',208),
  ('dot_div_expression -> expression DOTDIV expression','dot_div_expression',3,'p_dot_div_expression','parser.py',211),
]
