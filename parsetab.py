
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftIFleftELSEnonassoc=ADDASSIGNSUBASSIGNMULASSIGNDIVASSIGNnonassoc<>EQNEQLEQGEQleft+-DOTADDDOTSUBleft*/DOTMULDOTDIVnonassoc\'\' ( ) * + , - / : ; < = > ADDASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQ EYE FOR GEQ ID IF INTNUM LEQ MULASSIGN NEQ ONES PRINT REALNUM RETURN STRING SUBASSIGN WHILE ZEROS [ ] { }program : instruction_lines\n               | emptyempty : instruction_lines : instruction_lines instruction_line\n                         | instruction_lineinstruction_line : instruction \';\'\n                        | if_else\n                        | while_loop\n                        | for_loop\n                        | code_blockif_else : IF condition instruction_line\n               | IF condition instruction_line ELSE instruction_linewhile_loop : WHILE condition instruction_linefor_loop : FOR identifier \'=\' range instruction_linecode_block : \'{\' program \'}\' instruction : assignment\n                   | printing\n                   | continue_statement\n                   | break_statement\n                   | returningcontinue_statement : CONTINUEbreak_statement : BREAKassignment : identifier assignment_op expressionprinting : PRINT array_linereturning : RETURN expressionassignment_op : \'=\'\n                     | ADDASSIGN\n                     | SUBASSIGN\n                     | MULASSIGN\n                     | DIVASSIGNcondition : \'(\' bool_expression \')\'bool_expression : expression comparison_op expressioncomparison_op : \'<\'\n                     | \'>\'\n                     | EQ\n                     | NEQ\n                     | GEQ\n                     | LEQrange : id_or_number \':\' id_or_numberexpression : expression_binary\n                  | array\n                  | elementary\n                  | array_special\n                  | negation\n                  | transposition\n                  | expression_grouparray : \'[\' array_lines \']\' array_lines : array_lines \';\' array_line\n                   | array_linearray_line : array_line \',\' expression\n                  | expressionarray_special : ZEROS array_special_specifier\n                     | ONES array_special_specifier\n                     | EYE array_special_specifier array_special_specifier : \'(\' id_or_number \')\'transposition : identifier "\'"\n                     | array "\'" negation : \'-\' expressionelementary : id_or_number\n                  | texttext : STRINGid_or_number : identifier\n                    | numberidentifier : ID \'[\' array_line \']\'\n                  | IDnumber : integer\n              | realinteger : INTNUMreal : REALNUMexpression_binary : normal_binary_expression\n                         | dot_binary_expressionnormal_binary_expression : add_expression\n                                | sub_expression\n                                | mul_expression\n                                | div_expressiondot_binary_expression : dot_add_expression\n                             | dot_sub_expression\n                             | dot_mul_expression\n                             | dot_div_expressionadd_expression : expression \'+\' expressionsub_expression : expression \'-\' expressionmul_expression : expression \'*\' expressiondiv_expression : expression \'/\' expressiondot_add_expression : expression DOTADD expressiondot_sub_expression : expression DOTSUB expressiondot_mul_expression : expression DOTMUL expressiondot_div_expression : expression DOTDIV expressionexpression_group : \'(\' expression \')\' '
    
_lr_action_items = {'$end':([0,1,2,3,4,6,7,8,9,25,26,74,77,80,127,129,],[-3,0,-1,-2,-5,-7,-8,-9,-10,-4,-6,-11,-13,-15,-12,-14,]),'IF':([0,2,4,6,7,8,9,19,24,25,26,27,29,66,68,69,70,71,74,77,80,101,102,110,111,126,127,129,133,],[15,15,-5,-7,-8,-9,-10,15,-65,-4,-6,15,15,-63,-66,-67,-68,-69,-11,-13,-15,15,-31,-62,15,-64,-12,-14,-39,]),'WHILE':([0,2,4,6,7,8,9,19,24,25,26,27,29,66,68,69,70,71,74,77,80,101,102,110,111,126,127,129,133,],[16,16,-5,-7,-8,-9,-10,16,-65,-4,-6,16,16,-63,-66,-67,-68,-69,-11,-13,-15,16,-31,-62,16,-64,-12,-14,-39,]),'FOR':([0,2,4,6,7,8,9,19,24,25,26,27,29,66,68,69,70,71,74,77,80,101,102,110,111,126,127,129,133,],[17,17,-5,-7,-8,-9,-10,17,-65,-4,-6,17,17,-63,-66,-67,-68,-69,-11,-13,-15,17,-31,-62,17,-64,-12,-14,-39,]),'{':([0,2,4,6,7,8,9,19,24,25,26,27,29,66,68,69,70,71,74,77,80,101,102,110,111,126,127,129,133,],[19,19,-5,-7,-8,-9,-10,19,-65,-4,-6,19,19,-63,-66,-67,-68,-69,-11,-13,-15,19,-31,-62,19,-64,-12,-14,-39,]),'PRINT':([0,2,4,6,7,8,9,19,24,25,26,27,29,66,68,69,70,71,74,77,80,101,102,110,111,126,127,129,133,],[20,20,-5,-7,-8,-9,-10,20,-65,-4,-6,20,20,-63,-66,-67,-68,-69,-11,-13,-15,20,-31,-62,20,-64,-12,-14,-39,]),'CONTINUE':([0,2,4,6,7,8,9,19,24,25,26,27,29,66,68,69,70,71,74,77,80,101,102,110,111,126,127,129,133,],[21,21,-5,-7,-8,-9,-10,21,-65,-4,-6,21,21,-63,-66,-67,-68,-69,-11,-13,-15,21,-31,-62,21,-64,-12,-14,-39,]),'BREAK':([0,2,4,6,7,8,9,19,24,25,26,27,29,66,68,69,70,71,74,77,80,101,102,110,111,126,127,129,133,],[22,22,-5,-7,-8,-9,-10,22,-65,-4,-6,22,22,-63,-66,-67,-68,-69,-11,-13,-15,22,-31,-62,22,-64,-12,-14,-39,]),'RETURN':([0,2,4,6,7,8,9,19,24,25,26,27,29,66,68,69,70,71,74,77,80,101,102,110,111,126,127,129,133,],[23,23,-5,-7,-8,-9,-10,23,-65,-4,-6,23,23,-63,-66,-67,-68,-69,-11,-13,-15,23,-31,-62,23,-64,-12,-14,-39,]),'ID':([0,2,4,6,7,8,9,17,19,20,23,24,25,26,27,28,29,31,32,33,34,35,36,49,55,57,66,68,69,70,71,73,74,77,78,80,81,82,83,84,85,86,87,88,89,94,101,102,103,104,105,106,107,108,109,110,111,123,126,127,129,130,133,],[24,24,-5,-7,-8,-9,-10,24,24,24,24,-65,-4,-6,24,24,24,24,-26,-27,-28,-29,-30,24,24,24,-63,-66,-67,-68,-69,24,-11,-13,24,-15,24,24,24,24,24,24,24,24,24,24,24,-31,24,-33,-34,-35,-36,-37,-38,-62,24,24,-64,-12,-14,24,-39,]),'}':([2,3,4,6,7,8,9,19,25,26,37,74,77,80,127,129,],[-1,-2,-5,-7,-8,-9,-10,-3,-4,-6,80,-11,-13,-15,-12,-14,]),';':([5,10,11,12,13,14,21,22,24,38,39,40,41,42,43,44,45,46,47,48,50,51,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,90,91,92,93,95,96,97,98,113,114,115,116,117,118,119,120,121,122,125,126,131,132,],[26,-16,-17,-18,-19,-20,-21,-22,-65,-24,-51,-40,-41,-42,-43,-44,-45,-46,-70,-71,-59,-60,-62,-72,-73,-74,-75,-76,-77,-78,-79,-63,-61,-66,-67,-68,-69,-25,-23,-57,123,-49,-52,-53,-54,-58,-56,-50,-80,-81,-82,-83,-84,-85,-86,-87,-47,-88,-64,-48,-55,]),'ELSE':([6,7,8,9,26,74,77,80,127,129,],[-7,-8,-9,-10,-6,101,-13,-15,-12,-14,]),'(':([15,16,20,23,28,31,32,33,34,35,36,49,52,53,54,55,57,73,81,82,83,84,85,86,87,88,89,103,104,105,106,107,108,109,123,],[28,28,57,57,57,57,-26,-27,-28,-29,-30,57,94,94,94,57,57,57,57,57,57,57,57,57,57,57,57,57,-33,-34,-35,-36,-37,-38,57,]),'=':([18,24,30,126,],[32,-65,78,-64,]),'ADDASSIGN':([18,24,126,],[33,-65,-64,]),'SUBASSIGN':([18,24,126,],[34,-65,-64,]),'MULASSIGN':([18,24,126,],[35,-65,-64,]),'DIVASSIGN':([18,24,126,],[36,-65,-64,]),'[':([20,23,24,28,31,32,33,34,35,36,49,55,57,73,81,82,83,84,85,86,87,88,89,103,104,105,106,107,108,109,123,],[49,49,73,49,49,-26,-27,-28,-29,-30,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-33,-34,-35,-36,-37,-38,49,]),'ZEROS':([20,23,28,31,32,33,34,35,36,49,55,57,73,81,82,83,84,85,86,87,88,89,103,104,105,106,107,108,109,123,],[52,52,52,52,-26,-27,-28,-29,-30,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-33,-34,-35,-36,-37,-38,52,]),'ONES':([20,23,28,31,32,33,34,35,36,49,55,57,73,81,82,83,84,85,86,87,88,89,103,104,105,106,107,108,109,123,],[53,53,53,53,-26,-27,-28,-29,-30,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-33,-34,-35,-36,-37,-38,53,]),'EYE':([20,23,28,31,32,33,34,35,36,49,55,57,73,81,82,83,84,85,86,87,88,89,103,104,105,106,107,108,109,123,],[54,54,54,54,-26,-27,-28,-29,-30,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-33,-34,-35,-36,-37,-38,54,]),'-':([20,23,24,28,31,32,33,34,35,36,39,40,41,42,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,76,79,81,82,83,84,85,86,87,88,89,90,93,95,96,97,98,99,103,104,105,106,107,108,109,113,114,115,116,117,118,119,120,121,122,123,125,126,128,132,],[55,55,-65,55,55,-26,-27,-28,-29,-30,83,-40,-41,-42,-43,-44,-45,-46,-70,-71,55,-59,-60,55,-62,55,-72,-73,-74,-75,-76,-77,-78,-79,-63,-61,-66,-67,-68,-69,83,55,83,83,55,55,55,55,55,55,55,55,55,-57,-52,-53,-54,-58,-56,83,55,-33,-34,-35,-36,-37,-38,83,-80,-81,-82,-83,-84,-85,-86,-87,-47,55,-88,-64,83,-55,]),'STRING':([20,23,28,31,32,33,34,35,36,49,55,57,73,81,82,83,84,85,86,87,88,89,103,104,105,106,107,108,109,123,],[67,67,67,67,-26,-27,-28,-29,-30,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-33,-34,-35,-36,-37,-38,67,]),'INTNUM':([20,23,28,31,32,33,34,35,36,49,55,57,73,78,81,82,83,84,85,86,87,88,89,94,103,104,105,106,107,108,109,123,130,],[70,70,70,70,-26,-27,-28,-29,-30,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-33,-34,-35,-36,-37,-38,70,70,]),'REALNUM':([20,23,28,31,32,33,34,35,36,49,55,57,73,78,81,82,83,84,85,86,87,88,89,94,103,104,105,106,107,108,109,123,130,],[71,71,71,71,-26,-27,-28,-29,-30,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-33,-34,-35,-36,-37,-38,71,71,]),"'":([24,41,56,122,126,],[-65,90,98,-47,-64,]),'+':([24,39,40,41,42,43,44,45,46,47,48,50,51,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,76,79,90,93,95,96,97,98,99,113,114,115,116,117,118,119,120,121,122,125,126,128,132,],[-65,82,-40,-41,-42,-43,-44,-45,-46,-70,-71,-59,-60,-62,-72,-73,-74,-75,-76,-77,-78,-79,-63,-61,-66,-67,-68,-69,82,82,82,-57,-52,-53,-54,-58,-56,82,82,-80,-81,-82,-83,-84,-85,-86,-87,-47,-88,-64,82,-55,]),'*':([24,39,40,41,42,43,44,45,46,47,48,50,51,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,76,79,90,93,95,96,97,98,99,113,114,115,116,117,118,119,120,121,122,125,126,128,132,],[-65,84,-40,-41,-42,-43,-44,-45,-46,-70,-71,-59,-60,-62,-72,-73,-74,-75,-76,-77,-78,-79,-63,-61,-66,-67,-68,-69,84,84,84,-57,-52,-53,-54,84,-56,84,84,84,84,-82,-83,84,84,-86,-87,-47,-88,-64,84,-55,]),'/':([24,39,40,41,42,43,44,45,46,47,48,50,51,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,76,79,90,93,95,96,97,98,99,113,114,115,116,117,118,119,120,121,122,125,126,128,132,],[-65,85,-40,-41,-42,-43,-44,-45,-46,-70,-71,-59,-60,-62,-72,-73,-74,-75,-76,-77,-78,-79,-63,-61,-66,-67,-68,-69,85,85,85,-57,-52,-53,-54,85,-56,85,85,85,85,-82,-83,85,85,-86,-87,-47,-88,-64,85,-55,]),'DOTADD':([24,39,40,41,42,43,44,45,46,47,48,50,51,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,76,79,90,93,95,96,97,98,99,113,114,115,116,117,118,119,120,121,122,125,126,128,132,],[-65,86,-40,-41,-42,-43,-44,-45,-46,-70,-71,-59,-60,-62,-72,-73,-74,-75,-76,-77,-78,-79,-63,-61,-66,-67,-68,-69,86,86,86,-57,-52,-53,-54,-58,-56,86,86,-80,-81,-82,-83,-84,-85,-86,-87,-47,-88,-64,86,-55,]),'DOTSUB':([24,39,40,41,42,43,44,45,46,47,48,50,51,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,76,79,90,93,95,96,97,98,99,113,114,115,116,117,118,119,120,121,122,125,126,128,132,],[-65,87,-40,-41,-42,-43,-44,-45,-46,-70,-71,-59,-60,-62,-72,-73,-74,-75,-76,-77,-78,-79,-63,-61,-66,-67,-68,-69,87,87,87,-57,-52,-53,-54,-58,-56,87,87,-80,-81,-82,-83,-84,-85,-86,-87,-47,-88,-64,87,-55,]),'DOTMUL':([24,39,40,41,42,43,44,45,46,47,48,50,51,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,76,79,90,93,95,96,97,98,99,113,114,115,116,117,118,119,120,121,122,125,126,128,132,],[-65,88,-40,-41,-42,-43,-44,-45,-46,-70,-71,-59,-60,-62,-72,-73,-74,-75,-76,-77,-78,-79,-63,-61,-66,-67,-68,-69,88,88,88,-57,-52,-53,-54,88,-56,88,88,88,88,-82,-83,88,88,-86,-87,-47,-88,-64,88,-55,]),'DOTDIV':([24,39,40,41,42,43,44,45,46,47,48,50,51,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,76,79,90,93,95,96,97,98,99,113,114,115,116,117,118,119,120,121,122,125,126,128,132,],[-65,89,-40,-41,-42,-43,-44,-45,-46,-70,-71,-59,-60,-62,-72,-73,-74,-75,-76,-77,-78,-79,-63,-61,-66,-67,-68,-69,89,89,89,-57,-52,-53,-54,89,-56,89,89,89,89,-82,-83,89,89,-86,-87,-47,-88,-64,89,-55,]),',':([24,38,39,40,41,42,43,44,45,46,47,48,50,51,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,90,92,93,95,96,97,98,100,113,114,115,116,117,118,119,120,121,122,125,126,131,132,],[-65,81,-51,-40,-41,-42,-43,-44,-45,-46,-70,-71,-59,-60,-62,-72,-73,-74,-75,-76,-77,-78,-79,-63,-61,-66,-67,-68,-69,-57,81,-52,-53,-54,-58,-56,81,-50,-80,-81,-82,-83,-84,-85,-86,-87,-47,-88,-64,81,-55,]),'<':([24,40,41,42,43,44,45,46,47,48,50,51,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,76,90,93,95,96,97,98,114,115,116,117,118,119,120,121,122,125,126,132,],[-65,-40,-41,-42,-43,-44,-45,-46,-70,-71,-59,-60,-62,-72,-73,-74,-75,-76,-77,-78,-79,-63,-61,-66,-67,-68,-69,104,-57,-52,-53,-54,-58,-56,-80,-81,-82,-83,-84,-85,-86,-87,-47,-88,-64,-55,]),'>':([24,40,41,42,43,44,45,46,47,48,50,51,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,76,90,93,95,96,97,98,114,115,116,117,118,119,120,121,122,125,126,132,],[-65,-40,-41,-42,-43,-44,-45,-46,-70,-71,-59,-60,-62,-72,-73,-74,-75,-76,-77,-78,-79,-63,-61,-66,-67,-68,-69,105,-57,-52,-53,-54,-58,-56,-80,-81,-82,-83,-84,-85,-86,-87,-47,-88,-64,-55,]),'EQ':([24,40,41,42,43,44,45,46,47,48,50,51,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,76,90,93,95,96,97,98,114,115,116,117,118,119,120,121,122,125,126,132,],[-65,-40,-41,-42,-43,-44,-45,-46,-70,-71,-59,-60,-62,-72,-73,-74,-75,-76,-77,-78,-79,-63,-61,-66,-67,-68,-69,106,-57,-52,-53,-54,-58,-56,-80,-81,-82,-83,-84,-85,-86,-87,-47,-88,-64,-55,]),'NEQ':([24,40,41,42,43,44,45,46,47,48,50,51,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,76,90,93,95,96,97,98,114,115,116,117,118,119,120,121,122,125,126,132,],[-65,-40,-41,-42,-43,-44,-45,-46,-70,-71,-59,-60,-62,-72,-73,-74,-75,-76,-77,-78,-79,-63,-61,-66,-67,-68,-69,107,-57,-52,-53,-54,-58,-56,-80,-81,-82,-83,-84,-85,-86,-87,-47,-88,-64,-55,]),'GEQ':([24,40,41,42,43,44,45,46,47,48,50,51,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,76,90,93,95,96,97,98,114,115,116,117,118,119,120,121,122,125,126,132,],[-65,-40,-41,-42,-43,-44,-45,-46,-70,-71,-59,-60,-62,-72,-73,-74,-75,-76,-77,-78,-79,-63,-61,-66,-67,-68,-69,108,-57,-52,-53,-54,-58,-56,-80,-81,-82,-83,-84,-85,-86,-87,-47,-88,-64,-55,]),'LEQ':([24,40,41,42,43,44,45,46,47,48,50,51,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,76,90,93,95,96,97,98,114,115,116,117,118,119,120,121,122,125,126,132,],[-65,-40,-41,-42,-43,-44,-45,-46,-70,-71,-59,-60,-62,-72,-73,-74,-75,-76,-77,-78,-79,-63,-61,-66,-67,-68,-69,109,-57,-52,-53,-54,-58,-56,-80,-81,-82,-83,-84,-85,-86,-87,-47,-88,-64,-55,]),']':([24,39,40,41,42,43,44,45,46,47,48,50,51,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,90,91,92,93,95,96,97,98,100,113,114,115,116,117,118,119,120,121,122,125,126,131,132,],[-65,-51,-40,-41,-42,-43,-44,-45,-46,-70,-71,-59,-60,-62,-72,-73,-74,-75,-76,-77,-78,-79,-63,-61,-66,-67,-68,-69,-57,122,-49,-52,-53,-54,-58,-56,126,-50,-80,-81,-82,-83,-84,-85,-86,-87,-47,-88,-64,-48,-55,]),')':([24,40,41,42,43,44,45,46,47,48,50,51,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,75,90,93,95,96,97,98,99,110,114,115,116,117,118,119,120,121,122,124,125,126,128,132,],[-65,-40,-41,-42,-43,-44,-45,-46,-70,-71,-59,-60,-62,-72,-73,-74,-75,-76,-77,-78,-79,-63,-61,-66,-67,-68,-69,102,-57,-52,-53,-54,-58,-56,125,-62,-80,-81,-82,-83,-84,-85,-86,-87,-47,132,-88,-64,-32,-55,]),':':([24,66,68,69,70,71,110,112,126,],[-65,-63,-66,-67,-68,-69,-62,130,-64,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,19,],[1,37,]),'instruction_lines':([0,19,],[2,2,]),'empty':([0,19,],[3,3,]),'instruction_line':([0,2,19,27,29,101,111,],[4,25,4,74,77,127,129,]),'instruction':([0,2,19,27,29,101,111,],[5,5,5,5,5,5,5,]),'if_else':([0,2,19,27,29,101,111,],[6,6,6,6,6,6,6,]),'while_loop':([0,2,19,27,29,101,111,],[7,7,7,7,7,7,7,]),'for_loop':([0,2,19,27,29,101,111,],[8,8,8,8,8,8,8,]),'code_block':([0,2,19,27,29,101,111,],[9,9,9,9,9,9,9,]),'assignment':([0,2,19,27,29,101,111,],[10,10,10,10,10,10,10,]),'printing':([0,2,19,27,29,101,111,],[11,11,11,11,11,11,11,]),'continue_statement':([0,2,19,27,29,101,111,],[12,12,12,12,12,12,12,]),'break_statement':([0,2,19,27,29,101,111,],[13,13,13,13,13,13,13,]),'returning':([0,2,19,27,29,101,111,],[14,14,14,14,14,14,14,]),'identifier':([0,2,17,19,20,23,27,28,29,31,49,55,57,73,78,81,82,83,84,85,86,87,88,89,94,101,103,111,123,130,],[18,18,30,18,56,56,18,56,18,56,56,56,56,56,110,56,56,56,56,56,56,56,56,56,110,18,56,18,56,110,]),'condition':([15,16,],[27,29,]),'assignment_op':([18,],[31,]),'array_line':([20,49,73,123,],[38,92,100,131,]),'expression':([20,23,28,31,49,55,57,73,81,82,83,84,85,86,87,88,89,103,123,],[39,72,76,79,39,97,99,39,113,114,115,116,117,118,119,120,121,128,39,]),'expression_binary':([20,23,28,31,49,55,57,73,81,82,83,84,85,86,87,88,89,103,123,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'array':([20,23,28,31,49,55,57,73,81,82,83,84,85,86,87,88,89,103,123,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'elementary':([20,23,28,31,49,55,57,73,81,82,83,84,85,86,87,88,89,103,123,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'array_special':([20,23,28,31,49,55,57,73,81,82,83,84,85,86,87,88,89,103,123,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'negation':([20,23,28,31,49,55,57,73,81,82,83,84,85,86,87,88,89,103,123,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'transposition':([20,23,28,31,49,55,57,73,81,82,83,84,85,86,87,88,89,103,123,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'expression_group':([20,23,28,31,49,55,57,73,81,82,83,84,85,86,87,88,89,103,123,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'normal_binary_expression':([20,23,28,31,49,55,57,73,81,82,83,84,85,86,87,88,89,103,123,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'dot_binary_expression':([20,23,28,31,49,55,57,73,81,82,83,84,85,86,87,88,89,103,123,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'id_or_number':([20,23,28,31,49,55,57,73,78,81,82,83,84,85,86,87,88,89,94,103,123,130,],[50,50,50,50,50,50,50,50,112,50,50,50,50,50,50,50,50,50,124,50,50,133,]),'text':([20,23,28,31,49,55,57,73,81,82,83,84,85,86,87,88,89,103,123,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'add_expression':([20,23,28,31,49,55,57,73,81,82,83,84,85,86,87,88,89,103,123,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'sub_expression':([20,23,28,31,49,55,57,73,81,82,83,84,85,86,87,88,89,103,123,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'mul_expression':([20,23,28,31,49,55,57,73,81,82,83,84,85,86,87,88,89,103,123,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'div_expression':([20,23,28,31,49,55,57,73,81,82,83,84,85,86,87,88,89,103,123,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'dot_add_expression':([20,23,28,31,49,55,57,73,81,82,83,84,85,86,87,88,89,103,123,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'dot_sub_expression':([20,23,28,31,49,55,57,73,81,82,83,84,85,86,87,88,89,103,123,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'dot_mul_expression':([20,23,28,31,49,55,57,73,81,82,83,84,85,86,87,88,89,103,123,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'dot_div_expression':([20,23,28,31,49,55,57,73,81,82,83,84,85,86,87,88,89,103,123,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'number':([20,23,28,31,49,55,57,73,78,81,82,83,84,85,86,87,88,89,94,103,123,130,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'integer':([20,23,28,31,49,55,57,73,78,81,82,83,84,85,86,87,88,89,94,103,123,130,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'real':([20,23,28,31,49,55,57,73,78,81,82,83,84,85,86,87,88,89,94,103,123,130,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'bool_expression':([28,],[75,]),'array_lines':([49,],[91,]),'array_special_specifier':([52,53,54,],[93,95,96,]),'comparison_op':([76,],[103,]),'range':([78,],[111,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instruction_lines','program',1,'p_program','parser.py',31),
  ('program -> empty','program',1,'p_program','parser.py',32),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',36),
  ('instruction_lines -> instruction_lines instruction_line','instruction_lines',2,'p_instructions','parser.py',40),
  ('instruction_lines -> instruction_line','instruction_lines',1,'p_instructions','parser.py',41),
  ('instruction_line -> instruction ;','instruction_line',2,'p_instruction_line','parser.py',49),
  ('instruction_line -> if_else','instruction_line',1,'p_instruction_line','parser.py',50),
  ('instruction_line -> while_loop','instruction_line',1,'p_instruction_line','parser.py',51),
  ('instruction_line -> for_loop','instruction_line',1,'p_instruction_line','parser.py',52),
  ('instruction_line -> code_block','instruction_line',1,'p_instruction_line','parser.py',53),
  ('if_else -> IF condition instruction_line','if_else',3,'p_if_else','parser.py',57),
  ('if_else -> IF condition instruction_line ELSE instruction_line','if_else',5,'p_if_else','parser.py',58),
  ('while_loop -> WHILE condition instruction_line','while_loop',3,'p_while_loop','parser.py',65),
  ('for_loop -> FOR identifier = range instruction_line','for_loop',5,'p_for_loop','parser.py',69),
  ('code_block -> { program }','code_block',3,'p_code_block','parser.py',73),
  ('instruction -> assignment','instruction',1,'p_instruction','parser.py',77),
  ('instruction -> printing','instruction',1,'p_instruction','parser.py',78),
  ('instruction -> continue_statement','instruction',1,'p_instruction','parser.py',79),
  ('instruction -> break_statement','instruction',1,'p_instruction','parser.py',80),
  ('instruction -> returning','instruction',1,'p_instruction','parser.py',81),
  ('continue_statement -> CONTINUE','continue_statement',1,'p_continue_statement','parser.py',85),
  ('break_statement -> BREAK','break_statement',1,'p_break_statement','parser.py',89),
  ('assignment -> identifier assignment_op expression','assignment',3,'p_assignment','parser.py',96),
  ('printing -> PRINT array_line','printing',2,'p_printing','parser.py',100),
  ('returning -> RETURN expression','returning',2,'p_returning','parser.py',104),
  ('assignment_op -> =','assignment_op',1,'p_assignment_op','parser.py',111),
  ('assignment_op -> ADDASSIGN','assignment_op',1,'p_assignment_op','parser.py',112),
  ('assignment_op -> SUBASSIGN','assignment_op',1,'p_assignment_op','parser.py',113),
  ('assignment_op -> MULASSIGN','assignment_op',1,'p_assignment_op','parser.py',114),
  ('assignment_op -> DIVASSIGN','assignment_op',1,'p_assignment_op','parser.py',115),
  ('condition -> ( bool_expression )','condition',3,'p_condition','parser.py',122),
  ('bool_expression -> expression comparison_op expression','bool_expression',3,'p_bool_expression','parser.py',126),
  ('comparison_op -> <','comparison_op',1,'p_comparison_op','parser.py',130),
  ('comparison_op -> >','comparison_op',1,'p_comparison_op','parser.py',131),
  ('comparison_op -> EQ','comparison_op',1,'p_comparison_op','parser.py',132),
  ('comparison_op -> NEQ','comparison_op',1,'p_comparison_op','parser.py',133),
  ('comparison_op -> GEQ','comparison_op',1,'p_comparison_op','parser.py',134),
  ('comparison_op -> LEQ','comparison_op',1,'p_comparison_op','parser.py',135),
  ('range -> id_or_number : id_or_number','range',3,'p_range','parser.py',142),
  ('expression -> expression_binary','expression',1,'p_expression','parser.py',149),
  ('expression -> array','expression',1,'p_expression','parser.py',150),
  ('expression -> elementary','expression',1,'p_expression','parser.py',151),
  ('expression -> array_special','expression',1,'p_expression','parser.py',152),
  ('expression -> negation','expression',1,'p_expression','parser.py',153),
  ('expression -> transposition','expression',1,'p_expression','parser.py',154),
  ('expression -> expression_group','expression',1,'p_expression','parser.py',155),
  ('array -> [ array_lines ]','array',3,'p_array','parser.py',162),
  ('array_lines -> array_lines ; array_line','array_lines',3,'p_array_lines','parser.py',166),
  ('array_lines -> array_line','array_lines',1,'p_array_lines','parser.py',167),
  ('array_line -> array_line , expression','array_line',3,'p_array_line','parser.py',174),
  ('array_line -> expression','array_line',1,'p_array_line','parser.py',175),
  ('array_special -> ZEROS array_special_specifier','array_special',2,'p_array_special','parser.py',185),
  ('array_special -> ONES array_special_specifier','array_special',2,'p_array_special','parser.py',186),
  ('array_special -> EYE array_special_specifier','array_special',2,'p_array_special','parser.py',187),
  ('array_special_specifier -> ( id_or_number )','array_special_specifier',3,'p_array_special_specifier','parser.py',192),
  ("transposition -> identifier '",'transposition',2,'p_transposition','parser.py',196),
  ("transposition -> array '",'transposition',2,'p_transposition','parser.py',197),
  ('negation -> - expression','negation',2,'p_negation','parser.py',204),
  ('elementary -> id_or_number','elementary',1,'p_elementary','parser.py',211),
  ('elementary -> text','elementary',1,'p_elementary','parser.py',212),
  ('text -> STRING','text',1,'p_text','parser.py',216),
  ('id_or_number -> identifier','id_or_number',1,'p_id_or_number','parser.py',220),
  ('id_or_number -> number','id_or_number',1,'p_id_or_number','parser.py',221),
  ('identifier -> ID [ array_line ]','identifier',4,'p_identifier','parser.py',225),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',226),
  ('number -> integer','number',1,'p_number','parser.py',233),
  ('number -> real','number',1,'p_number','parser.py',234),
  ('integer -> INTNUM','integer',1,'p_integer','parser.py',238),
  ('real -> REALNUM','real',1,'p_real','parser.py',242),
  ('expression_binary -> normal_binary_expression','expression_binary',1,'p_expression_binary','parser.py',248),
  ('expression_binary -> dot_binary_expression','expression_binary',1,'p_expression_binary','parser.py',249),
  ('normal_binary_expression -> add_expression','normal_binary_expression',1,'p_normal_binary_expression','parser.py',253),
  ('normal_binary_expression -> sub_expression','normal_binary_expression',1,'p_normal_binary_expression','parser.py',254),
  ('normal_binary_expression -> mul_expression','normal_binary_expression',1,'p_normal_binary_expression','parser.py',255),
  ('normal_binary_expression -> div_expression','normal_binary_expression',1,'p_normal_binary_expression','parser.py',256),
  ('dot_binary_expression -> dot_add_expression','dot_binary_expression',1,'p_dot_binary_expression','parser.py',260),
  ('dot_binary_expression -> dot_sub_expression','dot_binary_expression',1,'p_dot_binary_expression','parser.py',261),
  ('dot_binary_expression -> dot_mul_expression','dot_binary_expression',1,'p_dot_binary_expression','parser.py',262),
  ('dot_binary_expression -> dot_div_expression','dot_binary_expression',1,'p_dot_binary_expression','parser.py',263),
  ('add_expression -> expression + expression','add_expression',3,'p_add_expression','parser.py',267),
  ('sub_expression -> expression - expression','sub_expression',3,'p_sub_expression','parser.py',271),
  ('mul_expression -> expression * expression','mul_expression',3,'p_mul_expression','parser.py',275),
  ('div_expression -> expression / expression','div_expression',3,'p_div_expression','parser.py',279),
  ('dot_add_expression -> expression DOTADD expression','dot_add_expression',3,'p_dot_add_expression','parser.py',283),
  ('dot_sub_expression -> expression DOTSUB expression','dot_sub_expression',3,'p_dot_sub_expression','parser.py',287),
  ('dot_mul_expression -> expression DOTMUL expression','dot_mul_expression',3,'p_dot_mul_expression','parser.py',291),
  ('dot_div_expression -> expression DOTDIV expression','dot_div_expression',3,'p_dot_div_expression','parser.py',295),
  ('expression_group -> ( expression )','expression_group',3,'p_expression_group','parser.py',301),
]
