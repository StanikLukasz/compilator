Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> instruction_lines
Rule 2     program -> empty
Rule 3     empty -> <empty>
Rule 4     instruction_lines -> instruction_lines instruction_line
Rule 5     instruction_lines -> instruction_line
Rule 6     instruction_line -> if_else
Rule 7     instruction_line -> while_loop
Rule 8     instruction_line -> for_loop
Rule 9     instruction_line -> code_block
Rule 10    instruction_line -> instruction ;
Rule 11    if_else -> IF condition instruction_line
Rule 12    if_else -> IF condition instruction_line ELSE instruction_line
Rule 13    while_loop -> WHILE condition instruction_line
Rule 14    for_loop -> FOR identifier = range instruction_line
Rule 15    code_block -> { program }
Rule 16    condition -> ( bool_expression )
Rule 17    bool_expression -> expression comparison_op expression
Rule 18    comparison_op -> <
Rule 19    comparison_op -> >
Rule 20    comparison_op -> EQ
Rule 21    comparison_op -> NEQ
Rule 22    comparison_op -> GEQ
Rule 23    comparison_op -> LEQ
Rule 24    range -> id_or_number : id_or_number
Rule 25    instruction -> assignment
Rule 26    instruction -> printing
Rule 27    instruction -> continue_statement
Rule 28    instruction -> break_statement
Rule 29    instruction -> returning
Rule 30    assignment -> identifier assignment_op expression
Rule 31    printing -> PRINT array_line
Rule 32    continue_statement -> CONTINUE
Rule 33    break_statement -> BREAK
Rule 34    returning -> RETURN expression
Rule 35    assignment_op -> =
Rule 36    assignment_op -> ADDASSIGN
Rule 37    assignment_op -> SUBASSIGN
Rule 38    assignment_op -> MULASSIGN
Rule 39    assignment_op -> DIVASSIGN
Rule 40    expression -> expression_binary
Rule 41    expression -> array
Rule 42    expression -> array_special
Rule 43    expression -> transposition
Rule 44    expression -> negation
Rule 45    expression -> expression_group
Rule 46    expression -> elementary
Rule 47    array -> [ array_lines ]
Rule 48    array_lines -> array_lines ; array_line
Rule 49    array_lines -> array_line
Rule 50    array_line -> array_line , expression
Rule 51    array_line -> expression
Rule 52    array_special -> ZEROS array_special_specifier
Rule 53    array_special -> ONES array_special_specifier
Rule 54    array_special -> EYE array_special_specifier
Rule 55    array_special_specifier -> ( id_or_number )
Rule 56    transposition -> identifier '
Rule 57    transposition -> array '
Rule 58    negation -> MINUS expression
Rule 59    expression_binary -> normal_binary_expression
Rule 60    expression_binary -> dot_binary_expression
Rule 61    normal_binary_expression -> add_expression
Rule 62    normal_binary_expression -> sub_expression
Rule 63    normal_binary_expression -> mul_expression
Rule 64    normal_binary_expression -> div_expression
Rule 65    dot_binary_expression -> dot_add_expression
Rule 66    dot_binary_expression -> dot_sub_expression
Rule 67    dot_binary_expression -> dot_mul_expression
Rule 68    dot_binary_expression -> dot_div_expression
Rule 69    add_expression -> expression PLUS expression
Rule 70    sub_expression -> expression MINUS expression
Rule 71    mul_expression -> expression * expression
Rule 72    div_expression -> expression / expression
Rule 73    dot_add_expression -> expression DOTADD expression
Rule 74    dot_sub_expression -> expression DOTSUB expression
Rule 75    dot_mul_expression -> expression DOTMUL expression
Rule 76    dot_div_expression -> expression DOTDIV expression
Rule 77    expression_group -> ( expression )
Rule 78    elementary -> id_or_number
Rule 79    elementary -> text
Rule 80    text -> STRING
Rule 81    id_or_number -> identifier
Rule 82    id_or_number -> number
Rule 83    identifier -> ID [ array_line ]
Rule 84    identifier -> ID
Rule 85    number -> integer
Rule 86    number -> real
Rule 87    integer -> INTNUM
Rule 88    real -> REALNUM

Terminals, with rules where they appear

'                    : 56 57
(                    : 16 55 77
)                    : 16 55 77
*                    : 71
,                    : 50
/                    : 72
:                    : 24
;                    : 10 48
<                    : 18
=                    : 14 35
>                    : 19
ADDASSIGN            : 36
BREAK                : 33
CONTINUE             : 32
DIVASSIGN            : 39
DOTADD               : 73
DOTDIV               : 76
DOTMUL               : 75
DOTSUB               : 74
ELSE                 : 12
EQ                   : 20
EYE                  : 54
FOR                  : 14
GEQ                  : 22
ID                   : 83 84
IF                   : 11 12
INTNUM               : 87
LEQ                  : 23
MINUS                : 58 70
MULASSIGN            : 38
NEQ                  : 21
ONES                 : 53
PLUS                 : 69
PRINT                : 31
REALNUM              : 88
RETURN               : 34
STRING               : 80
SUBASSIGN            : 37
WHILE                : 13
ZEROS                : 52
[                    : 47 83
]                    : 47 83
error                : 
{                    : 15
}                    : 15

Nonterminals, with rules where they appear

add_expression       : 61
array                : 41 57
array_line           : 31 48 49 50 83
array_lines          : 47 48
array_special        : 42
array_special_specifier : 52 53 54
assignment           : 25
assignment_op        : 30
bool_expression      : 16
break_statement      : 28
code_block           : 9
comparison_op        : 17
condition            : 11 12 13
continue_statement   : 27
div_expression       : 64
dot_add_expression   : 65
dot_binary_expression : 60
dot_div_expression   : 68
dot_mul_expression   : 67
dot_sub_expression   : 66
elementary           : 46
empty                : 2
expression           : 17 17 30 34 50 51 58 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77
expression_binary    : 40
expression_group     : 45
for_loop             : 8
id_or_number         : 24 24 55 78
identifier           : 14 30 56 81
if_else              : 6
instruction          : 10
instruction_line     : 4 5 11 12 12 13 14
instruction_lines    : 1 4
integer              : 85
mul_expression       : 63
negation             : 44
normal_binary_expression : 59
number               : 82
printing             : 26
program              : 15 0
range                : 14
real                 : 86
returning            : 29
sub_expression       : 62
text                 : 79
transposition        : 43
while_loop           : 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . instruction_lines
    (2) program -> . empty
    (4) instruction_lines -> . instruction_lines instruction_line
    (5) instruction_lines -> . instruction_line
    (3) empty -> .
    (6) instruction_line -> . if_else
    (7) instruction_line -> . while_loop
    (8) instruction_line -> . for_loop
    (9) instruction_line -> . code_block
    (10) instruction_line -> . instruction ;
    (11) if_else -> . IF condition instruction_line
    (12) if_else -> . IF condition instruction_line ELSE instruction_line
    (13) while_loop -> . WHILE condition instruction_line
    (14) for_loop -> . FOR identifier = range instruction_line
    (15) code_block -> . { program }
    (25) instruction -> . assignment
    (26) instruction -> . printing
    (27) instruction -> . continue_statement
    (28) instruction -> . break_statement
    (29) instruction -> . returning
    (30) assignment -> . identifier assignment_op expression
    (31) printing -> . PRINT array_line
    (32) continue_statement -> . CONTINUE
    (33) break_statement -> . BREAK
    (34) returning -> . RETURN expression
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID

    $end            reduce using rule 3 (empty -> .)
    IF              shift and go to state 10
    WHILE           shift and go to state 11
    FOR             shift and go to state 12
    {               shift and go to state 14
    PRINT           shift and go to state 20
    CONTINUE        shift and go to state 21
    BREAK           shift and go to state 22
    RETURN          shift and go to state 23
    ID              shift and go to state 24

    program                        shift and go to state 1
    instruction_lines              shift and go to state 2
    empty                          shift and go to state 3
    instruction_line               shift and go to state 4
    if_else                        shift and go to state 5
    while_loop                     shift and go to state 6
    for_loop                       shift and go to state 7
    code_block                     shift and go to state 8
    instruction                    shift and go to state 9
    identifier                     shift and go to state 13
    assignment                     shift and go to state 15
    printing                       shift and go to state 16
    continue_statement             shift and go to state 17
    break_statement                shift and go to state 18
    returning                      shift and go to state 19

state 1

    (0) S' -> program .



state 2

    (1) program -> instruction_lines .
    (4) instruction_lines -> instruction_lines . instruction_line
    (6) instruction_line -> . if_else
    (7) instruction_line -> . while_loop
    (8) instruction_line -> . for_loop
    (9) instruction_line -> . code_block
    (10) instruction_line -> . instruction ;
    (11) if_else -> . IF condition instruction_line
    (12) if_else -> . IF condition instruction_line ELSE instruction_line
    (13) while_loop -> . WHILE condition instruction_line
    (14) for_loop -> . FOR identifier = range instruction_line
    (15) code_block -> . { program }
    (25) instruction -> . assignment
    (26) instruction -> . printing
    (27) instruction -> . continue_statement
    (28) instruction -> . break_statement
    (29) instruction -> . returning
    (30) assignment -> . identifier assignment_op expression
    (31) printing -> . PRINT array_line
    (32) continue_statement -> . CONTINUE
    (33) break_statement -> . BREAK
    (34) returning -> . RETURN expression
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID

    $end            reduce using rule 1 (program -> instruction_lines .)
    }               reduce using rule 1 (program -> instruction_lines .)
    IF              shift and go to state 10
    WHILE           shift and go to state 11
    FOR             shift and go to state 12
    {               shift and go to state 14
    PRINT           shift and go to state 20
    CONTINUE        shift and go to state 21
    BREAK           shift and go to state 22
    RETURN          shift and go to state 23
    ID              shift and go to state 24

    instruction_line               shift and go to state 25
    if_else                        shift and go to state 5
    while_loop                     shift and go to state 6
    for_loop                       shift and go to state 7
    code_block                     shift and go to state 8
    instruction                    shift and go to state 9
    identifier                     shift and go to state 13
    assignment                     shift and go to state 15
    printing                       shift and go to state 16
    continue_statement             shift and go to state 17
    break_statement                shift and go to state 18
    returning                      shift and go to state 19

state 3

    (2) program -> empty .

    $end            reduce using rule 2 (program -> empty .)
    }               reduce using rule 2 (program -> empty .)


state 4

    (5) instruction_lines -> instruction_line .

    IF              reduce using rule 5 (instruction_lines -> instruction_line .)
    WHILE           reduce using rule 5 (instruction_lines -> instruction_line .)
    FOR             reduce using rule 5 (instruction_lines -> instruction_line .)
    {               reduce using rule 5 (instruction_lines -> instruction_line .)
    PRINT           reduce using rule 5 (instruction_lines -> instruction_line .)
    CONTINUE        reduce using rule 5 (instruction_lines -> instruction_line .)
    BREAK           reduce using rule 5 (instruction_lines -> instruction_line .)
    RETURN          reduce using rule 5 (instruction_lines -> instruction_line .)
    ID              reduce using rule 5 (instruction_lines -> instruction_line .)
    $end            reduce using rule 5 (instruction_lines -> instruction_line .)
    }               reduce using rule 5 (instruction_lines -> instruction_line .)


state 5

    (6) instruction_line -> if_else .

    IF              reduce using rule 6 (instruction_line -> if_else .)
    WHILE           reduce using rule 6 (instruction_line -> if_else .)
    FOR             reduce using rule 6 (instruction_line -> if_else .)
    {               reduce using rule 6 (instruction_line -> if_else .)
    PRINT           reduce using rule 6 (instruction_line -> if_else .)
    CONTINUE        reduce using rule 6 (instruction_line -> if_else .)
    BREAK           reduce using rule 6 (instruction_line -> if_else .)
    RETURN          reduce using rule 6 (instruction_line -> if_else .)
    ID              reduce using rule 6 (instruction_line -> if_else .)
    $end            reduce using rule 6 (instruction_line -> if_else .)
    }               reduce using rule 6 (instruction_line -> if_else .)
    ELSE            reduce using rule 6 (instruction_line -> if_else .)


state 6

    (7) instruction_line -> while_loop .

    IF              reduce using rule 7 (instruction_line -> while_loop .)
    WHILE           reduce using rule 7 (instruction_line -> while_loop .)
    FOR             reduce using rule 7 (instruction_line -> while_loop .)
    {               reduce using rule 7 (instruction_line -> while_loop .)
    PRINT           reduce using rule 7 (instruction_line -> while_loop .)
    CONTINUE        reduce using rule 7 (instruction_line -> while_loop .)
    BREAK           reduce using rule 7 (instruction_line -> while_loop .)
    RETURN          reduce using rule 7 (instruction_line -> while_loop .)
    ID              reduce using rule 7 (instruction_line -> while_loop .)
    $end            reduce using rule 7 (instruction_line -> while_loop .)
    }               reduce using rule 7 (instruction_line -> while_loop .)
    ELSE            reduce using rule 7 (instruction_line -> while_loop .)


state 7

    (8) instruction_line -> for_loop .

    IF              reduce using rule 8 (instruction_line -> for_loop .)
    WHILE           reduce using rule 8 (instruction_line -> for_loop .)
    FOR             reduce using rule 8 (instruction_line -> for_loop .)
    {               reduce using rule 8 (instruction_line -> for_loop .)
    PRINT           reduce using rule 8 (instruction_line -> for_loop .)
    CONTINUE        reduce using rule 8 (instruction_line -> for_loop .)
    BREAK           reduce using rule 8 (instruction_line -> for_loop .)
    RETURN          reduce using rule 8 (instruction_line -> for_loop .)
    ID              reduce using rule 8 (instruction_line -> for_loop .)
    $end            reduce using rule 8 (instruction_line -> for_loop .)
    }               reduce using rule 8 (instruction_line -> for_loop .)
    ELSE            reduce using rule 8 (instruction_line -> for_loop .)


state 8

    (9) instruction_line -> code_block .

    IF              reduce using rule 9 (instruction_line -> code_block .)
    WHILE           reduce using rule 9 (instruction_line -> code_block .)
    FOR             reduce using rule 9 (instruction_line -> code_block .)
    {               reduce using rule 9 (instruction_line -> code_block .)
    PRINT           reduce using rule 9 (instruction_line -> code_block .)
    CONTINUE        reduce using rule 9 (instruction_line -> code_block .)
    BREAK           reduce using rule 9 (instruction_line -> code_block .)
    RETURN          reduce using rule 9 (instruction_line -> code_block .)
    ID              reduce using rule 9 (instruction_line -> code_block .)
    $end            reduce using rule 9 (instruction_line -> code_block .)
    }               reduce using rule 9 (instruction_line -> code_block .)
    ELSE            reduce using rule 9 (instruction_line -> code_block .)


state 9

    (10) instruction_line -> instruction . ;

    ;               shift and go to state 26


state 10

    (11) if_else -> IF . condition instruction_line
    (12) if_else -> IF . condition instruction_line ELSE instruction_line
    (16) condition -> . ( bool_expression )

    (               shift and go to state 28

    condition                      shift and go to state 27

state 11

    (13) while_loop -> WHILE . condition instruction_line
    (16) condition -> . ( bool_expression )

    (               shift and go to state 28

    condition                      shift and go to state 29

state 12

    (14) for_loop -> FOR . identifier = range instruction_line
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID

    ID              shift and go to state 24

    identifier                     shift and go to state 30

state 13

    (30) assignment -> identifier . assignment_op expression
    (35) assignment_op -> . =
    (36) assignment_op -> . ADDASSIGN
    (37) assignment_op -> . SUBASSIGN
    (38) assignment_op -> . MULASSIGN
    (39) assignment_op -> . DIVASSIGN

    =               shift and go to state 32
    ADDASSIGN       shift and go to state 33
    SUBASSIGN       shift and go to state 34
    MULASSIGN       shift and go to state 35
    DIVASSIGN       shift and go to state 36

    assignment_op                  shift and go to state 31

state 14

    (15) code_block -> { . program }
    (1) program -> . instruction_lines
    (2) program -> . empty
    (4) instruction_lines -> . instruction_lines instruction_line
    (5) instruction_lines -> . instruction_line
    (3) empty -> .
    (6) instruction_line -> . if_else
    (7) instruction_line -> . while_loop
    (8) instruction_line -> . for_loop
    (9) instruction_line -> . code_block
    (10) instruction_line -> . instruction ;
    (11) if_else -> . IF condition instruction_line
    (12) if_else -> . IF condition instruction_line ELSE instruction_line
    (13) while_loop -> . WHILE condition instruction_line
    (14) for_loop -> . FOR identifier = range instruction_line
    (15) code_block -> . { program }
    (25) instruction -> . assignment
    (26) instruction -> . printing
    (27) instruction -> . continue_statement
    (28) instruction -> . break_statement
    (29) instruction -> . returning
    (30) assignment -> . identifier assignment_op expression
    (31) printing -> . PRINT array_line
    (32) continue_statement -> . CONTINUE
    (33) break_statement -> . BREAK
    (34) returning -> . RETURN expression
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID

    }               reduce using rule 3 (empty -> .)
    IF              shift and go to state 10
    WHILE           shift and go to state 11
    FOR             shift and go to state 12
    {               shift and go to state 14
    PRINT           shift and go to state 20
    CONTINUE        shift and go to state 21
    BREAK           shift and go to state 22
    RETURN          shift and go to state 23
    ID              shift and go to state 24

    program                        shift and go to state 37
    instruction_lines              shift and go to state 2
    empty                          shift and go to state 3
    instruction_line               shift and go to state 4
    if_else                        shift and go to state 5
    while_loop                     shift and go to state 6
    for_loop                       shift and go to state 7
    code_block                     shift and go to state 8
    instruction                    shift and go to state 9
    identifier                     shift and go to state 13
    assignment                     shift and go to state 15
    printing                       shift and go to state 16
    continue_statement             shift and go to state 17
    break_statement                shift and go to state 18
    returning                      shift and go to state 19

state 15

    (25) instruction -> assignment .

    ;               reduce using rule 25 (instruction -> assignment .)


state 16

    (26) instruction -> printing .

    ;               reduce using rule 26 (instruction -> printing .)


state 17

    (27) instruction -> continue_statement .

    ;               reduce using rule 27 (instruction -> continue_statement .)


state 18

    (28) instruction -> break_statement .

    ;               reduce using rule 28 (instruction -> break_statement .)


state 19

    (29) instruction -> returning .

    ;               reduce using rule 29 (instruction -> returning .)


state 20

    (31) printing -> PRINT . array_line
    (50) array_line -> . array_line , expression
    (51) array_line -> . expression
    (40) expression -> . expression_binary
    (41) expression -> . array
    (42) expression -> . array_special
    (43) expression -> . transposition
    (44) expression -> . negation
    (45) expression -> . expression_group
    (46) expression -> . elementary
    (59) expression_binary -> . normal_binary_expression
    (60) expression_binary -> . dot_binary_expression
    (47) array -> . [ array_lines ]
    (52) array_special -> . ZEROS array_special_specifier
    (53) array_special -> . ONES array_special_specifier
    (54) array_special -> . EYE array_special_specifier
    (56) transposition -> . identifier '
    (57) transposition -> . array '
    (58) negation -> . MINUS expression
    (77) expression_group -> . ( expression )
    (78) elementary -> . id_or_number
    (79) elementary -> . text
    (61) normal_binary_expression -> . add_expression
    (62) normal_binary_expression -> . sub_expression
    (63) normal_binary_expression -> . mul_expression
    (64) normal_binary_expression -> . div_expression
    (65) dot_binary_expression -> . dot_add_expression
    (66) dot_binary_expression -> . dot_sub_expression
    (67) dot_binary_expression -> . dot_mul_expression
    (68) dot_binary_expression -> . dot_div_expression
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID
    (81) id_or_number -> . identifier
    (82) id_or_number -> . number
    (80) text -> . STRING
    (69) add_expression -> . expression PLUS expression
    (70) sub_expression -> . expression MINUS expression
    (71) mul_expression -> . expression * expression
    (72) div_expression -> . expression / expression
    (73) dot_add_expression -> . expression DOTADD expression
    (74) dot_sub_expression -> . expression DOTSUB expression
    (75) dot_mul_expression -> . expression DOTMUL expression
    (76) dot_div_expression -> . expression DOTDIV expression
    (85) number -> . integer
    (86) number -> . real
    (87) integer -> . INTNUM
    (88) real -> . REALNUM

    [               shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51
    EYE             shift and go to state 52
    MINUS           shift and go to state 54
    (               shift and go to state 55
    ID              shift and go to state 24
    STRING          shift and go to state 67
    INTNUM          shift and go to state 70
    REALNUM         shift and go to state 71

    array_line                     shift and go to state 38
    expression                     shift and go to state 39
    expression_binary              shift and go to state 40
    array                          shift and go to state 41
    array_special                  shift and go to state 42
    transposition                  shift and go to state 43
    negation                       shift and go to state 44
    expression_group               shift and go to state 45
    elementary                     shift and go to state 46
    normal_binary_expression       shift and go to state 47
    dot_binary_expression          shift and go to state 48
    identifier                     shift and go to state 53
    id_or_number                   shift and go to state 56
    text                           shift and go to state 57
    add_expression                 shift and go to state 58
    sub_expression                 shift and go to state 59
    mul_expression                 shift and go to state 60
    div_expression                 shift and go to state 61
    dot_add_expression             shift and go to state 62
    dot_sub_expression             shift and go to state 63
    dot_mul_expression             shift and go to state 64
    dot_div_expression             shift and go to state 65
    number                         shift and go to state 66
    integer                        shift and go to state 68
    real                           shift and go to state 69

state 21

    (32) continue_statement -> CONTINUE .

    ;               reduce using rule 32 (continue_statement -> CONTINUE .)


state 22

    (33) break_statement -> BREAK .

    ;               reduce using rule 33 (break_statement -> BREAK .)


state 23

    (34) returning -> RETURN . expression
    (40) expression -> . expression_binary
    (41) expression -> . array
    (42) expression -> . array_special
    (43) expression -> . transposition
    (44) expression -> . negation
    (45) expression -> . expression_group
    (46) expression -> . elementary
    (59) expression_binary -> . normal_binary_expression
    (60) expression_binary -> . dot_binary_expression
    (47) array -> . [ array_lines ]
    (52) array_special -> . ZEROS array_special_specifier
    (53) array_special -> . ONES array_special_specifier
    (54) array_special -> . EYE array_special_specifier
    (56) transposition -> . identifier '
    (57) transposition -> . array '
    (58) negation -> . MINUS expression
    (77) expression_group -> . ( expression )
    (78) elementary -> . id_or_number
    (79) elementary -> . text
    (61) normal_binary_expression -> . add_expression
    (62) normal_binary_expression -> . sub_expression
    (63) normal_binary_expression -> . mul_expression
    (64) normal_binary_expression -> . div_expression
    (65) dot_binary_expression -> . dot_add_expression
    (66) dot_binary_expression -> . dot_sub_expression
    (67) dot_binary_expression -> . dot_mul_expression
    (68) dot_binary_expression -> . dot_div_expression
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID
    (81) id_or_number -> . identifier
    (82) id_or_number -> . number
    (80) text -> . STRING
    (69) add_expression -> . expression PLUS expression
    (70) sub_expression -> . expression MINUS expression
    (71) mul_expression -> . expression * expression
    (72) div_expression -> . expression / expression
    (73) dot_add_expression -> . expression DOTADD expression
    (74) dot_sub_expression -> . expression DOTSUB expression
    (75) dot_mul_expression -> . expression DOTMUL expression
    (76) dot_div_expression -> . expression DOTDIV expression
    (85) number -> . integer
    (86) number -> . real
    (87) integer -> . INTNUM
    (88) real -> . REALNUM

    [               shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51
    EYE             shift and go to state 52
    MINUS           shift and go to state 54
    (               shift and go to state 55
    ID              shift and go to state 24
    STRING          shift and go to state 67
    INTNUM          shift and go to state 70
    REALNUM         shift and go to state 71

    expression                     shift and go to state 72
    expression_binary              shift and go to state 40
    array                          shift and go to state 41
    array_special                  shift and go to state 42
    transposition                  shift and go to state 43
    negation                       shift and go to state 44
    expression_group               shift and go to state 45
    elementary                     shift and go to state 46
    normal_binary_expression       shift and go to state 47
    dot_binary_expression          shift and go to state 48
    identifier                     shift and go to state 53
    id_or_number                   shift and go to state 56
    text                           shift and go to state 57
    add_expression                 shift and go to state 58
    sub_expression                 shift and go to state 59
    mul_expression                 shift and go to state 60
    div_expression                 shift and go to state 61
    dot_add_expression             shift and go to state 62
    dot_sub_expression             shift and go to state 63
    dot_mul_expression             shift and go to state 64
    dot_div_expression             shift and go to state 65
    number                         shift and go to state 66
    integer                        shift and go to state 68
    real                           shift and go to state 69

state 24

    (83) identifier -> ID . [ array_line ]
    (84) identifier -> ID .

    [               shift and go to state 73
    =               reduce using rule 84 (identifier -> ID .)
    ADDASSIGN       reduce using rule 84 (identifier -> ID .)
    SUBASSIGN       reduce using rule 84 (identifier -> ID .)
    MULASSIGN       reduce using rule 84 (identifier -> ID .)
    DIVASSIGN       reduce using rule 84 (identifier -> ID .)
    '               reduce using rule 84 (identifier -> ID .)
    PLUS            reduce using rule 84 (identifier -> ID .)
    MINUS           reduce using rule 84 (identifier -> ID .)
    *               reduce using rule 84 (identifier -> ID .)
    /               reduce using rule 84 (identifier -> ID .)
    DOTADD          reduce using rule 84 (identifier -> ID .)
    DOTSUB          reduce using rule 84 (identifier -> ID .)
    DOTMUL          reduce using rule 84 (identifier -> ID .)
    DOTDIV          reduce using rule 84 (identifier -> ID .)
    ,               reduce using rule 84 (identifier -> ID .)
    ;               reduce using rule 84 (identifier -> ID .)
    <               reduce using rule 84 (identifier -> ID .)
    >               reduce using rule 84 (identifier -> ID .)
    EQ              reduce using rule 84 (identifier -> ID .)
    NEQ             reduce using rule 84 (identifier -> ID .)
    GEQ             reduce using rule 84 (identifier -> ID .)
    LEQ             reduce using rule 84 (identifier -> ID .)
    ]               reduce using rule 84 (identifier -> ID .)
    )               reduce using rule 84 (identifier -> ID .)
    :               reduce using rule 84 (identifier -> ID .)
    IF              reduce using rule 84 (identifier -> ID .)
    WHILE           reduce using rule 84 (identifier -> ID .)
    FOR             reduce using rule 84 (identifier -> ID .)
    {               reduce using rule 84 (identifier -> ID .)
    PRINT           reduce using rule 84 (identifier -> ID .)
    CONTINUE        reduce using rule 84 (identifier -> ID .)
    BREAK           reduce using rule 84 (identifier -> ID .)
    RETURN          reduce using rule 84 (identifier -> ID .)
    ID              reduce using rule 84 (identifier -> ID .)


state 25

    (4) instruction_lines -> instruction_lines instruction_line .

    IF              reduce using rule 4 (instruction_lines -> instruction_lines instruction_line .)
    WHILE           reduce using rule 4 (instruction_lines -> instruction_lines instruction_line .)
    FOR             reduce using rule 4 (instruction_lines -> instruction_lines instruction_line .)
    {               reduce using rule 4 (instruction_lines -> instruction_lines instruction_line .)
    PRINT           reduce using rule 4 (instruction_lines -> instruction_lines instruction_line .)
    CONTINUE        reduce using rule 4 (instruction_lines -> instruction_lines instruction_line .)
    BREAK           reduce using rule 4 (instruction_lines -> instruction_lines instruction_line .)
    RETURN          reduce using rule 4 (instruction_lines -> instruction_lines instruction_line .)
    ID              reduce using rule 4 (instruction_lines -> instruction_lines instruction_line .)
    $end            reduce using rule 4 (instruction_lines -> instruction_lines instruction_line .)
    }               reduce using rule 4 (instruction_lines -> instruction_lines instruction_line .)


state 26

    (10) instruction_line -> instruction ; .

    IF              reduce using rule 10 (instruction_line -> instruction ; .)
    WHILE           reduce using rule 10 (instruction_line -> instruction ; .)
    FOR             reduce using rule 10 (instruction_line -> instruction ; .)
    {               reduce using rule 10 (instruction_line -> instruction ; .)
    PRINT           reduce using rule 10 (instruction_line -> instruction ; .)
    CONTINUE        reduce using rule 10 (instruction_line -> instruction ; .)
    BREAK           reduce using rule 10 (instruction_line -> instruction ; .)
    RETURN          reduce using rule 10 (instruction_line -> instruction ; .)
    ID              reduce using rule 10 (instruction_line -> instruction ; .)
    $end            reduce using rule 10 (instruction_line -> instruction ; .)
    }               reduce using rule 10 (instruction_line -> instruction ; .)
    ELSE            reduce using rule 10 (instruction_line -> instruction ; .)


state 27

    (11) if_else -> IF condition . instruction_line
    (12) if_else -> IF condition . instruction_line ELSE instruction_line
    (6) instruction_line -> . if_else
    (7) instruction_line -> . while_loop
    (8) instruction_line -> . for_loop
    (9) instruction_line -> . code_block
    (10) instruction_line -> . instruction ;
    (11) if_else -> . IF condition instruction_line
    (12) if_else -> . IF condition instruction_line ELSE instruction_line
    (13) while_loop -> . WHILE condition instruction_line
    (14) for_loop -> . FOR identifier = range instruction_line
    (15) code_block -> . { program }
    (25) instruction -> . assignment
    (26) instruction -> . printing
    (27) instruction -> . continue_statement
    (28) instruction -> . break_statement
    (29) instruction -> . returning
    (30) assignment -> . identifier assignment_op expression
    (31) printing -> . PRINT array_line
    (32) continue_statement -> . CONTINUE
    (33) break_statement -> . BREAK
    (34) returning -> . RETURN expression
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID

    IF              shift and go to state 10
    WHILE           shift and go to state 11
    FOR             shift and go to state 12
    {               shift and go to state 14
    PRINT           shift and go to state 20
    CONTINUE        shift and go to state 21
    BREAK           shift and go to state 22
    RETURN          shift and go to state 23
    ID              shift and go to state 24

    instruction_line               shift and go to state 74
    if_else                        shift and go to state 5
    while_loop                     shift and go to state 6
    for_loop                       shift and go to state 7
    code_block                     shift and go to state 8
    instruction                    shift and go to state 9
    identifier                     shift and go to state 13
    assignment                     shift and go to state 15
    printing                       shift and go to state 16
    continue_statement             shift and go to state 17
    break_statement                shift and go to state 18
    returning                      shift and go to state 19

state 28

    (16) condition -> ( . bool_expression )
    (17) bool_expression -> . expression comparison_op expression
    (40) expression -> . expression_binary
    (41) expression -> . array
    (42) expression -> . array_special
    (43) expression -> . transposition
    (44) expression -> . negation
    (45) expression -> . expression_group
    (46) expression -> . elementary
    (59) expression_binary -> . normal_binary_expression
    (60) expression_binary -> . dot_binary_expression
    (47) array -> . [ array_lines ]
    (52) array_special -> . ZEROS array_special_specifier
    (53) array_special -> . ONES array_special_specifier
    (54) array_special -> . EYE array_special_specifier
    (56) transposition -> . identifier '
    (57) transposition -> . array '
    (58) negation -> . MINUS expression
    (77) expression_group -> . ( expression )
    (78) elementary -> . id_or_number
    (79) elementary -> . text
    (61) normal_binary_expression -> . add_expression
    (62) normal_binary_expression -> . sub_expression
    (63) normal_binary_expression -> . mul_expression
    (64) normal_binary_expression -> . div_expression
    (65) dot_binary_expression -> . dot_add_expression
    (66) dot_binary_expression -> . dot_sub_expression
    (67) dot_binary_expression -> . dot_mul_expression
    (68) dot_binary_expression -> . dot_div_expression
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID
    (81) id_or_number -> . identifier
    (82) id_or_number -> . number
    (80) text -> . STRING
    (69) add_expression -> . expression PLUS expression
    (70) sub_expression -> . expression MINUS expression
    (71) mul_expression -> . expression * expression
    (72) div_expression -> . expression / expression
    (73) dot_add_expression -> . expression DOTADD expression
    (74) dot_sub_expression -> . expression DOTSUB expression
    (75) dot_mul_expression -> . expression DOTMUL expression
    (76) dot_div_expression -> . expression DOTDIV expression
    (85) number -> . integer
    (86) number -> . real
    (87) integer -> . INTNUM
    (88) real -> . REALNUM

    [               shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51
    EYE             shift and go to state 52
    MINUS           shift and go to state 54
    (               shift and go to state 55
    ID              shift and go to state 24
    STRING          shift and go to state 67
    INTNUM          shift and go to state 70
    REALNUM         shift and go to state 71

    bool_expression                shift and go to state 75
    expression                     shift and go to state 76
    expression_binary              shift and go to state 40
    array                          shift and go to state 41
    array_special                  shift and go to state 42
    transposition                  shift and go to state 43
    negation                       shift and go to state 44
    expression_group               shift and go to state 45
    elementary                     shift and go to state 46
    normal_binary_expression       shift and go to state 47
    dot_binary_expression          shift and go to state 48
    identifier                     shift and go to state 53
    id_or_number                   shift and go to state 56
    text                           shift and go to state 57
    add_expression                 shift and go to state 58
    sub_expression                 shift and go to state 59
    mul_expression                 shift and go to state 60
    div_expression                 shift and go to state 61
    dot_add_expression             shift and go to state 62
    dot_sub_expression             shift and go to state 63
    dot_mul_expression             shift and go to state 64
    dot_div_expression             shift and go to state 65
    number                         shift and go to state 66
    integer                        shift and go to state 68
    real                           shift and go to state 69

state 29

    (13) while_loop -> WHILE condition . instruction_line
    (6) instruction_line -> . if_else
    (7) instruction_line -> . while_loop
    (8) instruction_line -> . for_loop
    (9) instruction_line -> . code_block
    (10) instruction_line -> . instruction ;
    (11) if_else -> . IF condition instruction_line
    (12) if_else -> . IF condition instruction_line ELSE instruction_line
    (13) while_loop -> . WHILE condition instruction_line
    (14) for_loop -> . FOR identifier = range instruction_line
    (15) code_block -> . { program }
    (25) instruction -> . assignment
    (26) instruction -> . printing
    (27) instruction -> . continue_statement
    (28) instruction -> . break_statement
    (29) instruction -> . returning
    (30) assignment -> . identifier assignment_op expression
    (31) printing -> . PRINT array_line
    (32) continue_statement -> . CONTINUE
    (33) break_statement -> . BREAK
    (34) returning -> . RETURN expression
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID

    IF              shift and go to state 10
    WHILE           shift and go to state 11
    FOR             shift and go to state 12
    {               shift and go to state 14
    PRINT           shift and go to state 20
    CONTINUE        shift and go to state 21
    BREAK           shift and go to state 22
    RETURN          shift and go to state 23
    ID              shift and go to state 24

    instruction_line               shift and go to state 77
    if_else                        shift and go to state 5
    while_loop                     shift and go to state 6
    for_loop                       shift and go to state 7
    code_block                     shift and go to state 8
    instruction                    shift and go to state 9
    identifier                     shift and go to state 13
    assignment                     shift and go to state 15
    printing                       shift and go to state 16
    continue_statement             shift and go to state 17
    break_statement                shift and go to state 18
    returning                      shift and go to state 19

state 30

    (14) for_loop -> FOR identifier . = range instruction_line

    =               shift and go to state 78


state 31

    (30) assignment -> identifier assignment_op . expression
    (40) expression -> . expression_binary
    (41) expression -> . array
    (42) expression -> . array_special
    (43) expression -> . transposition
    (44) expression -> . negation
    (45) expression -> . expression_group
    (46) expression -> . elementary
    (59) expression_binary -> . normal_binary_expression
    (60) expression_binary -> . dot_binary_expression
    (47) array -> . [ array_lines ]
    (52) array_special -> . ZEROS array_special_specifier
    (53) array_special -> . ONES array_special_specifier
    (54) array_special -> . EYE array_special_specifier
    (56) transposition -> . identifier '
    (57) transposition -> . array '
    (58) negation -> . MINUS expression
    (77) expression_group -> . ( expression )
    (78) elementary -> . id_or_number
    (79) elementary -> . text
    (61) normal_binary_expression -> . add_expression
    (62) normal_binary_expression -> . sub_expression
    (63) normal_binary_expression -> . mul_expression
    (64) normal_binary_expression -> . div_expression
    (65) dot_binary_expression -> . dot_add_expression
    (66) dot_binary_expression -> . dot_sub_expression
    (67) dot_binary_expression -> . dot_mul_expression
    (68) dot_binary_expression -> . dot_div_expression
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID
    (81) id_or_number -> . identifier
    (82) id_or_number -> . number
    (80) text -> . STRING
    (69) add_expression -> . expression PLUS expression
    (70) sub_expression -> . expression MINUS expression
    (71) mul_expression -> . expression * expression
    (72) div_expression -> . expression / expression
    (73) dot_add_expression -> . expression DOTADD expression
    (74) dot_sub_expression -> . expression DOTSUB expression
    (75) dot_mul_expression -> . expression DOTMUL expression
    (76) dot_div_expression -> . expression DOTDIV expression
    (85) number -> . integer
    (86) number -> . real
    (87) integer -> . INTNUM
    (88) real -> . REALNUM

    [               shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51
    EYE             shift and go to state 52
    MINUS           shift and go to state 54
    (               shift and go to state 55
    ID              shift and go to state 24
    STRING          shift and go to state 67
    INTNUM          shift and go to state 70
    REALNUM         shift and go to state 71

    identifier                     shift and go to state 53
    expression                     shift and go to state 79
    expression_binary              shift and go to state 40
    array                          shift and go to state 41
    array_special                  shift and go to state 42
    transposition                  shift and go to state 43
    negation                       shift and go to state 44
    expression_group               shift and go to state 45
    elementary                     shift and go to state 46
    normal_binary_expression       shift and go to state 47
    dot_binary_expression          shift and go to state 48
    id_or_number                   shift and go to state 56
    text                           shift and go to state 57
    add_expression                 shift and go to state 58
    sub_expression                 shift and go to state 59
    mul_expression                 shift and go to state 60
    div_expression                 shift and go to state 61
    dot_add_expression             shift and go to state 62
    dot_sub_expression             shift and go to state 63
    dot_mul_expression             shift and go to state 64
    dot_div_expression             shift and go to state 65
    number                         shift and go to state 66
    integer                        shift and go to state 68
    real                           shift and go to state 69

state 32

    (35) assignment_op -> = .

    [               reduce using rule 35 (assignment_op -> = .)
    ZEROS           reduce using rule 35 (assignment_op -> = .)
    ONES            reduce using rule 35 (assignment_op -> = .)
    EYE             reduce using rule 35 (assignment_op -> = .)
    MINUS           reduce using rule 35 (assignment_op -> = .)
    (               reduce using rule 35 (assignment_op -> = .)
    ID              reduce using rule 35 (assignment_op -> = .)
    STRING          reduce using rule 35 (assignment_op -> = .)
    INTNUM          reduce using rule 35 (assignment_op -> = .)
    REALNUM         reduce using rule 35 (assignment_op -> = .)


state 33

    (36) assignment_op -> ADDASSIGN .

    [               reduce using rule 36 (assignment_op -> ADDASSIGN .)
    ZEROS           reduce using rule 36 (assignment_op -> ADDASSIGN .)
    ONES            reduce using rule 36 (assignment_op -> ADDASSIGN .)
    EYE             reduce using rule 36 (assignment_op -> ADDASSIGN .)
    MINUS           reduce using rule 36 (assignment_op -> ADDASSIGN .)
    (               reduce using rule 36 (assignment_op -> ADDASSIGN .)
    ID              reduce using rule 36 (assignment_op -> ADDASSIGN .)
    STRING          reduce using rule 36 (assignment_op -> ADDASSIGN .)
    INTNUM          reduce using rule 36 (assignment_op -> ADDASSIGN .)
    REALNUM         reduce using rule 36 (assignment_op -> ADDASSIGN .)


state 34

    (37) assignment_op -> SUBASSIGN .

    [               reduce using rule 37 (assignment_op -> SUBASSIGN .)
    ZEROS           reduce using rule 37 (assignment_op -> SUBASSIGN .)
    ONES            reduce using rule 37 (assignment_op -> SUBASSIGN .)
    EYE             reduce using rule 37 (assignment_op -> SUBASSIGN .)
    MINUS           reduce using rule 37 (assignment_op -> SUBASSIGN .)
    (               reduce using rule 37 (assignment_op -> SUBASSIGN .)
    ID              reduce using rule 37 (assignment_op -> SUBASSIGN .)
    STRING          reduce using rule 37 (assignment_op -> SUBASSIGN .)
    INTNUM          reduce using rule 37 (assignment_op -> SUBASSIGN .)
    REALNUM         reduce using rule 37 (assignment_op -> SUBASSIGN .)


state 35

    (38) assignment_op -> MULASSIGN .

    [               reduce using rule 38 (assignment_op -> MULASSIGN .)
    ZEROS           reduce using rule 38 (assignment_op -> MULASSIGN .)
    ONES            reduce using rule 38 (assignment_op -> MULASSIGN .)
    EYE             reduce using rule 38 (assignment_op -> MULASSIGN .)
    MINUS           reduce using rule 38 (assignment_op -> MULASSIGN .)
    (               reduce using rule 38 (assignment_op -> MULASSIGN .)
    ID              reduce using rule 38 (assignment_op -> MULASSIGN .)
    STRING          reduce using rule 38 (assignment_op -> MULASSIGN .)
    INTNUM          reduce using rule 38 (assignment_op -> MULASSIGN .)
    REALNUM         reduce using rule 38 (assignment_op -> MULASSIGN .)


state 36

    (39) assignment_op -> DIVASSIGN .

    [               reduce using rule 39 (assignment_op -> DIVASSIGN .)
    ZEROS           reduce using rule 39 (assignment_op -> DIVASSIGN .)
    ONES            reduce using rule 39 (assignment_op -> DIVASSIGN .)
    EYE             reduce using rule 39 (assignment_op -> DIVASSIGN .)
    MINUS           reduce using rule 39 (assignment_op -> DIVASSIGN .)
    (               reduce using rule 39 (assignment_op -> DIVASSIGN .)
    ID              reduce using rule 39 (assignment_op -> DIVASSIGN .)
    STRING          reduce using rule 39 (assignment_op -> DIVASSIGN .)
    INTNUM          reduce using rule 39 (assignment_op -> DIVASSIGN .)
    REALNUM         reduce using rule 39 (assignment_op -> DIVASSIGN .)


state 37

    (15) code_block -> { program . }

    }               shift and go to state 80


state 38

    (31) printing -> PRINT array_line .
    (50) array_line -> array_line . , expression

    ;               reduce using rule 31 (printing -> PRINT array_line .)
    ,               shift and go to state 81


state 39

    (51) array_line -> expression .
    (69) add_expression -> expression . PLUS expression
    (70) sub_expression -> expression . MINUS expression
    (71) mul_expression -> expression . * expression
    (72) div_expression -> expression . / expression
    (73) dot_add_expression -> expression . DOTADD expression
    (74) dot_sub_expression -> expression . DOTSUB expression
    (75) dot_mul_expression -> expression . DOTMUL expression
    (76) dot_div_expression -> expression . DOTDIV expression

    ,               reduce using rule 51 (array_line -> expression .)
    ;               reduce using rule 51 (array_line -> expression .)
    ]               reduce using rule 51 (array_line -> expression .)
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    *               shift and go to state 84
    /               shift and go to state 85
    DOTADD          shift and go to state 86
    DOTSUB          shift and go to state 87
    DOTMUL          shift and go to state 88
    DOTDIV          shift and go to state 89


state 40

    (40) expression -> expression_binary .

    PLUS            reduce using rule 40 (expression -> expression_binary .)
    MINUS           reduce using rule 40 (expression -> expression_binary .)
    *               reduce using rule 40 (expression -> expression_binary .)
    /               reduce using rule 40 (expression -> expression_binary .)
    DOTADD          reduce using rule 40 (expression -> expression_binary .)
    DOTSUB          reduce using rule 40 (expression -> expression_binary .)
    DOTMUL          reduce using rule 40 (expression -> expression_binary .)
    DOTDIV          reduce using rule 40 (expression -> expression_binary .)
    ,               reduce using rule 40 (expression -> expression_binary .)
    ;               reduce using rule 40 (expression -> expression_binary .)
    <               reduce using rule 40 (expression -> expression_binary .)
    >               reduce using rule 40 (expression -> expression_binary .)
    EQ              reduce using rule 40 (expression -> expression_binary .)
    NEQ             reduce using rule 40 (expression -> expression_binary .)
    GEQ             reduce using rule 40 (expression -> expression_binary .)
    LEQ             reduce using rule 40 (expression -> expression_binary .)
    ]               reduce using rule 40 (expression -> expression_binary .)
    )               reduce using rule 40 (expression -> expression_binary .)


state 41

    (41) expression -> array .
    (57) transposition -> array . '

    PLUS            reduce using rule 41 (expression -> array .)
    MINUS           reduce using rule 41 (expression -> array .)
    *               reduce using rule 41 (expression -> array .)
    /               reduce using rule 41 (expression -> array .)
    DOTADD          reduce using rule 41 (expression -> array .)
    DOTSUB          reduce using rule 41 (expression -> array .)
    DOTMUL          reduce using rule 41 (expression -> array .)
    DOTDIV          reduce using rule 41 (expression -> array .)
    ,               reduce using rule 41 (expression -> array .)
    ;               reduce using rule 41 (expression -> array .)
    <               reduce using rule 41 (expression -> array .)
    >               reduce using rule 41 (expression -> array .)
    EQ              reduce using rule 41 (expression -> array .)
    NEQ             reduce using rule 41 (expression -> array .)
    GEQ             reduce using rule 41 (expression -> array .)
    LEQ             reduce using rule 41 (expression -> array .)
    ]               reduce using rule 41 (expression -> array .)
    )               reduce using rule 41 (expression -> array .)
    '               shift and go to state 90


state 42

    (42) expression -> array_special .

    PLUS            reduce using rule 42 (expression -> array_special .)
    MINUS           reduce using rule 42 (expression -> array_special .)
    *               reduce using rule 42 (expression -> array_special .)
    /               reduce using rule 42 (expression -> array_special .)
    DOTADD          reduce using rule 42 (expression -> array_special .)
    DOTSUB          reduce using rule 42 (expression -> array_special .)
    DOTMUL          reduce using rule 42 (expression -> array_special .)
    DOTDIV          reduce using rule 42 (expression -> array_special .)
    ,               reduce using rule 42 (expression -> array_special .)
    ;               reduce using rule 42 (expression -> array_special .)
    <               reduce using rule 42 (expression -> array_special .)
    >               reduce using rule 42 (expression -> array_special .)
    EQ              reduce using rule 42 (expression -> array_special .)
    NEQ             reduce using rule 42 (expression -> array_special .)
    GEQ             reduce using rule 42 (expression -> array_special .)
    LEQ             reduce using rule 42 (expression -> array_special .)
    ]               reduce using rule 42 (expression -> array_special .)
    )               reduce using rule 42 (expression -> array_special .)


state 43

    (43) expression -> transposition .

    PLUS            reduce using rule 43 (expression -> transposition .)
    MINUS           reduce using rule 43 (expression -> transposition .)
    *               reduce using rule 43 (expression -> transposition .)
    /               reduce using rule 43 (expression -> transposition .)
    DOTADD          reduce using rule 43 (expression -> transposition .)
    DOTSUB          reduce using rule 43 (expression -> transposition .)
    DOTMUL          reduce using rule 43 (expression -> transposition .)
    DOTDIV          reduce using rule 43 (expression -> transposition .)
    ,               reduce using rule 43 (expression -> transposition .)
    ;               reduce using rule 43 (expression -> transposition .)
    <               reduce using rule 43 (expression -> transposition .)
    >               reduce using rule 43 (expression -> transposition .)
    EQ              reduce using rule 43 (expression -> transposition .)
    NEQ             reduce using rule 43 (expression -> transposition .)
    GEQ             reduce using rule 43 (expression -> transposition .)
    LEQ             reduce using rule 43 (expression -> transposition .)
    ]               reduce using rule 43 (expression -> transposition .)
    )               reduce using rule 43 (expression -> transposition .)


state 44

    (44) expression -> negation .

    PLUS            reduce using rule 44 (expression -> negation .)
    MINUS           reduce using rule 44 (expression -> negation .)
    *               reduce using rule 44 (expression -> negation .)
    /               reduce using rule 44 (expression -> negation .)
    DOTADD          reduce using rule 44 (expression -> negation .)
    DOTSUB          reduce using rule 44 (expression -> negation .)
    DOTMUL          reduce using rule 44 (expression -> negation .)
    DOTDIV          reduce using rule 44 (expression -> negation .)
    ,               reduce using rule 44 (expression -> negation .)
    ;               reduce using rule 44 (expression -> negation .)
    <               reduce using rule 44 (expression -> negation .)
    >               reduce using rule 44 (expression -> negation .)
    EQ              reduce using rule 44 (expression -> negation .)
    NEQ             reduce using rule 44 (expression -> negation .)
    GEQ             reduce using rule 44 (expression -> negation .)
    LEQ             reduce using rule 44 (expression -> negation .)
    ]               reduce using rule 44 (expression -> negation .)
    )               reduce using rule 44 (expression -> negation .)


state 45

    (45) expression -> expression_group .

    PLUS            reduce using rule 45 (expression -> expression_group .)
    MINUS           reduce using rule 45 (expression -> expression_group .)
    *               reduce using rule 45 (expression -> expression_group .)
    /               reduce using rule 45 (expression -> expression_group .)
    DOTADD          reduce using rule 45 (expression -> expression_group .)
    DOTSUB          reduce using rule 45 (expression -> expression_group .)
    DOTMUL          reduce using rule 45 (expression -> expression_group .)
    DOTDIV          reduce using rule 45 (expression -> expression_group .)
    ,               reduce using rule 45 (expression -> expression_group .)
    ;               reduce using rule 45 (expression -> expression_group .)
    <               reduce using rule 45 (expression -> expression_group .)
    >               reduce using rule 45 (expression -> expression_group .)
    EQ              reduce using rule 45 (expression -> expression_group .)
    NEQ             reduce using rule 45 (expression -> expression_group .)
    GEQ             reduce using rule 45 (expression -> expression_group .)
    LEQ             reduce using rule 45 (expression -> expression_group .)
    ]               reduce using rule 45 (expression -> expression_group .)
    )               reduce using rule 45 (expression -> expression_group .)


state 46

    (46) expression -> elementary .

    PLUS            reduce using rule 46 (expression -> elementary .)
    MINUS           reduce using rule 46 (expression -> elementary .)
    *               reduce using rule 46 (expression -> elementary .)
    /               reduce using rule 46 (expression -> elementary .)
    DOTADD          reduce using rule 46 (expression -> elementary .)
    DOTSUB          reduce using rule 46 (expression -> elementary .)
    DOTMUL          reduce using rule 46 (expression -> elementary .)
    DOTDIV          reduce using rule 46 (expression -> elementary .)
    ,               reduce using rule 46 (expression -> elementary .)
    ;               reduce using rule 46 (expression -> elementary .)
    <               reduce using rule 46 (expression -> elementary .)
    >               reduce using rule 46 (expression -> elementary .)
    EQ              reduce using rule 46 (expression -> elementary .)
    NEQ             reduce using rule 46 (expression -> elementary .)
    GEQ             reduce using rule 46 (expression -> elementary .)
    LEQ             reduce using rule 46 (expression -> elementary .)
    ]               reduce using rule 46 (expression -> elementary .)
    )               reduce using rule 46 (expression -> elementary .)


state 47

    (59) expression_binary -> normal_binary_expression .

    PLUS            reduce using rule 59 (expression_binary -> normal_binary_expression .)
    MINUS           reduce using rule 59 (expression_binary -> normal_binary_expression .)
    *               reduce using rule 59 (expression_binary -> normal_binary_expression .)
    /               reduce using rule 59 (expression_binary -> normal_binary_expression .)
    DOTADD          reduce using rule 59 (expression_binary -> normal_binary_expression .)
    DOTSUB          reduce using rule 59 (expression_binary -> normal_binary_expression .)
    DOTMUL          reduce using rule 59 (expression_binary -> normal_binary_expression .)
    DOTDIV          reduce using rule 59 (expression_binary -> normal_binary_expression .)
    ,               reduce using rule 59 (expression_binary -> normal_binary_expression .)
    ;               reduce using rule 59 (expression_binary -> normal_binary_expression .)
    <               reduce using rule 59 (expression_binary -> normal_binary_expression .)
    >               reduce using rule 59 (expression_binary -> normal_binary_expression .)
    EQ              reduce using rule 59 (expression_binary -> normal_binary_expression .)
    NEQ             reduce using rule 59 (expression_binary -> normal_binary_expression .)
    GEQ             reduce using rule 59 (expression_binary -> normal_binary_expression .)
    LEQ             reduce using rule 59 (expression_binary -> normal_binary_expression .)
    ]               reduce using rule 59 (expression_binary -> normal_binary_expression .)
    )               reduce using rule 59 (expression_binary -> normal_binary_expression .)


state 48

    (60) expression_binary -> dot_binary_expression .

    PLUS            reduce using rule 60 (expression_binary -> dot_binary_expression .)
    MINUS           reduce using rule 60 (expression_binary -> dot_binary_expression .)
    *               reduce using rule 60 (expression_binary -> dot_binary_expression .)
    /               reduce using rule 60 (expression_binary -> dot_binary_expression .)
    DOTADD          reduce using rule 60 (expression_binary -> dot_binary_expression .)
    DOTSUB          reduce using rule 60 (expression_binary -> dot_binary_expression .)
    DOTMUL          reduce using rule 60 (expression_binary -> dot_binary_expression .)
    DOTDIV          reduce using rule 60 (expression_binary -> dot_binary_expression .)
    ,               reduce using rule 60 (expression_binary -> dot_binary_expression .)
    ;               reduce using rule 60 (expression_binary -> dot_binary_expression .)
    <               reduce using rule 60 (expression_binary -> dot_binary_expression .)
    >               reduce using rule 60 (expression_binary -> dot_binary_expression .)
    EQ              reduce using rule 60 (expression_binary -> dot_binary_expression .)
    NEQ             reduce using rule 60 (expression_binary -> dot_binary_expression .)
    GEQ             reduce using rule 60 (expression_binary -> dot_binary_expression .)
    LEQ             reduce using rule 60 (expression_binary -> dot_binary_expression .)
    ]               reduce using rule 60 (expression_binary -> dot_binary_expression .)
    )               reduce using rule 60 (expression_binary -> dot_binary_expression .)


state 49

    (47) array -> [ . array_lines ]
    (48) array_lines -> . array_lines ; array_line
    (49) array_lines -> . array_line
    (50) array_line -> . array_line , expression
    (51) array_line -> . expression
    (40) expression -> . expression_binary
    (41) expression -> . array
    (42) expression -> . array_special
    (43) expression -> . transposition
    (44) expression -> . negation
    (45) expression -> . expression_group
    (46) expression -> . elementary
    (59) expression_binary -> . normal_binary_expression
    (60) expression_binary -> . dot_binary_expression
    (47) array -> . [ array_lines ]
    (52) array_special -> . ZEROS array_special_specifier
    (53) array_special -> . ONES array_special_specifier
    (54) array_special -> . EYE array_special_specifier
    (56) transposition -> . identifier '
    (57) transposition -> . array '
    (58) negation -> . MINUS expression
    (77) expression_group -> . ( expression )
    (78) elementary -> . id_or_number
    (79) elementary -> . text
    (61) normal_binary_expression -> . add_expression
    (62) normal_binary_expression -> . sub_expression
    (63) normal_binary_expression -> . mul_expression
    (64) normal_binary_expression -> . div_expression
    (65) dot_binary_expression -> . dot_add_expression
    (66) dot_binary_expression -> . dot_sub_expression
    (67) dot_binary_expression -> . dot_mul_expression
    (68) dot_binary_expression -> . dot_div_expression
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID
    (81) id_or_number -> . identifier
    (82) id_or_number -> . number
    (80) text -> . STRING
    (69) add_expression -> . expression PLUS expression
    (70) sub_expression -> . expression MINUS expression
    (71) mul_expression -> . expression * expression
    (72) div_expression -> . expression / expression
    (73) dot_add_expression -> . expression DOTADD expression
    (74) dot_sub_expression -> . expression DOTSUB expression
    (75) dot_mul_expression -> . expression DOTMUL expression
    (76) dot_div_expression -> . expression DOTDIV expression
    (85) number -> . integer
    (86) number -> . real
    (87) integer -> . INTNUM
    (88) real -> . REALNUM

    [               shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51
    EYE             shift and go to state 52
    MINUS           shift and go to state 54
    (               shift and go to state 55
    ID              shift and go to state 24
    STRING          shift and go to state 67
    INTNUM          shift and go to state 70
    REALNUM         shift and go to state 71

    array_lines                    shift and go to state 91
    array_line                     shift and go to state 92
    expression                     shift and go to state 39
    expression_binary              shift and go to state 40
    array                          shift and go to state 41
    array_special                  shift and go to state 42
    transposition                  shift and go to state 43
    negation                       shift and go to state 44
    expression_group               shift and go to state 45
    elementary                     shift and go to state 46
    normal_binary_expression       shift and go to state 47
    dot_binary_expression          shift and go to state 48
    identifier                     shift and go to state 53
    id_or_number                   shift and go to state 56
    text                           shift and go to state 57
    add_expression                 shift and go to state 58
    sub_expression                 shift and go to state 59
    mul_expression                 shift and go to state 60
    div_expression                 shift and go to state 61
    dot_add_expression             shift and go to state 62
    dot_sub_expression             shift and go to state 63
    dot_mul_expression             shift and go to state 64
    dot_div_expression             shift and go to state 65
    number                         shift and go to state 66
    integer                        shift and go to state 68
    real                           shift and go to state 69

state 50

    (52) array_special -> ZEROS . array_special_specifier
    (55) array_special_specifier -> . ( id_or_number )

    (               shift and go to state 94

    array_special_specifier        shift and go to state 93

state 51

    (53) array_special -> ONES . array_special_specifier
    (55) array_special_specifier -> . ( id_or_number )

    (               shift and go to state 94

    array_special_specifier        shift and go to state 95

state 52

    (54) array_special -> EYE . array_special_specifier
    (55) array_special_specifier -> . ( id_or_number )

    (               shift and go to state 94

    array_special_specifier        shift and go to state 96

state 53

    (56) transposition -> identifier . '
    (81) id_or_number -> identifier .

    '               shift and go to state 97
    PLUS            reduce using rule 81 (id_or_number -> identifier .)
    MINUS           reduce using rule 81 (id_or_number -> identifier .)
    *               reduce using rule 81 (id_or_number -> identifier .)
    /               reduce using rule 81 (id_or_number -> identifier .)
    DOTADD          reduce using rule 81 (id_or_number -> identifier .)
    DOTSUB          reduce using rule 81 (id_or_number -> identifier .)
    DOTMUL          reduce using rule 81 (id_or_number -> identifier .)
    DOTDIV          reduce using rule 81 (id_or_number -> identifier .)
    ,               reduce using rule 81 (id_or_number -> identifier .)
    ;               reduce using rule 81 (id_or_number -> identifier .)
    <               reduce using rule 81 (id_or_number -> identifier .)
    >               reduce using rule 81 (id_or_number -> identifier .)
    EQ              reduce using rule 81 (id_or_number -> identifier .)
    NEQ             reduce using rule 81 (id_or_number -> identifier .)
    GEQ             reduce using rule 81 (id_or_number -> identifier .)
    LEQ             reduce using rule 81 (id_or_number -> identifier .)
    ]               reduce using rule 81 (id_or_number -> identifier .)
    )               reduce using rule 81 (id_or_number -> identifier .)


state 54

    (58) negation -> MINUS . expression
    (40) expression -> . expression_binary
    (41) expression -> . array
    (42) expression -> . array_special
    (43) expression -> . transposition
    (44) expression -> . negation
    (45) expression -> . expression_group
    (46) expression -> . elementary
    (59) expression_binary -> . normal_binary_expression
    (60) expression_binary -> . dot_binary_expression
    (47) array -> . [ array_lines ]
    (52) array_special -> . ZEROS array_special_specifier
    (53) array_special -> . ONES array_special_specifier
    (54) array_special -> . EYE array_special_specifier
    (56) transposition -> . identifier '
    (57) transposition -> . array '
    (58) negation -> . MINUS expression
    (77) expression_group -> . ( expression )
    (78) elementary -> . id_or_number
    (79) elementary -> . text
    (61) normal_binary_expression -> . add_expression
    (62) normal_binary_expression -> . sub_expression
    (63) normal_binary_expression -> . mul_expression
    (64) normal_binary_expression -> . div_expression
    (65) dot_binary_expression -> . dot_add_expression
    (66) dot_binary_expression -> . dot_sub_expression
    (67) dot_binary_expression -> . dot_mul_expression
    (68) dot_binary_expression -> . dot_div_expression
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID
    (81) id_or_number -> . identifier
    (82) id_or_number -> . number
    (80) text -> . STRING
    (69) add_expression -> . expression PLUS expression
    (70) sub_expression -> . expression MINUS expression
    (71) mul_expression -> . expression * expression
    (72) div_expression -> . expression / expression
    (73) dot_add_expression -> . expression DOTADD expression
    (74) dot_sub_expression -> . expression DOTSUB expression
    (75) dot_mul_expression -> . expression DOTMUL expression
    (76) dot_div_expression -> . expression DOTDIV expression
    (85) number -> . integer
    (86) number -> . real
    (87) integer -> . INTNUM
    (88) real -> . REALNUM

    [               shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51
    EYE             shift and go to state 52
    MINUS           shift and go to state 54
    (               shift and go to state 55
    ID              shift and go to state 24
    STRING          shift and go to state 67
    INTNUM          shift and go to state 70
    REALNUM         shift and go to state 71

    expression                     shift and go to state 98
    expression_binary              shift and go to state 40
    array                          shift and go to state 41
    array_special                  shift and go to state 42
    transposition                  shift and go to state 43
    negation                       shift and go to state 44
    expression_group               shift and go to state 45
    elementary                     shift and go to state 46
    normal_binary_expression       shift and go to state 47
    dot_binary_expression          shift and go to state 48
    identifier                     shift and go to state 53
    id_or_number                   shift and go to state 56
    text                           shift and go to state 57
    add_expression                 shift and go to state 58
    sub_expression                 shift and go to state 59
    mul_expression                 shift and go to state 60
    div_expression                 shift and go to state 61
    dot_add_expression             shift and go to state 62
    dot_sub_expression             shift and go to state 63
    dot_mul_expression             shift and go to state 64
    dot_div_expression             shift and go to state 65
    number                         shift and go to state 66
    integer                        shift and go to state 68
    real                           shift and go to state 69

state 55

    (77) expression_group -> ( . expression )
    (40) expression -> . expression_binary
    (41) expression -> . array
    (42) expression -> . array_special
    (43) expression -> . transposition
    (44) expression -> . negation
    (45) expression -> . expression_group
    (46) expression -> . elementary
    (59) expression_binary -> . normal_binary_expression
    (60) expression_binary -> . dot_binary_expression
    (47) array -> . [ array_lines ]
    (52) array_special -> . ZEROS array_special_specifier
    (53) array_special -> . ONES array_special_specifier
    (54) array_special -> . EYE array_special_specifier
    (56) transposition -> . identifier '
    (57) transposition -> . array '
    (58) negation -> . MINUS expression
    (77) expression_group -> . ( expression )
    (78) elementary -> . id_or_number
    (79) elementary -> . text
    (61) normal_binary_expression -> . add_expression
    (62) normal_binary_expression -> . sub_expression
    (63) normal_binary_expression -> . mul_expression
    (64) normal_binary_expression -> . div_expression
    (65) dot_binary_expression -> . dot_add_expression
    (66) dot_binary_expression -> . dot_sub_expression
    (67) dot_binary_expression -> . dot_mul_expression
    (68) dot_binary_expression -> . dot_div_expression
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID
    (81) id_or_number -> . identifier
    (82) id_or_number -> . number
    (80) text -> . STRING
    (69) add_expression -> . expression PLUS expression
    (70) sub_expression -> . expression MINUS expression
    (71) mul_expression -> . expression * expression
    (72) div_expression -> . expression / expression
    (73) dot_add_expression -> . expression DOTADD expression
    (74) dot_sub_expression -> . expression DOTSUB expression
    (75) dot_mul_expression -> . expression DOTMUL expression
    (76) dot_div_expression -> . expression DOTDIV expression
    (85) number -> . integer
    (86) number -> . real
    (87) integer -> . INTNUM
    (88) real -> . REALNUM

    [               shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51
    EYE             shift and go to state 52
    MINUS           shift and go to state 54
    (               shift and go to state 55
    ID              shift and go to state 24
    STRING          shift and go to state 67
    INTNUM          shift and go to state 70
    REALNUM         shift and go to state 71

    expression                     shift and go to state 99
    expression_binary              shift and go to state 40
    array                          shift and go to state 41
    array_special                  shift and go to state 42
    transposition                  shift and go to state 43
    negation                       shift and go to state 44
    expression_group               shift and go to state 45
    elementary                     shift and go to state 46
    normal_binary_expression       shift and go to state 47
    dot_binary_expression          shift and go to state 48
    identifier                     shift and go to state 53
    id_or_number                   shift and go to state 56
    text                           shift and go to state 57
    add_expression                 shift and go to state 58
    sub_expression                 shift and go to state 59
    mul_expression                 shift and go to state 60
    div_expression                 shift and go to state 61
    dot_add_expression             shift and go to state 62
    dot_sub_expression             shift and go to state 63
    dot_mul_expression             shift and go to state 64
    dot_div_expression             shift and go to state 65
    number                         shift and go to state 66
    integer                        shift and go to state 68
    real                           shift and go to state 69

state 56

    (78) elementary -> id_or_number .

    PLUS            reduce using rule 78 (elementary -> id_or_number .)
    MINUS           reduce using rule 78 (elementary -> id_or_number .)
    *               reduce using rule 78 (elementary -> id_or_number .)
    /               reduce using rule 78 (elementary -> id_or_number .)
    DOTADD          reduce using rule 78 (elementary -> id_or_number .)
    DOTSUB          reduce using rule 78 (elementary -> id_or_number .)
    DOTMUL          reduce using rule 78 (elementary -> id_or_number .)
    DOTDIV          reduce using rule 78 (elementary -> id_or_number .)
    ,               reduce using rule 78 (elementary -> id_or_number .)
    ;               reduce using rule 78 (elementary -> id_or_number .)
    <               reduce using rule 78 (elementary -> id_or_number .)
    >               reduce using rule 78 (elementary -> id_or_number .)
    EQ              reduce using rule 78 (elementary -> id_or_number .)
    NEQ             reduce using rule 78 (elementary -> id_or_number .)
    GEQ             reduce using rule 78 (elementary -> id_or_number .)
    LEQ             reduce using rule 78 (elementary -> id_or_number .)
    ]               reduce using rule 78 (elementary -> id_or_number .)
    )               reduce using rule 78 (elementary -> id_or_number .)


state 57

    (79) elementary -> text .

    PLUS            reduce using rule 79 (elementary -> text .)
    MINUS           reduce using rule 79 (elementary -> text .)
    *               reduce using rule 79 (elementary -> text .)
    /               reduce using rule 79 (elementary -> text .)
    DOTADD          reduce using rule 79 (elementary -> text .)
    DOTSUB          reduce using rule 79 (elementary -> text .)
    DOTMUL          reduce using rule 79 (elementary -> text .)
    DOTDIV          reduce using rule 79 (elementary -> text .)
    ,               reduce using rule 79 (elementary -> text .)
    ;               reduce using rule 79 (elementary -> text .)
    <               reduce using rule 79 (elementary -> text .)
    >               reduce using rule 79 (elementary -> text .)
    EQ              reduce using rule 79 (elementary -> text .)
    NEQ             reduce using rule 79 (elementary -> text .)
    GEQ             reduce using rule 79 (elementary -> text .)
    LEQ             reduce using rule 79 (elementary -> text .)
    ]               reduce using rule 79 (elementary -> text .)
    )               reduce using rule 79 (elementary -> text .)


state 58

    (61) normal_binary_expression -> add_expression .

    PLUS            reduce using rule 61 (normal_binary_expression -> add_expression .)
    MINUS           reduce using rule 61 (normal_binary_expression -> add_expression .)
    *               reduce using rule 61 (normal_binary_expression -> add_expression .)
    /               reduce using rule 61 (normal_binary_expression -> add_expression .)
    DOTADD          reduce using rule 61 (normal_binary_expression -> add_expression .)
    DOTSUB          reduce using rule 61 (normal_binary_expression -> add_expression .)
    DOTMUL          reduce using rule 61 (normal_binary_expression -> add_expression .)
    DOTDIV          reduce using rule 61 (normal_binary_expression -> add_expression .)
    ,               reduce using rule 61 (normal_binary_expression -> add_expression .)
    ;               reduce using rule 61 (normal_binary_expression -> add_expression .)
    <               reduce using rule 61 (normal_binary_expression -> add_expression .)
    >               reduce using rule 61 (normal_binary_expression -> add_expression .)
    EQ              reduce using rule 61 (normal_binary_expression -> add_expression .)
    NEQ             reduce using rule 61 (normal_binary_expression -> add_expression .)
    GEQ             reduce using rule 61 (normal_binary_expression -> add_expression .)
    LEQ             reduce using rule 61 (normal_binary_expression -> add_expression .)
    ]               reduce using rule 61 (normal_binary_expression -> add_expression .)
    )               reduce using rule 61 (normal_binary_expression -> add_expression .)


state 59

    (62) normal_binary_expression -> sub_expression .

    PLUS            reduce using rule 62 (normal_binary_expression -> sub_expression .)
    MINUS           reduce using rule 62 (normal_binary_expression -> sub_expression .)
    *               reduce using rule 62 (normal_binary_expression -> sub_expression .)
    /               reduce using rule 62 (normal_binary_expression -> sub_expression .)
    DOTADD          reduce using rule 62 (normal_binary_expression -> sub_expression .)
    DOTSUB          reduce using rule 62 (normal_binary_expression -> sub_expression .)
    DOTMUL          reduce using rule 62 (normal_binary_expression -> sub_expression .)
    DOTDIV          reduce using rule 62 (normal_binary_expression -> sub_expression .)
    ,               reduce using rule 62 (normal_binary_expression -> sub_expression .)
    ;               reduce using rule 62 (normal_binary_expression -> sub_expression .)
    <               reduce using rule 62 (normal_binary_expression -> sub_expression .)
    >               reduce using rule 62 (normal_binary_expression -> sub_expression .)
    EQ              reduce using rule 62 (normal_binary_expression -> sub_expression .)
    NEQ             reduce using rule 62 (normal_binary_expression -> sub_expression .)
    GEQ             reduce using rule 62 (normal_binary_expression -> sub_expression .)
    LEQ             reduce using rule 62 (normal_binary_expression -> sub_expression .)
    ]               reduce using rule 62 (normal_binary_expression -> sub_expression .)
    )               reduce using rule 62 (normal_binary_expression -> sub_expression .)


state 60

    (63) normal_binary_expression -> mul_expression .

    PLUS            reduce using rule 63 (normal_binary_expression -> mul_expression .)
    MINUS           reduce using rule 63 (normal_binary_expression -> mul_expression .)
    *               reduce using rule 63 (normal_binary_expression -> mul_expression .)
    /               reduce using rule 63 (normal_binary_expression -> mul_expression .)
    DOTADD          reduce using rule 63 (normal_binary_expression -> mul_expression .)
    DOTSUB          reduce using rule 63 (normal_binary_expression -> mul_expression .)
    DOTMUL          reduce using rule 63 (normal_binary_expression -> mul_expression .)
    DOTDIV          reduce using rule 63 (normal_binary_expression -> mul_expression .)
    ,               reduce using rule 63 (normal_binary_expression -> mul_expression .)
    ;               reduce using rule 63 (normal_binary_expression -> mul_expression .)
    <               reduce using rule 63 (normal_binary_expression -> mul_expression .)
    >               reduce using rule 63 (normal_binary_expression -> mul_expression .)
    EQ              reduce using rule 63 (normal_binary_expression -> mul_expression .)
    NEQ             reduce using rule 63 (normal_binary_expression -> mul_expression .)
    GEQ             reduce using rule 63 (normal_binary_expression -> mul_expression .)
    LEQ             reduce using rule 63 (normal_binary_expression -> mul_expression .)
    ]               reduce using rule 63 (normal_binary_expression -> mul_expression .)
    )               reduce using rule 63 (normal_binary_expression -> mul_expression .)


state 61

    (64) normal_binary_expression -> div_expression .

    PLUS            reduce using rule 64 (normal_binary_expression -> div_expression .)
    MINUS           reduce using rule 64 (normal_binary_expression -> div_expression .)
    *               reduce using rule 64 (normal_binary_expression -> div_expression .)
    /               reduce using rule 64 (normal_binary_expression -> div_expression .)
    DOTADD          reduce using rule 64 (normal_binary_expression -> div_expression .)
    DOTSUB          reduce using rule 64 (normal_binary_expression -> div_expression .)
    DOTMUL          reduce using rule 64 (normal_binary_expression -> div_expression .)
    DOTDIV          reduce using rule 64 (normal_binary_expression -> div_expression .)
    ,               reduce using rule 64 (normal_binary_expression -> div_expression .)
    ;               reduce using rule 64 (normal_binary_expression -> div_expression .)
    <               reduce using rule 64 (normal_binary_expression -> div_expression .)
    >               reduce using rule 64 (normal_binary_expression -> div_expression .)
    EQ              reduce using rule 64 (normal_binary_expression -> div_expression .)
    NEQ             reduce using rule 64 (normal_binary_expression -> div_expression .)
    GEQ             reduce using rule 64 (normal_binary_expression -> div_expression .)
    LEQ             reduce using rule 64 (normal_binary_expression -> div_expression .)
    ]               reduce using rule 64 (normal_binary_expression -> div_expression .)
    )               reduce using rule 64 (normal_binary_expression -> div_expression .)


state 62

    (65) dot_binary_expression -> dot_add_expression .

    PLUS            reduce using rule 65 (dot_binary_expression -> dot_add_expression .)
    MINUS           reduce using rule 65 (dot_binary_expression -> dot_add_expression .)
    *               reduce using rule 65 (dot_binary_expression -> dot_add_expression .)
    /               reduce using rule 65 (dot_binary_expression -> dot_add_expression .)
    DOTADD          reduce using rule 65 (dot_binary_expression -> dot_add_expression .)
    DOTSUB          reduce using rule 65 (dot_binary_expression -> dot_add_expression .)
    DOTMUL          reduce using rule 65 (dot_binary_expression -> dot_add_expression .)
    DOTDIV          reduce using rule 65 (dot_binary_expression -> dot_add_expression .)
    ,               reduce using rule 65 (dot_binary_expression -> dot_add_expression .)
    ;               reduce using rule 65 (dot_binary_expression -> dot_add_expression .)
    <               reduce using rule 65 (dot_binary_expression -> dot_add_expression .)
    >               reduce using rule 65 (dot_binary_expression -> dot_add_expression .)
    EQ              reduce using rule 65 (dot_binary_expression -> dot_add_expression .)
    NEQ             reduce using rule 65 (dot_binary_expression -> dot_add_expression .)
    GEQ             reduce using rule 65 (dot_binary_expression -> dot_add_expression .)
    LEQ             reduce using rule 65 (dot_binary_expression -> dot_add_expression .)
    ]               reduce using rule 65 (dot_binary_expression -> dot_add_expression .)
    )               reduce using rule 65 (dot_binary_expression -> dot_add_expression .)


state 63

    (66) dot_binary_expression -> dot_sub_expression .

    PLUS            reduce using rule 66 (dot_binary_expression -> dot_sub_expression .)
    MINUS           reduce using rule 66 (dot_binary_expression -> dot_sub_expression .)
    *               reduce using rule 66 (dot_binary_expression -> dot_sub_expression .)
    /               reduce using rule 66 (dot_binary_expression -> dot_sub_expression .)
    DOTADD          reduce using rule 66 (dot_binary_expression -> dot_sub_expression .)
    DOTSUB          reduce using rule 66 (dot_binary_expression -> dot_sub_expression .)
    DOTMUL          reduce using rule 66 (dot_binary_expression -> dot_sub_expression .)
    DOTDIV          reduce using rule 66 (dot_binary_expression -> dot_sub_expression .)
    ,               reduce using rule 66 (dot_binary_expression -> dot_sub_expression .)
    ;               reduce using rule 66 (dot_binary_expression -> dot_sub_expression .)
    <               reduce using rule 66 (dot_binary_expression -> dot_sub_expression .)
    >               reduce using rule 66 (dot_binary_expression -> dot_sub_expression .)
    EQ              reduce using rule 66 (dot_binary_expression -> dot_sub_expression .)
    NEQ             reduce using rule 66 (dot_binary_expression -> dot_sub_expression .)
    GEQ             reduce using rule 66 (dot_binary_expression -> dot_sub_expression .)
    LEQ             reduce using rule 66 (dot_binary_expression -> dot_sub_expression .)
    ]               reduce using rule 66 (dot_binary_expression -> dot_sub_expression .)
    )               reduce using rule 66 (dot_binary_expression -> dot_sub_expression .)


state 64

    (67) dot_binary_expression -> dot_mul_expression .

    PLUS            reduce using rule 67 (dot_binary_expression -> dot_mul_expression .)
    MINUS           reduce using rule 67 (dot_binary_expression -> dot_mul_expression .)
    *               reduce using rule 67 (dot_binary_expression -> dot_mul_expression .)
    /               reduce using rule 67 (dot_binary_expression -> dot_mul_expression .)
    DOTADD          reduce using rule 67 (dot_binary_expression -> dot_mul_expression .)
    DOTSUB          reduce using rule 67 (dot_binary_expression -> dot_mul_expression .)
    DOTMUL          reduce using rule 67 (dot_binary_expression -> dot_mul_expression .)
    DOTDIV          reduce using rule 67 (dot_binary_expression -> dot_mul_expression .)
    ,               reduce using rule 67 (dot_binary_expression -> dot_mul_expression .)
    ;               reduce using rule 67 (dot_binary_expression -> dot_mul_expression .)
    <               reduce using rule 67 (dot_binary_expression -> dot_mul_expression .)
    >               reduce using rule 67 (dot_binary_expression -> dot_mul_expression .)
    EQ              reduce using rule 67 (dot_binary_expression -> dot_mul_expression .)
    NEQ             reduce using rule 67 (dot_binary_expression -> dot_mul_expression .)
    GEQ             reduce using rule 67 (dot_binary_expression -> dot_mul_expression .)
    LEQ             reduce using rule 67 (dot_binary_expression -> dot_mul_expression .)
    ]               reduce using rule 67 (dot_binary_expression -> dot_mul_expression .)
    )               reduce using rule 67 (dot_binary_expression -> dot_mul_expression .)


state 65

    (68) dot_binary_expression -> dot_div_expression .

    PLUS            reduce using rule 68 (dot_binary_expression -> dot_div_expression .)
    MINUS           reduce using rule 68 (dot_binary_expression -> dot_div_expression .)
    *               reduce using rule 68 (dot_binary_expression -> dot_div_expression .)
    /               reduce using rule 68 (dot_binary_expression -> dot_div_expression .)
    DOTADD          reduce using rule 68 (dot_binary_expression -> dot_div_expression .)
    DOTSUB          reduce using rule 68 (dot_binary_expression -> dot_div_expression .)
    DOTMUL          reduce using rule 68 (dot_binary_expression -> dot_div_expression .)
    DOTDIV          reduce using rule 68 (dot_binary_expression -> dot_div_expression .)
    ,               reduce using rule 68 (dot_binary_expression -> dot_div_expression .)
    ;               reduce using rule 68 (dot_binary_expression -> dot_div_expression .)
    <               reduce using rule 68 (dot_binary_expression -> dot_div_expression .)
    >               reduce using rule 68 (dot_binary_expression -> dot_div_expression .)
    EQ              reduce using rule 68 (dot_binary_expression -> dot_div_expression .)
    NEQ             reduce using rule 68 (dot_binary_expression -> dot_div_expression .)
    GEQ             reduce using rule 68 (dot_binary_expression -> dot_div_expression .)
    LEQ             reduce using rule 68 (dot_binary_expression -> dot_div_expression .)
    ]               reduce using rule 68 (dot_binary_expression -> dot_div_expression .)
    )               reduce using rule 68 (dot_binary_expression -> dot_div_expression .)


state 66

    (82) id_or_number -> number .

    PLUS            reduce using rule 82 (id_or_number -> number .)
    MINUS           reduce using rule 82 (id_or_number -> number .)
    *               reduce using rule 82 (id_or_number -> number .)
    /               reduce using rule 82 (id_or_number -> number .)
    DOTADD          reduce using rule 82 (id_or_number -> number .)
    DOTSUB          reduce using rule 82 (id_or_number -> number .)
    DOTMUL          reduce using rule 82 (id_or_number -> number .)
    DOTDIV          reduce using rule 82 (id_or_number -> number .)
    ,               reduce using rule 82 (id_or_number -> number .)
    ;               reduce using rule 82 (id_or_number -> number .)
    <               reduce using rule 82 (id_or_number -> number .)
    >               reduce using rule 82 (id_or_number -> number .)
    EQ              reduce using rule 82 (id_or_number -> number .)
    NEQ             reduce using rule 82 (id_or_number -> number .)
    GEQ             reduce using rule 82 (id_or_number -> number .)
    LEQ             reduce using rule 82 (id_or_number -> number .)
    ]               reduce using rule 82 (id_or_number -> number .)
    )               reduce using rule 82 (id_or_number -> number .)
    :               reduce using rule 82 (id_or_number -> number .)
    IF              reduce using rule 82 (id_or_number -> number .)
    WHILE           reduce using rule 82 (id_or_number -> number .)
    FOR             reduce using rule 82 (id_or_number -> number .)
    {               reduce using rule 82 (id_or_number -> number .)
    PRINT           reduce using rule 82 (id_or_number -> number .)
    CONTINUE        reduce using rule 82 (id_or_number -> number .)
    BREAK           reduce using rule 82 (id_or_number -> number .)
    RETURN          reduce using rule 82 (id_or_number -> number .)
    ID              reduce using rule 82 (id_or_number -> number .)


state 67

    (80) text -> STRING .

    PLUS            reduce using rule 80 (text -> STRING .)
    MINUS           reduce using rule 80 (text -> STRING .)
    *               reduce using rule 80 (text -> STRING .)
    /               reduce using rule 80 (text -> STRING .)
    DOTADD          reduce using rule 80 (text -> STRING .)
    DOTSUB          reduce using rule 80 (text -> STRING .)
    DOTMUL          reduce using rule 80 (text -> STRING .)
    DOTDIV          reduce using rule 80 (text -> STRING .)
    ,               reduce using rule 80 (text -> STRING .)
    ;               reduce using rule 80 (text -> STRING .)
    <               reduce using rule 80 (text -> STRING .)
    >               reduce using rule 80 (text -> STRING .)
    EQ              reduce using rule 80 (text -> STRING .)
    NEQ             reduce using rule 80 (text -> STRING .)
    GEQ             reduce using rule 80 (text -> STRING .)
    LEQ             reduce using rule 80 (text -> STRING .)
    ]               reduce using rule 80 (text -> STRING .)
    )               reduce using rule 80 (text -> STRING .)


state 68

    (85) number -> integer .

    PLUS            reduce using rule 85 (number -> integer .)
    MINUS           reduce using rule 85 (number -> integer .)
    *               reduce using rule 85 (number -> integer .)
    /               reduce using rule 85 (number -> integer .)
    DOTADD          reduce using rule 85 (number -> integer .)
    DOTSUB          reduce using rule 85 (number -> integer .)
    DOTMUL          reduce using rule 85 (number -> integer .)
    DOTDIV          reduce using rule 85 (number -> integer .)
    ,               reduce using rule 85 (number -> integer .)
    ;               reduce using rule 85 (number -> integer .)
    <               reduce using rule 85 (number -> integer .)
    >               reduce using rule 85 (number -> integer .)
    EQ              reduce using rule 85 (number -> integer .)
    NEQ             reduce using rule 85 (number -> integer .)
    GEQ             reduce using rule 85 (number -> integer .)
    LEQ             reduce using rule 85 (number -> integer .)
    ]               reduce using rule 85 (number -> integer .)
    )               reduce using rule 85 (number -> integer .)
    :               reduce using rule 85 (number -> integer .)
    IF              reduce using rule 85 (number -> integer .)
    WHILE           reduce using rule 85 (number -> integer .)
    FOR             reduce using rule 85 (number -> integer .)
    {               reduce using rule 85 (number -> integer .)
    PRINT           reduce using rule 85 (number -> integer .)
    CONTINUE        reduce using rule 85 (number -> integer .)
    BREAK           reduce using rule 85 (number -> integer .)
    RETURN          reduce using rule 85 (number -> integer .)
    ID              reduce using rule 85 (number -> integer .)


state 69

    (86) number -> real .

    PLUS            reduce using rule 86 (number -> real .)
    MINUS           reduce using rule 86 (number -> real .)
    *               reduce using rule 86 (number -> real .)
    /               reduce using rule 86 (number -> real .)
    DOTADD          reduce using rule 86 (number -> real .)
    DOTSUB          reduce using rule 86 (number -> real .)
    DOTMUL          reduce using rule 86 (number -> real .)
    DOTDIV          reduce using rule 86 (number -> real .)
    ,               reduce using rule 86 (number -> real .)
    ;               reduce using rule 86 (number -> real .)
    <               reduce using rule 86 (number -> real .)
    >               reduce using rule 86 (number -> real .)
    EQ              reduce using rule 86 (number -> real .)
    NEQ             reduce using rule 86 (number -> real .)
    GEQ             reduce using rule 86 (number -> real .)
    LEQ             reduce using rule 86 (number -> real .)
    ]               reduce using rule 86 (number -> real .)
    )               reduce using rule 86 (number -> real .)
    :               reduce using rule 86 (number -> real .)
    IF              reduce using rule 86 (number -> real .)
    WHILE           reduce using rule 86 (number -> real .)
    FOR             reduce using rule 86 (number -> real .)
    {               reduce using rule 86 (number -> real .)
    PRINT           reduce using rule 86 (number -> real .)
    CONTINUE        reduce using rule 86 (number -> real .)
    BREAK           reduce using rule 86 (number -> real .)
    RETURN          reduce using rule 86 (number -> real .)
    ID              reduce using rule 86 (number -> real .)


state 70

    (87) integer -> INTNUM .

    PLUS            reduce using rule 87 (integer -> INTNUM .)
    MINUS           reduce using rule 87 (integer -> INTNUM .)
    *               reduce using rule 87 (integer -> INTNUM .)
    /               reduce using rule 87 (integer -> INTNUM .)
    DOTADD          reduce using rule 87 (integer -> INTNUM .)
    DOTSUB          reduce using rule 87 (integer -> INTNUM .)
    DOTMUL          reduce using rule 87 (integer -> INTNUM .)
    DOTDIV          reduce using rule 87 (integer -> INTNUM .)
    ,               reduce using rule 87 (integer -> INTNUM .)
    ;               reduce using rule 87 (integer -> INTNUM .)
    <               reduce using rule 87 (integer -> INTNUM .)
    >               reduce using rule 87 (integer -> INTNUM .)
    EQ              reduce using rule 87 (integer -> INTNUM .)
    NEQ             reduce using rule 87 (integer -> INTNUM .)
    GEQ             reduce using rule 87 (integer -> INTNUM .)
    LEQ             reduce using rule 87 (integer -> INTNUM .)
    ]               reduce using rule 87 (integer -> INTNUM .)
    )               reduce using rule 87 (integer -> INTNUM .)
    :               reduce using rule 87 (integer -> INTNUM .)
    IF              reduce using rule 87 (integer -> INTNUM .)
    WHILE           reduce using rule 87 (integer -> INTNUM .)
    FOR             reduce using rule 87 (integer -> INTNUM .)
    {               reduce using rule 87 (integer -> INTNUM .)
    PRINT           reduce using rule 87 (integer -> INTNUM .)
    CONTINUE        reduce using rule 87 (integer -> INTNUM .)
    BREAK           reduce using rule 87 (integer -> INTNUM .)
    RETURN          reduce using rule 87 (integer -> INTNUM .)
    ID              reduce using rule 87 (integer -> INTNUM .)


state 71

    (88) real -> REALNUM .

    PLUS            reduce using rule 88 (real -> REALNUM .)
    MINUS           reduce using rule 88 (real -> REALNUM .)
    *               reduce using rule 88 (real -> REALNUM .)
    /               reduce using rule 88 (real -> REALNUM .)
    DOTADD          reduce using rule 88 (real -> REALNUM .)
    DOTSUB          reduce using rule 88 (real -> REALNUM .)
    DOTMUL          reduce using rule 88 (real -> REALNUM .)
    DOTDIV          reduce using rule 88 (real -> REALNUM .)
    ,               reduce using rule 88 (real -> REALNUM .)
    ;               reduce using rule 88 (real -> REALNUM .)
    <               reduce using rule 88 (real -> REALNUM .)
    >               reduce using rule 88 (real -> REALNUM .)
    EQ              reduce using rule 88 (real -> REALNUM .)
    NEQ             reduce using rule 88 (real -> REALNUM .)
    GEQ             reduce using rule 88 (real -> REALNUM .)
    LEQ             reduce using rule 88 (real -> REALNUM .)
    ]               reduce using rule 88 (real -> REALNUM .)
    )               reduce using rule 88 (real -> REALNUM .)
    :               reduce using rule 88 (real -> REALNUM .)
    IF              reduce using rule 88 (real -> REALNUM .)
    WHILE           reduce using rule 88 (real -> REALNUM .)
    FOR             reduce using rule 88 (real -> REALNUM .)
    {               reduce using rule 88 (real -> REALNUM .)
    PRINT           reduce using rule 88 (real -> REALNUM .)
    CONTINUE        reduce using rule 88 (real -> REALNUM .)
    BREAK           reduce using rule 88 (real -> REALNUM .)
    RETURN          reduce using rule 88 (real -> REALNUM .)
    ID              reduce using rule 88 (real -> REALNUM .)


state 72

    (34) returning -> RETURN expression .
    (69) add_expression -> expression . PLUS expression
    (70) sub_expression -> expression . MINUS expression
    (71) mul_expression -> expression . * expression
    (72) div_expression -> expression . / expression
    (73) dot_add_expression -> expression . DOTADD expression
    (74) dot_sub_expression -> expression . DOTSUB expression
    (75) dot_mul_expression -> expression . DOTMUL expression
    (76) dot_div_expression -> expression . DOTDIV expression

    ;               reduce using rule 34 (returning -> RETURN expression .)
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    *               shift and go to state 84
    /               shift and go to state 85
    DOTADD          shift and go to state 86
    DOTSUB          shift and go to state 87
    DOTMUL          shift and go to state 88
    DOTDIV          shift and go to state 89


state 73

    (83) identifier -> ID [ . array_line ]
    (50) array_line -> . array_line , expression
    (51) array_line -> . expression
    (40) expression -> . expression_binary
    (41) expression -> . array
    (42) expression -> . array_special
    (43) expression -> . transposition
    (44) expression -> . negation
    (45) expression -> . expression_group
    (46) expression -> . elementary
    (59) expression_binary -> . normal_binary_expression
    (60) expression_binary -> . dot_binary_expression
    (47) array -> . [ array_lines ]
    (52) array_special -> . ZEROS array_special_specifier
    (53) array_special -> . ONES array_special_specifier
    (54) array_special -> . EYE array_special_specifier
    (56) transposition -> . identifier '
    (57) transposition -> . array '
    (58) negation -> . MINUS expression
    (77) expression_group -> . ( expression )
    (78) elementary -> . id_or_number
    (79) elementary -> . text
    (61) normal_binary_expression -> . add_expression
    (62) normal_binary_expression -> . sub_expression
    (63) normal_binary_expression -> . mul_expression
    (64) normal_binary_expression -> . div_expression
    (65) dot_binary_expression -> . dot_add_expression
    (66) dot_binary_expression -> . dot_sub_expression
    (67) dot_binary_expression -> . dot_mul_expression
    (68) dot_binary_expression -> . dot_div_expression
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID
    (81) id_or_number -> . identifier
    (82) id_or_number -> . number
    (80) text -> . STRING
    (69) add_expression -> . expression PLUS expression
    (70) sub_expression -> . expression MINUS expression
    (71) mul_expression -> . expression * expression
    (72) div_expression -> . expression / expression
    (73) dot_add_expression -> . expression DOTADD expression
    (74) dot_sub_expression -> . expression DOTSUB expression
    (75) dot_mul_expression -> . expression DOTMUL expression
    (76) dot_div_expression -> . expression DOTDIV expression
    (85) number -> . integer
    (86) number -> . real
    (87) integer -> . INTNUM
    (88) real -> . REALNUM

    [               shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51
    EYE             shift and go to state 52
    MINUS           shift and go to state 54
    (               shift and go to state 55
    ID              shift and go to state 24
    STRING          shift and go to state 67
    INTNUM          shift and go to state 70
    REALNUM         shift and go to state 71

    array_line                     shift and go to state 100
    expression                     shift and go to state 39
    expression_binary              shift and go to state 40
    array                          shift and go to state 41
    array_special                  shift and go to state 42
    transposition                  shift and go to state 43
    negation                       shift and go to state 44
    expression_group               shift and go to state 45
    elementary                     shift and go to state 46
    normal_binary_expression       shift and go to state 47
    dot_binary_expression          shift and go to state 48
    identifier                     shift and go to state 53
    id_or_number                   shift and go to state 56
    text                           shift and go to state 57
    add_expression                 shift and go to state 58
    sub_expression                 shift and go to state 59
    mul_expression                 shift and go to state 60
    div_expression                 shift and go to state 61
    dot_add_expression             shift and go to state 62
    dot_sub_expression             shift and go to state 63
    dot_mul_expression             shift and go to state 64
    dot_div_expression             shift and go to state 65
    number                         shift and go to state 66
    integer                        shift and go to state 68
    real                           shift and go to state 69

state 74

    (11) if_else -> IF condition instruction_line .
    (12) if_else -> IF condition instruction_line . ELSE instruction_line

    IF              reduce using rule 11 (if_else -> IF condition instruction_line .)
    WHILE           reduce using rule 11 (if_else -> IF condition instruction_line .)
    FOR             reduce using rule 11 (if_else -> IF condition instruction_line .)
    {               reduce using rule 11 (if_else -> IF condition instruction_line .)
    PRINT           reduce using rule 11 (if_else -> IF condition instruction_line .)
    CONTINUE        reduce using rule 11 (if_else -> IF condition instruction_line .)
    BREAK           reduce using rule 11 (if_else -> IF condition instruction_line .)
    RETURN          reduce using rule 11 (if_else -> IF condition instruction_line .)
    ID              reduce using rule 11 (if_else -> IF condition instruction_line .)
    $end            reduce using rule 11 (if_else -> IF condition instruction_line .)
    }               reduce using rule 11 (if_else -> IF condition instruction_line .)
    ELSE            shift and go to state 101

  ! ELSE            [ reduce using rule 11 (if_else -> IF condition instruction_line .) ]


state 75

    (16) condition -> ( bool_expression . )

    )               shift and go to state 102


state 76

    (17) bool_expression -> expression . comparison_op expression
    (69) add_expression -> expression . PLUS expression
    (70) sub_expression -> expression . MINUS expression
    (71) mul_expression -> expression . * expression
    (72) div_expression -> expression . / expression
    (73) dot_add_expression -> expression . DOTADD expression
    (74) dot_sub_expression -> expression . DOTSUB expression
    (75) dot_mul_expression -> expression . DOTMUL expression
    (76) dot_div_expression -> expression . DOTDIV expression
    (18) comparison_op -> . <
    (19) comparison_op -> . >
    (20) comparison_op -> . EQ
    (21) comparison_op -> . NEQ
    (22) comparison_op -> . GEQ
    (23) comparison_op -> . LEQ

    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    *               shift and go to state 84
    /               shift and go to state 85
    DOTADD          shift and go to state 86
    DOTSUB          shift and go to state 87
    DOTMUL          shift and go to state 88
    DOTDIV          shift and go to state 89
    <               shift and go to state 104
    >               shift and go to state 105
    EQ              shift and go to state 106
    NEQ             shift and go to state 107
    GEQ             shift and go to state 108
    LEQ             shift and go to state 109

    comparison_op                  shift and go to state 103

state 77

    (13) while_loop -> WHILE condition instruction_line .

    IF              reduce using rule 13 (while_loop -> WHILE condition instruction_line .)
    WHILE           reduce using rule 13 (while_loop -> WHILE condition instruction_line .)
    FOR             reduce using rule 13 (while_loop -> WHILE condition instruction_line .)
    {               reduce using rule 13 (while_loop -> WHILE condition instruction_line .)
    PRINT           reduce using rule 13 (while_loop -> WHILE condition instruction_line .)
    CONTINUE        reduce using rule 13 (while_loop -> WHILE condition instruction_line .)
    BREAK           reduce using rule 13 (while_loop -> WHILE condition instruction_line .)
    RETURN          reduce using rule 13 (while_loop -> WHILE condition instruction_line .)
    ID              reduce using rule 13 (while_loop -> WHILE condition instruction_line .)
    $end            reduce using rule 13 (while_loop -> WHILE condition instruction_line .)
    }               reduce using rule 13 (while_loop -> WHILE condition instruction_line .)
    ELSE            reduce using rule 13 (while_loop -> WHILE condition instruction_line .)


state 78

    (14) for_loop -> FOR identifier = . range instruction_line
    (24) range -> . id_or_number : id_or_number
    (81) id_or_number -> . identifier
    (82) id_or_number -> . number
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID
    (85) number -> . integer
    (86) number -> . real
    (87) integer -> . INTNUM
    (88) real -> . REALNUM

    ID              shift and go to state 24
    INTNUM          shift and go to state 70
    REALNUM         shift and go to state 71

    identifier                     shift and go to state 110
    range                          shift and go to state 111
    id_or_number                   shift and go to state 112
    number                         shift and go to state 66
    integer                        shift and go to state 68
    real                           shift and go to state 69

state 79

    (30) assignment -> identifier assignment_op expression .
    (69) add_expression -> expression . PLUS expression
    (70) sub_expression -> expression . MINUS expression
    (71) mul_expression -> expression . * expression
    (72) div_expression -> expression . / expression
    (73) dot_add_expression -> expression . DOTADD expression
    (74) dot_sub_expression -> expression . DOTSUB expression
    (75) dot_mul_expression -> expression . DOTMUL expression
    (76) dot_div_expression -> expression . DOTDIV expression

    ;               reduce using rule 30 (assignment -> identifier assignment_op expression .)
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    *               shift and go to state 84
    /               shift and go to state 85
    DOTADD          shift and go to state 86
    DOTSUB          shift and go to state 87
    DOTMUL          shift and go to state 88
    DOTDIV          shift and go to state 89


state 80

    (15) code_block -> { program } .

    IF              reduce using rule 15 (code_block -> { program } .)
    WHILE           reduce using rule 15 (code_block -> { program } .)
    FOR             reduce using rule 15 (code_block -> { program } .)
    {               reduce using rule 15 (code_block -> { program } .)
    PRINT           reduce using rule 15 (code_block -> { program } .)
    CONTINUE        reduce using rule 15 (code_block -> { program } .)
    BREAK           reduce using rule 15 (code_block -> { program } .)
    RETURN          reduce using rule 15 (code_block -> { program } .)
    ID              reduce using rule 15 (code_block -> { program } .)
    $end            reduce using rule 15 (code_block -> { program } .)
    }               reduce using rule 15 (code_block -> { program } .)
    ELSE            reduce using rule 15 (code_block -> { program } .)


state 81

    (50) array_line -> array_line , . expression
    (40) expression -> . expression_binary
    (41) expression -> . array
    (42) expression -> . array_special
    (43) expression -> . transposition
    (44) expression -> . negation
    (45) expression -> . expression_group
    (46) expression -> . elementary
    (59) expression_binary -> . normal_binary_expression
    (60) expression_binary -> . dot_binary_expression
    (47) array -> . [ array_lines ]
    (52) array_special -> . ZEROS array_special_specifier
    (53) array_special -> . ONES array_special_specifier
    (54) array_special -> . EYE array_special_specifier
    (56) transposition -> . identifier '
    (57) transposition -> . array '
    (58) negation -> . MINUS expression
    (77) expression_group -> . ( expression )
    (78) elementary -> . id_or_number
    (79) elementary -> . text
    (61) normal_binary_expression -> . add_expression
    (62) normal_binary_expression -> . sub_expression
    (63) normal_binary_expression -> . mul_expression
    (64) normal_binary_expression -> . div_expression
    (65) dot_binary_expression -> . dot_add_expression
    (66) dot_binary_expression -> . dot_sub_expression
    (67) dot_binary_expression -> . dot_mul_expression
    (68) dot_binary_expression -> . dot_div_expression
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID
    (81) id_or_number -> . identifier
    (82) id_or_number -> . number
    (80) text -> . STRING
    (69) add_expression -> . expression PLUS expression
    (70) sub_expression -> . expression MINUS expression
    (71) mul_expression -> . expression * expression
    (72) div_expression -> . expression / expression
    (73) dot_add_expression -> . expression DOTADD expression
    (74) dot_sub_expression -> . expression DOTSUB expression
    (75) dot_mul_expression -> . expression DOTMUL expression
    (76) dot_div_expression -> . expression DOTDIV expression
    (85) number -> . integer
    (86) number -> . real
    (87) integer -> . INTNUM
    (88) real -> . REALNUM

    [               shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51
    EYE             shift and go to state 52
    MINUS           shift and go to state 54
    (               shift and go to state 55
    ID              shift and go to state 24
    STRING          shift and go to state 67
    INTNUM          shift and go to state 70
    REALNUM         shift and go to state 71

    expression                     shift and go to state 113
    expression_binary              shift and go to state 40
    array                          shift and go to state 41
    array_special                  shift and go to state 42
    transposition                  shift and go to state 43
    negation                       shift and go to state 44
    expression_group               shift and go to state 45
    elementary                     shift and go to state 46
    normal_binary_expression       shift and go to state 47
    dot_binary_expression          shift and go to state 48
    identifier                     shift and go to state 53
    id_or_number                   shift and go to state 56
    text                           shift and go to state 57
    add_expression                 shift and go to state 58
    sub_expression                 shift and go to state 59
    mul_expression                 shift and go to state 60
    div_expression                 shift and go to state 61
    dot_add_expression             shift and go to state 62
    dot_sub_expression             shift and go to state 63
    dot_mul_expression             shift and go to state 64
    dot_div_expression             shift and go to state 65
    number                         shift and go to state 66
    integer                        shift and go to state 68
    real                           shift and go to state 69

state 82

    (69) add_expression -> expression PLUS . expression
    (40) expression -> . expression_binary
    (41) expression -> . array
    (42) expression -> . array_special
    (43) expression -> . transposition
    (44) expression -> . negation
    (45) expression -> . expression_group
    (46) expression -> . elementary
    (59) expression_binary -> . normal_binary_expression
    (60) expression_binary -> . dot_binary_expression
    (47) array -> . [ array_lines ]
    (52) array_special -> . ZEROS array_special_specifier
    (53) array_special -> . ONES array_special_specifier
    (54) array_special -> . EYE array_special_specifier
    (56) transposition -> . identifier '
    (57) transposition -> . array '
    (58) negation -> . MINUS expression
    (77) expression_group -> . ( expression )
    (78) elementary -> . id_or_number
    (79) elementary -> . text
    (61) normal_binary_expression -> . add_expression
    (62) normal_binary_expression -> . sub_expression
    (63) normal_binary_expression -> . mul_expression
    (64) normal_binary_expression -> . div_expression
    (65) dot_binary_expression -> . dot_add_expression
    (66) dot_binary_expression -> . dot_sub_expression
    (67) dot_binary_expression -> . dot_mul_expression
    (68) dot_binary_expression -> . dot_div_expression
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID
    (81) id_or_number -> . identifier
    (82) id_or_number -> . number
    (80) text -> . STRING
    (69) add_expression -> . expression PLUS expression
    (70) sub_expression -> . expression MINUS expression
    (71) mul_expression -> . expression * expression
    (72) div_expression -> . expression / expression
    (73) dot_add_expression -> . expression DOTADD expression
    (74) dot_sub_expression -> . expression DOTSUB expression
    (75) dot_mul_expression -> . expression DOTMUL expression
    (76) dot_div_expression -> . expression DOTDIV expression
    (85) number -> . integer
    (86) number -> . real
    (87) integer -> . INTNUM
    (88) real -> . REALNUM

    [               shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51
    EYE             shift and go to state 52
    MINUS           shift and go to state 54
    (               shift and go to state 55
    ID              shift and go to state 24
    STRING          shift and go to state 67
    INTNUM          shift and go to state 70
    REALNUM         shift and go to state 71

    expression                     shift and go to state 114
    expression_binary              shift and go to state 40
    array                          shift and go to state 41
    array_special                  shift and go to state 42
    transposition                  shift and go to state 43
    negation                       shift and go to state 44
    expression_group               shift and go to state 45
    elementary                     shift and go to state 46
    normal_binary_expression       shift and go to state 47
    dot_binary_expression          shift and go to state 48
    identifier                     shift and go to state 53
    id_or_number                   shift and go to state 56
    text                           shift and go to state 57
    add_expression                 shift and go to state 58
    sub_expression                 shift and go to state 59
    mul_expression                 shift and go to state 60
    div_expression                 shift and go to state 61
    dot_add_expression             shift and go to state 62
    dot_sub_expression             shift and go to state 63
    dot_mul_expression             shift and go to state 64
    dot_div_expression             shift and go to state 65
    number                         shift and go to state 66
    integer                        shift and go to state 68
    real                           shift and go to state 69

state 83

    (70) sub_expression -> expression MINUS . expression
    (40) expression -> . expression_binary
    (41) expression -> . array
    (42) expression -> . array_special
    (43) expression -> . transposition
    (44) expression -> . negation
    (45) expression -> . expression_group
    (46) expression -> . elementary
    (59) expression_binary -> . normal_binary_expression
    (60) expression_binary -> . dot_binary_expression
    (47) array -> . [ array_lines ]
    (52) array_special -> . ZEROS array_special_specifier
    (53) array_special -> . ONES array_special_specifier
    (54) array_special -> . EYE array_special_specifier
    (56) transposition -> . identifier '
    (57) transposition -> . array '
    (58) negation -> . MINUS expression
    (77) expression_group -> . ( expression )
    (78) elementary -> . id_or_number
    (79) elementary -> . text
    (61) normal_binary_expression -> . add_expression
    (62) normal_binary_expression -> . sub_expression
    (63) normal_binary_expression -> . mul_expression
    (64) normal_binary_expression -> . div_expression
    (65) dot_binary_expression -> . dot_add_expression
    (66) dot_binary_expression -> . dot_sub_expression
    (67) dot_binary_expression -> . dot_mul_expression
    (68) dot_binary_expression -> . dot_div_expression
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID
    (81) id_or_number -> . identifier
    (82) id_or_number -> . number
    (80) text -> . STRING
    (69) add_expression -> . expression PLUS expression
    (70) sub_expression -> . expression MINUS expression
    (71) mul_expression -> . expression * expression
    (72) div_expression -> . expression / expression
    (73) dot_add_expression -> . expression DOTADD expression
    (74) dot_sub_expression -> . expression DOTSUB expression
    (75) dot_mul_expression -> . expression DOTMUL expression
    (76) dot_div_expression -> . expression DOTDIV expression
    (85) number -> . integer
    (86) number -> . real
    (87) integer -> . INTNUM
    (88) real -> . REALNUM

    [               shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51
    EYE             shift and go to state 52
    MINUS           shift and go to state 54
    (               shift and go to state 55
    ID              shift and go to state 24
    STRING          shift and go to state 67
    INTNUM          shift and go to state 70
    REALNUM         shift and go to state 71

    expression                     shift and go to state 115
    expression_binary              shift and go to state 40
    array                          shift and go to state 41
    array_special                  shift and go to state 42
    transposition                  shift and go to state 43
    negation                       shift and go to state 44
    expression_group               shift and go to state 45
    elementary                     shift and go to state 46
    normal_binary_expression       shift and go to state 47
    dot_binary_expression          shift and go to state 48
    identifier                     shift and go to state 53
    id_or_number                   shift and go to state 56
    text                           shift and go to state 57
    add_expression                 shift and go to state 58
    sub_expression                 shift and go to state 59
    mul_expression                 shift and go to state 60
    div_expression                 shift and go to state 61
    dot_add_expression             shift and go to state 62
    dot_sub_expression             shift and go to state 63
    dot_mul_expression             shift and go to state 64
    dot_div_expression             shift and go to state 65
    number                         shift and go to state 66
    integer                        shift and go to state 68
    real                           shift and go to state 69

state 84

    (71) mul_expression -> expression * . expression
    (40) expression -> . expression_binary
    (41) expression -> . array
    (42) expression -> . array_special
    (43) expression -> . transposition
    (44) expression -> . negation
    (45) expression -> . expression_group
    (46) expression -> . elementary
    (59) expression_binary -> . normal_binary_expression
    (60) expression_binary -> . dot_binary_expression
    (47) array -> . [ array_lines ]
    (52) array_special -> . ZEROS array_special_specifier
    (53) array_special -> . ONES array_special_specifier
    (54) array_special -> . EYE array_special_specifier
    (56) transposition -> . identifier '
    (57) transposition -> . array '
    (58) negation -> . MINUS expression
    (77) expression_group -> . ( expression )
    (78) elementary -> . id_or_number
    (79) elementary -> . text
    (61) normal_binary_expression -> . add_expression
    (62) normal_binary_expression -> . sub_expression
    (63) normal_binary_expression -> . mul_expression
    (64) normal_binary_expression -> . div_expression
    (65) dot_binary_expression -> . dot_add_expression
    (66) dot_binary_expression -> . dot_sub_expression
    (67) dot_binary_expression -> . dot_mul_expression
    (68) dot_binary_expression -> . dot_div_expression
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID
    (81) id_or_number -> . identifier
    (82) id_or_number -> . number
    (80) text -> . STRING
    (69) add_expression -> . expression PLUS expression
    (70) sub_expression -> . expression MINUS expression
    (71) mul_expression -> . expression * expression
    (72) div_expression -> . expression / expression
    (73) dot_add_expression -> . expression DOTADD expression
    (74) dot_sub_expression -> . expression DOTSUB expression
    (75) dot_mul_expression -> . expression DOTMUL expression
    (76) dot_div_expression -> . expression DOTDIV expression
    (85) number -> . integer
    (86) number -> . real
    (87) integer -> . INTNUM
    (88) real -> . REALNUM

    [               shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51
    EYE             shift and go to state 52
    MINUS           shift and go to state 54
    (               shift and go to state 55
    ID              shift and go to state 24
    STRING          shift and go to state 67
    INTNUM          shift and go to state 70
    REALNUM         shift and go to state 71

    expression                     shift and go to state 116
    expression_binary              shift and go to state 40
    array                          shift and go to state 41
    array_special                  shift and go to state 42
    transposition                  shift and go to state 43
    negation                       shift and go to state 44
    expression_group               shift and go to state 45
    elementary                     shift and go to state 46
    normal_binary_expression       shift and go to state 47
    dot_binary_expression          shift and go to state 48
    identifier                     shift and go to state 53
    id_or_number                   shift and go to state 56
    text                           shift and go to state 57
    add_expression                 shift and go to state 58
    sub_expression                 shift and go to state 59
    mul_expression                 shift and go to state 60
    div_expression                 shift and go to state 61
    dot_add_expression             shift and go to state 62
    dot_sub_expression             shift and go to state 63
    dot_mul_expression             shift and go to state 64
    dot_div_expression             shift and go to state 65
    number                         shift and go to state 66
    integer                        shift and go to state 68
    real                           shift and go to state 69

state 85

    (72) div_expression -> expression / . expression
    (40) expression -> . expression_binary
    (41) expression -> . array
    (42) expression -> . array_special
    (43) expression -> . transposition
    (44) expression -> . negation
    (45) expression -> . expression_group
    (46) expression -> . elementary
    (59) expression_binary -> . normal_binary_expression
    (60) expression_binary -> . dot_binary_expression
    (47) array -> . [ array_lines ]
    (52) array_special -> . ZEROS array_special_specifier
    (53) array_special -> . ONES array_special_specifier
    (54) array_special -> . EYE array_special_specifier
    (56) transposition -> . identifier '
    (57) transposition -> . array '
    (58) negation -> . MINUS expression
    (77) expression_group -> . ( expression )
    (78) elementary -> . id_or_number
    (79) elementary -> . text
    (61) normal_binary_expression -> . add_expression
    (62) normal_binary_expression -> . sub_expression
    (63) normal_binary_expression -> . mul_expression
    (64) normal_binary_expression -> . div_expression
    (65) dot_binary_expression -> . dot_add_expression
    (66) dot_binary_expression -> . dot_sub_expression
    (67) dot_binary_expression -> . dot_mul_expression
    (68) dot_binary_expression -> . dot_div_expression
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID
    (81) id_or_number -> . identifier
    (82) id_or_number -> . number
    (80) text -> . STRING
    (69) add_expression -> . expression PLUS expression
    (70) sub_expression -> . expression MINUS expression
    (71) mul_expression -> . expression * expression
    (72) div_expression -> . expression / expression
    (73) dot_add_expression -> . expression DOTADD expression
    (74) dot_sub_expression -> . expression DOTSUB expression
    (75) dot_mul_expression -> . expression DOTMUL expression
    (76) dot_div_expression -> . expression DOTDIV expression
    (85) number -> . integer
    (86) number -> . real
    (87) integer -> . INTNUM
    (88) real -> . REALNUM

    [               shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51
    EYE             shift and go to state 52
    MINUS           shift and go to state 54
    (               shift and go to state 55
    ID              shift and go to state 24
    STRING          shift and go to state 67
    INTNUM          shift and go to state 70
    REALNUM         shift and go to state 71

    expression                     shift and go to state 117
    expression_binary              shift and go to state 40
    array                          shift and go to state 41
    array_special                  shift and go to state 42
    transposition                  shift and go to state 43
    negation                       shift and go to state 44
    expression_group               shift and go to state 45
    elementary                     shift and go to state 46
    normal_binary_expression       shift and go to state 47
    dot_binary_expression          shift and go to state 48
    identifier                     shift and go to state 53
    id_or_number                   shift and go to state 56
    text                           shift and go to state 57
    add_expression                 shift and go to state 58
    sub_expression                 shift and go to state 59
    mul_expression                 shift and go to state 60
    div_expression                 shift and go to state 61
    dot_add_expression             shift and go to state 62
    dot_sub_expression             shift and go to state 63
    dot_mul_expression             shift and go to state 64
    dot_div_expression             shift and go to state 65
    number                         shift and go to state 66
    integer                        shift and go to state 68
    real                           shift and go to state 69

state 86

    (73) dot_add_expression -> expression DOTADD . expression
    (40) expression -> . expression_binary
    (41) expression -> . array
    (42) expression -> . array_special
    (43) expression -> . transposition
    (44) expression -> . negation
    (45) expression -> . expression_group
    (46) expression -> . elementary
    (59) expression_binary -> . normal_binary_expression
    (60) expression_binary -> . dot_binary_expression
    (47) array -> . [ array_lines ]
    (52) array_special -> . ZEROS array_special_specifier
    (53) array_special -> . ONES array_special_specifier
    (54) array_special -> . EYE array_special_specifier
    (56) transposition -> . identifier '
    (57) transposition -> . array '
    (58) negation -> . MINUS expression
    (77) expression_group -> . ( expression )
    (78) elementary -> . id_or_number
    (79) elementary -> . text
    (61) normal_binary_expression -> . add_expression
    (62) normal_binary_expression -> . sub_expression
    (63) normal_binary_expression -> . mul_expression
    (64) normal_binary_expression -> . div_expression
    (65) dot_binary_expression -> . dot_add_expression
    (66) dot_binary_expression -> . dot_sub_expression
    (67) dot_binary_expression -> . dot_mul_expression
    (68) dot_binary_expression -> . dot_div_expression
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID
    (81) id_or_number -> . identifier
    (82) id_or_number -> . number
    (80) text -> . STRING
    (69) add_expression -> . expression PLUS expression
    (70) sub_expression -> . expression MINUS expression
    (71) mul_expression -> . expression * expression
    (72) div_expression -> . expression / expression
    (73) dot_add_expression -> . expression DOTADD expression
    (74) dot_sub_expression -> . expression DOTSUB expression
    (75) dot_mul_expression -> . expression DOTMUL expression
    (76) dot_div_expression -> . expression DOTDIV expression
    (85) number -> . integer
    (86) number -> . real
    (87) integer -> . INTNUM
    (88) real -> . REALNUM

    [               shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51
    EYE             shift and go to state 52
    MINUS           shift and go to state 54
    (               shift and go to state 55
    ID              shift and go to state 24
    STRING          shift and go to state 67
    INTNUM          shift and go to state 70
    REALNUM         shift and go to state 71

    expression                     shift and go to state 118
    expression_binary              shift and go to state 40
    array                          shift and go to state 41
    array_special                  shift and go to state 42
    transposition                  shift and go to state 43
    negation                       shift and go to state 44
    expression_group               shift and go to state 45
    elementary                     shift and go to state 46
    normal_binary_expression       shift and go to state 47
    dot_binary_expression          shift and go to state 48
    identifier                     shift and go to state 53
    id_or_number                   shift and go to state 56
    text                           shift and go to state 57
    add_expression                 shift and go to state 58
    sub_expression                 shift and go to state 59
    mul_expression                 shift and go to state 60
    div_expression                 shift and go to state 61
    dot_add_expression             shift and go to state 62
    dot_sub_expression             shift and go to state 63
    dot_mul_expression             shift and go to state 64
    dot_div_expression             shift and go to state 65
    number                         shift and go to state 66
    integer                        shift and go to state 68
    real                           shift and go to state 69

state 87

    (74) dot_sub_expression -> expression DOTSUB . expression
    (40) expression -> . expression_binary
    (41) expression -> . array
    (42) expression -> . array_special
    (43) expression -> . transposition
    (44) expression -> . negation
    (45) expression -> . expression_group
    (46) expression -> . elementary
    (59) expression_binary -> . normal_binary_expression
    (60) expression_binary -> . dot_binary_expression
    (47) array -> . [ array_lines ]
    (52) array_special -> . ZEROS array_special_specifier
    (53) array_special -> . ONES array_special_specifier
    (54) array_special -> . EYE array_special_specifier
    (56) transposition -> . identifier '
    (57) transposition -> . array '
    (58) negation -> . MINUS expression
    (77) expression_group -> . ( expression )
    (78) elementary -> . id_or_number
    (79) elementary -> . text
    (61) normal_binary_expression -> . add_expression
    (62) normal_binary_expression -> . sub_expression
    (63) normal_binary_expression -> . mul_expression
    (64) normal_binary_expression -> . div_expression
    (65) dot_binary_expression -> . dot_add_expression
    (66) dot_binary_expression -> . dot_sub_expression
    (67) dot_binary_expression -> . dot_mul_expression
    (68) dot_binary_expression -> . dot_div_expression
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID
    (81) id_or_number -> . identifier
    (82) id_or_number -> . number
    (80) text -> . STRING
    (69) add_expression -> . expression PLUS expression
    (70) sub_expression -> . expression MINUS expression
    (71) mul_expression -> . expression * expression
    (72) div_expression -> . expression / expression
    (73) dot_add_expression -> . expression DOTADD expression
    (74) dot_sub_expression -> . expression DOTSUB expression
    (75) dot_mul_expression -> . expression DOTMUL expression
    (76) dot_div_expression -> . expression DOTDIV expression
    (85) number -> . integer
    (86) number -> . real
    (87) integer -> . INTNUM
    (88) real -> . REALNUM

    [               shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51
    EYE             shift and go to state 52
    MINUS           shift and go to state 54
    (               shift and go to state 55
    ID              shift and go to state 24
    STRING          shift and go to state 67
    INTNUM          shift and go to state 70
    REALNUM         shift and go to state 71

    expression                     shift and go to state 119
    expression_binary              shift and go to state 40
    array                          shift and go to state 41
    array_special                  shift and go to state 42
    transposition                  shift and go to state 43
    negation                       shift and go to state 44
    expression_group               shift and go to state 45
    elementary                     shift and go to state 46
    normal_binary_expression       shift and go to state 47
    dot_binary_expression          shift and go to state 48
    identifier                     shift and go to state 53
    id_or_number                   shift and go to state 56
    text                           shift and go to state 57
    add_expression                 shift and go to state 58
    sub_expression                 shift and go to state 59
    mul_expression                 shift and go to state 60
    div_expression                 shift and go to state 61
    dot_add_expression             shift and go to state 62
    dot_sub_expression             shift and go to state 63
    dot_mul_expression             shift and go to state 64
    dot_div_expression             shift and go to state 65
    number                         shift and go to state 66
    integer                        shift and go to state 68
    real                           shift and go to state 69

state 88

    (75) dot_mul_expression -> expression DOTMUL . expression
    (40) expression -> . expression_binary
    (41) expression -> . array
    (42) expression -> . array_special
    (43) expression -> . transposition
    (44) expression -> . negation
    (45) expression -> . expression_group
    (46) expression -> . elementary
    (59) expression_binary -> . normal_binary_expression
    (60) expression_binary -> . dot_binary_expression
    (47) array -> . [ array_lines ]
    (52) array_special -> . ZEROS array_special_specifier
    (53) array_special -> . ONES array_special_specifier
    (54) array_special -> . EYE array_special_specifier
    (56) transposition -> . identifier '
    (57) transposition -> . array '
    (58) negation -> . MINUS expression
    (77) expression_group -> . ( expression )
    (78) elementary -> . id_or_number
    (79) elementary -> . text
    (61) normal_binary_expression -> . add_expression
    (62) normal_binary_expression -> . sub_expression
    (63) normal_binary_expression -> . mul_expression
    (64) normal_binary_expression -> . div_expression
    (65) dot_binary_expression -> . dot_add_expression
    (66) dot_binary_expression -> . dot_sub_expression
    (67) dot_binary_expression -> . dot_mul_expression
    (68) dot_binary_expression -> . dot_div_expression
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID
    (81) id_or_number -> . identifier
    (82) id_or_number -> . number
    (80) text -> . STRING
    (69) add_expression -> . expression PLUS expression
    (70) sub_expression -> . expression MINUS expression
    (71) mul_expression -> . expression * expression
    (72) div_expression -> . expression / expression
    (73) dot_add_expression -> . expression DOTADD expression
    (74) dot_sub_expression -> . expression DOTSUB expression
    (75) dot_mul_expression -> . expression DOTMUL expression
    (76) dot_div_expression -> . expression DOTDIV expression
    (85) number -> . integer
    (86) number -> . real
    (87) integer -> . INTNUM
    (88) real -> . REALNUM

    [               shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51
    EYE             shift and go to state 52
    MINUS           shift and go to state 54
    (               shift and go to state 55
    ID              shift and go to state 24
    STRING          shift and go to state 67
    INTNUM          shift and go to state 70
    REALNUM         shift and go to state 71

    expression                     shift and go to state 120
    expression_binary              shift and go to state 40
    array                          shift and go to state 41
    array_special                  shift and go to state 42
    transposition                  shift and go to state 43
    negation                       shift and go to state 44
    expression_group               shift and go to state 45
    elementary                     shift and go to state 46
    normal_binary_expression       shift and go to state 47
    dot_binary_expression          shift and go to state 48
    identifier                     shift and go to state 53
    id_or_number                   shift and go to state 56
    text                           shift and go to state 57
    add_expression                 shift and go to state 58
    sub_expression                 shift and go to state 59
    mul_expression                 shift and go to state 60
    div_expression                 shift and go to state 61
    dot_add_expression             shift and go to state 62
    dot_sub_expression             shift and go to state 63
    dot_mul_expression             shift and go to state 64
    dot_div_expression             shift and go to state 65
    number                         shift and go to state 66
    integer                        shift and go to state 68
    real                           shift and go to state 69

state 89

    (76) dot_div_expression -> expression DOTDIV . expression
    (40) expression -> . expression_binary
    (41) expression -> . array
    (42) expression -> . array_special
    (43) expression -> . transposition
    (44) expression -> . negation
    (45) expression -> . expression_group
    (46) expression -> . elementary
    (59) expression_binary -> . normal_binary_expression
    (60) expression_binary -> . dot_binary_expression
    (47) array -> . [ array_lines ]
    (52) array_special -> . ZEROS array_special_specifier
    (53) array_special -> . ONES array_special_specifier
    (54) array_special -> . EYE array_special_specifier
    (56) transposition -> . identifier '
    (57) transposition -> . array '
    (58) negation -> . MINUS expression
    (77) expression_group -> . ( expression )
    (78) elementary -> . id_or_number
    (79) elementary -> . text
    (61) normal_binary_expression -> . add_expression
    (62) normal_binary_expression -> . sub_expression
    (63) normal_binary_expression -> . mul_expression
    (64) normal_binary_expression -> . div_expression
    (65) dot_binary_expression -> . dot_add_expression
    (66) dot_binary_expression -> . dot_sub_expression
    (67) dot_binary_expression -> . dot_mul_expression
    (68) dot_binary_expression -> . dot_div_expression
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID
    (81) id_or_number -> . identifier
    (82) id_or_number -> . number
    (80) text -> . STRING
    (69) add_expression -> . expression PLUS expression
    (70) sub_expression -> . expression MINUS expression
    (71) mul_expression -> . expression * expression
    (72) div_expression -> . expression / expression
    (73) dot_add_expression -> . expression DOTADD expression
    (74) dot_sub_expression -> . expression DOTSUB expression
    (75) dot_mul_expression -> . expression DOTMUL expression
    (76) dot_div_expression -> . expression DOTDIV expression
    (85) number -> . integer
    (86) number -> . real
    (87) integer -> . INTNUM
    (88) real -> . REALNUM

    [               shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51
    EYE             shift and go to state 52
    MINUS           shift and go to state 54
    (               shift and go to state 55
    ID              shift and go to state 24
    STRING          shift and go to state 67
    INTNUM          shift and go to state 70
    REALNUM         shift and go to state 71

    expression                     shift and go to state 121
    expression_binary              shift and go to state 40
    array                          shift and go to state 41
    array_special                  shift and go to state 42
    transposition                  shift and go to state 43
    negation                       shift and go to state 44
    expression_group               shift and go to state 45
    elementary                     shift and go to state 46
    normal_binary_expression       shift and go to state 47
    dot_binary_expression          shift and go to state 48
    identifier                     shift and go to state 53
    id_or_number                   shift and go to state 56
    text                           shift and go to state 57
    add_expression                 shift and go to state 58
    sub_expression                 shift and go to state 59
    mul_expression                 shift and go to state 60
    div_expression                 shift and go to state 61
    dot_add_expression             shift and go to state 62
    dot_sub_expression             shift and go to state 63
    dot_mul_expression             shift and go to state 64
    dot_div_expression             shift and go to state 65
    number                         shift and go to state 66
    integer                        shift and go to state 68
    real                           shift and go to state 69

state 90

    (57) transposition -> array ' .

    PLUS            reduce using rule 57 (transposition -> array ' .)
    MINUS           reduce using rule 57 (transposition -> array ' .)
    *               reduce using rule 57 (transposition -> array ' .)
    /               reduce using rule 57 (transposition -> array ' .)
    DOTADD          reduce using rule 57 (transposition -> array ' .)
    DOTSUB          reduce using rule 57 (transposition -> array ' .)
    DOTMUL          reduce using rule 57 (transposition -> array ' .)
    DOTDIV          reduce using rule 57 (transposition -> array ' .)
    ,               reduce using rule 57 (transposition -> array ' .)
    ;               reduce using rule 57 (transposition -> array ' .)
    <               reduce using rule 57 (transposition -> array ' .)
    >               reduce using rule 57 (transposition -> array ' .)
    EQ              reduce using rule 57 (transposition -> array ' .)
    NEQ             reduce using rule 57 (transposition -> array ' .)
    GEQ             reduce using rule 57 (transposition -> array ' .)
    LEQ             reduce using rule 57 (transposition -> array ' .)
    ]               reduce using rule 57 (transposition -> array ' .)
    )               reduce using rule 57 (transposition -> array ' .)


state 91

    (47) array -> [ array_lines . ]
    (48) array_lines -> array_lines . ; array_line

    ]               shift and go to state 122
    ;               shift and go to state 123


state 92

    (49) array_lines -> array_line .
    (50) array_line -> array_line . , expression

    ]               reduce using rule 49 (array_lines -> array_line .)
    ;               reduce using rule 49 (array_lines -> array_line .)
    ,               shift and go to state 81


state 93

    (52) array_special -> ZEROS array_special_specifier .

    PLUS            reduce using rule 52 (array_special -> ZEROS array_special_specifier .)
    MINUS           reduce using rule 52 (array_special -> ZEROS array_special_specifier .)
    *               reduce using rule 52 (array_special -> ZEROS array_special_specifier .)
    /               reduce using rule 52 (array_special -> ZEROS array_special_specifier .)
    DOTADD          reduce using rule 52 (array_special -> ZEROS array_special_specifier .)
    DOTSUB          reduce using rule 52 (array_special -> ZEROS array_special_specifier .)
    DOTMUL          reduce using rule 52 (array_special -> ZEROS array_special_specifier .)
    DOTDIV          reduce using rule 52 (array_special -> ZEROS array_special_specifier .)
    ,               reduce using rule 52 (array_special -> ZEROS array_special_specifier .)
    ;               reduce using rule 52 (array_special -> ZEROS array_special_specifier .)
    <               reduce using rule 52 (array_special -> ZEROS array_special_specifier .)
    >               reduce using rule 52 (array_special -> ZEROS array_special_specifier .)
    EQ              reduce using rule 52 (array_special -> ZEROS array_special_specifier .)
    NEQ             reduce using rule 52 (array_special -> ZEROS array_special_specifier .)
    GEQ             reduce using rule 52 (array_special -> ZEROS array_special_specifier .)
    LEQ             reduce using rule 52 (array_special -> ZEROS array_special_specifier .)
    ]               reduce using rule 52 (array_special -> ZEROS array_special_specifier .)
    )               reduce using rule 52 (array_special -> ZEROS array_special_specifier .)


state 94

    (55) array_special_specifier -> ( . id_or_number )
    (81) id_or_number -> . identifier
    (82) id_or_number -> . number
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID
    (85) number -> . integer
    (86) number -> . real
    (87) integer -> . INTNUM
    (88) real -> . REALNUM

    ID              shift and go to state 24
    INTNUM          shift and go to state 70
    REALNUM         shift and go to state 71

    id_or_number                   shift and go to state 124
    identifier                     shift and go to state 110
    number                         shift and go to state 66
    integer                        shift and go to state 68
    real                           shift and go to state 69

state 95

    (53) array_special -> ONES array_special_specifier .

    PLUS            reduce using rule 53 (array_special -> ONES array_special_specifier .)
    MINUS           reduce using rule 53 (array_special -> ONES array_special_specifier .)
    *               reduce using rule 53 (array_special -> ONES array_special_specifier .)
    /               reduce using rule 53 (array_special -> ONES array_special_specifier .)
    DOTADD          reduce using rule 53 (array_special -> ONES array_special_specifier .)
    DOTSUB          reduce using rule 53 (array_special -> ONES array_special_specifier .)
    DOTMUL          reduce using rule 53 (array_special -> ONES array_special_specifier .)
    DOTDIV          reduce using rule 53 (array_special -> ONES array_special_specifier .)
    ,               reduce using rule 53 (array_special -> ONES array_special_specifier .)
    ;               reduce using rule 53 (array_special -> ONES array_special_specifier .)
    <               reduce using rule 53 (array_special -> ONES array_special_specifier .)
    >               reduce using rule 53 (array_special -> ONES array_special_specifier .)
    EQ              reduce using rule 53 (array_special -> ONES array_special_specifier .)
    NEQ             reduce using rule 53 (array_special -> ONES array_special_specifier .)
    GEQ             reduce using rule 53 (array_special -> ONES array_special_specifier .)
    LEQ             reduce using rule 53 (array_special -> ONES array_special_specifier .)
    ]               reduce using rule 53 (array_special -> ONES array_special_specifier .)
    )               reduce using rule 53 (array_special -> ONES array_special_specifier .)


state 96

    (54) array_special -> EYE array_special_specifier .

    PLUS            reduce using rule 54 (array_special -> EYE array_special_specifier .)
    MINUS           reduce using rule 54 (array_special -> EYE array_special_specifier .)
    *               reduce using rule 54 (array_special -> EYE array_special_specifier .)
    /               reduce using rule 54 (array_special -> EYE array_special_specifier .)
    DOTADD          reduce using rule 54 (array_special -> EYE array_special_specifier .)
    DOTSUB          reduce using rule 54 (array_special -> EYE array_special_specifier .)
    DOTMUL          reduce using rule 54 (array_special -> EYE array_special_specifier .)
    DOTDIV          reduce using rule 54 (array_special -> EYE array_special_specifier .)
    ,               reduce using rule 54 (array_special -> EYE array_special_specifier .)
    ;               reduce using rule 54 (array_special -> EYE array_special_specifier .)
    <               reduce using rule 54 (array_special -> EYE array_special_specifier .)
    >               reduce using rule 54 (array_special -> EYE array_special_specifier .)
    EQ              reduce using rule 54 (array_special -> EYE array_special_specifier .)
    NEQ             reduce using rule 54 (array_special -> EYE array_special_specifier .)
    GEQ             reduce using rule 54 (array_special -> EYE array_special_specifier .)
    LEQ             reduce using rule 54 (array_special -> EYE array_special_specifier .)
    ]               reduce using rule 54 (array_special -> EYE array_special_specifier .)
    )               reduce using rule 54 (array_special -> EYE array_special_specifier .)


state 97

    (56) transposition -> identifier ' .

    PLUS            reduce using rule 56 (transposition -> identifier ' .)
    MINUS           reduce using rule 56 (transposition -> identifier ' .)
    *               reduce using rule 56 (transposition -> identifier ' .)
    /               reduce using rule 56 (transposition -> identifier ' .)
    DOTADD          reduce using rule 56 (transposition -> identifier ' .)
    DOTSUB          reduce using rule 56 (transposition -> identifier ' .)
    DOTMUL          reduce using rule 56 (transposition -> identifier ' .)
    DOTDIV          reduce using rule 56 (transposition -> identifier ' .)
    ,               reduce using rule 56 (transposition -> identifier ' .)
    ;               reduce using rule 56 (transposition -> identifier ' .)
    <               reduce using rule 56 (transposition -> identifier ' .)
    >               reduce using rule 56 (transposition -> identifier ' .)
    EQ              reduce using rule 56 (transposition -> identifier ' .)
    NEQ             reduce using rule 56 (transposition -> identifier ' .)
    GEQ             reduce using rule 56 (transposition -> identifier ' .)
    LEQ             reduce using rule 56 (transposition -> identifier ' .)
    ]               reduce using rule 56 (transposition -> identifier ' .)
    )               reduce using rule 56 (transposition -> identifier ' .)


state 98

    (58) negation -> MINUS expression .
    (69) add_expression -> expression . PLUS expression
    (70) sub_expression -> expression . MINUS expression
    (71) mul_expression -> expression . * expression
    (72) div_expression -> expression . / expression
    (73) dot_add_expression -> expression . DOTADD expression
    (74) dot_sub_expression -> expression . DOTSUB expression
    (75) dot_mul_expression -> expression . DOTMUL expression
    (76) dot_div_expression -> expression . DOTDIV expression

    PLUS            reduce using rule 58 (negation -> MINUS expression .)
    MINUS           reduce using rule 58 (negation -> MINUS expression .)
    DOTADD          reduce using rule 58 (negation -> MINUS expression .)
    DOTSUB          reduce using rule 58 (negation -> MINUS expression .)
    ,               reduce using rule 58 (negation -> MINUS expression .)
    ;               reduce using rule 58 (negation -> MINUS expression .)
    <               reduce using rule 58 (negation -> MINUS expression .)
    >               reduce using rule 58 (negation -> MINUS expression .)
    EQ              reduce using rule 58 (negation -> MINUS expression .)
    NEQ             reduce using rule 58 (negation -> MINUS expression .)
    GEQ             reduce using rule 58 (negation -> MINUS expression .)
    LEQ             reduce using rule 58 (negation -> MINUS expression .)
    ]               reduce using rule 58 (negation -> MINUS expression .)
    )               reduce using rule 58 (negation -> MINUS expression .)
    *               shift and go to state 84
    /               shift and go to state 85
    DOTMUL          shift and go to state 88
    DOTDIV          shift and go to state 89

  ! *               [ reduce using rule 58 (negation -> MINUS expression .) ]
  ! /               [ reduce using rule 58 (negation -> MINUS expression .) ]
  ! DOTMUL          [ reduce using rule 58 (negation -> MINUS expression .) ]
  ! DOTDIV          [ reduce using rule 58 (negation -> MINUS expression .) ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 83 ]
  ! DOTADD          [ shift and go to state 86 ]
  ! DOTSUB          [ shift and go to state 87 ]


state 99

    (77) expression_group -> ( expression . )
    (69) add_expression -> expression . PLUS expression
    (70) sub_expression -> expression . MINUS expression
    (71) mul_expression -> expression . * expression
    (72) div_expression -> expression . / expression
    (73) dot_add_expression -> expression . DOTADD expression
    (74) dot_sub_expression -> expression . DOTSUB expression
    (75) dot_mul_expression -> expression . DOTMUL expression
    (76) dot_div_expression -> expression . DOTDIV expression

    )               shift and go to state 125
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    *               shift and go to state 84
    /               shift and go to state 85
    DOTADD          shift and go to state 86
    DOTSUB          shift and go to state 87
    DOTMUL          shift and go to state 88
    DOTDIV          shift and go to state 89


state 100

    (83) identifier -> ID [ array_line . ]
    (50) array_line -> array_line . , expression

    ]               shift and go to state 126
    ,               shift and go to state 81


state 101

    (12) if_else -> IF condition instruction_line ELSE . instruction_line
    (6) instruction_line -> . if_else
    (7) instruction_line -> . while_loop
    (8) instruction_line -> . for_loop
    (9) instruction_line -> . code_block
    (10) instruction_line -> . instruction ;
    (11) if_else -> . IF condition instruction_line
    (12) if_else -> . IF condition instruction_line ELSE instruction_line
    (13) while_loop -> . WHILE condition instruction_line
    (14) for_loop -> . FOR identifier = range instruction_line
    (15) code_block -> . { program }
    (25) instruction -> . assignment
    (26) instruction -> . printing
    (27) instruction -> . continue_statement
    (28) instruction -> . break_statement
    (29) instruction -> . returning
    (30) assignment -> . identifier assignment_op expression
    (31) printing -> . PRINT array_line
    (32) continue_statement -> . CONTINUE
    (33) break_statement -> . BREAK
    (34) returning -> . RETURN expression
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID

    IF              shift and go to state 10
    WHILE           shift and go to state 11
    FOR             shift and go to state 12
    {               shift and go to state 14
    PRINT           shift and go to state 20
    CONTINUE        shift and go to state 21
    BREAK           shift and go to state 22
    RETURN          shift and go to state 23
    ID              shift and go to state 24

    instruction_line               shift and go to state 127
    if_else                        shift and go to state 5
    while_loop                     shift and go to state 6
    for_loop                       shift and go to state 7
    code_block                     shift and go to state 8
    instruction                    shift and go to state 9
    identifier                     shift and go to state 13
    assignment                     shift and go to state 15
    printing                       shift and go to state 16
    continue_statement             shift and go to state 17
    break_statement                shift and go to state 18
    returning                      shift and go to state 19

state 102

    (16) condition -> ( bool_expression ) .

    IF              reduce using rule 16 (condition -> ( bool_expression ) .)
    WHILE           reduce using rule 16 (condition -> ( bool_expression ) .)
    FOR             reduce using rule 16 (condition -> ( bool_expression ) .)
    {               reduce using rule 16 (condition -> ( bool_expression ) .)
    PRINT           reduce using rule 16 (condition -> ( bool_expression ) .)
    CONTINUE        reduce using rule 16 (condition -> ( bool_expression ) .)
    BREAK           reduce using rule 16 (condition -> ( bool_expression ) .)
    RETURN          reduce using rule 16 (condition -> ( bool_expression ) .)
    ID              reduce using rule 16 (condition -> ( bool_expression ) .)


state 103

    (17) bool_expression -> expression comparison_op . expression
    (40) expression -> . expression_binary
    (41) expression -> . array
    (42) expression -> . array_special
    (43) expression -> . transposition
    (44) expression -> . negation
    (45) expression -> . expression_group
    (46) expression -> . elementary
    (59) expression_binary -> . normal_binary_expression
    (60) expression_binary -> . dot_binary_expression
    (47) array -> . [ array_lines ]
    (52) array_special -> . ZEROS array_special_specifier
    (53) array_special -> . ONES array_special_specifier
    (54) array_special -> . EYE array_special_specifier
    (56) transposition -> . identifier '
    (57) transposition -> . array '
    (58) negation -> . MINUS expression
    (77) expression_group -> . ( expression )
    (78) elementary -> . id_or_number
    (79) elementary -> . text
    (61) normal_binary_expression -> . add_expression
    (62) normal_binary_expression -> . sub_expression
    (63) normal_binary_expression -> . mul_expression
    (64) normal_binary_expression -> . div_expression
    (65) dot_binary_expression -> . dot_add_expression
    (66) dot_binary_expression -> . dot_sub_expression
    (67) dot_binary_expression -> . dot_mul_expression
    (68) dot_binary_expression -> . dot_div_expression
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID
    (81) id_or_number -> . identifier
    (82) id_or_number -> . number
    (80) text -> . STRING
    (69) add_expression -> . expression PLUS expression
    (70) sub_expression -> . expression MINUS expression
    (71) mul_expression -> . expression * expression
    (72) div_expression -> . expression / expression
    (73) dot_add_expression -> . expression DOTADD expression
    (74) dot_sub_expression -> . expression DOTSUB expression
    (75) dot_mul_expression -> . expression DOTMUL expression
    (76) dot_div_expression -> . expression DOTDIV expression
    (85) number -> . integer
    (86) number -> . real
    (87) integer -> . INTNUM
    (88) real -> . REALNUM

    [               shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51
    EYE             shift and go to state 52
    MINUS           shift and go to state 54
    (               shift and go to state 55
    ID              shift and go to state 24
    STRING          shift and go to state 67
    INTNUM          shift and go to state 70
    REALNUM         shift and go to state 71

    expression                     shift and go to state 128
    expression_binary              shift and go to state 40
    array                          shift and go to state 41
    array_special                  shift and go to state 42
    transposition                  shift and go to state 43
    negation                       shift and go to state 44
    expression_group               shift and go to state 45
    elementary                     shift and go to state 46
    normal_binary_expression       shift and go to state 47
    dot_binary_expression          shift and go to state 48
    identifier                     shift and go to state 53
    id_or_number                   shift and go to state 56
    text                           shift and go to state 57
    add_expression                 shift and go to state 58
    sub_expression                 shift and go to state 59
    mul_expression                 shift and go to state 60
    div_expression                 shift and go to state 61
    dot_add_expression             shift and go to state 62
    dot_sub_expression             shift and go to state 63
    dot_mul_expression             shift and go to state 64
    dot_div_expression             shift and go to state 65
    number                         shift and go to state 66
    integer                        shift and go to state 68
    real                           shift and go to state 69

state 104

    (18) comparison_op -> < .

    [               reduce using rule 18 (comparison_op -> < .)
    ZEROS           reduce using rule 18 (comparison_op -> < .)
    ONES            reduce using rule 18 (comparison_op -> < .)
    EYE             reduce using rule 18 (comparison_op -> < .)
    MINUS           reduce using rule 18 (comparison_op -> < .)
    (               reduce using rule 18 (comparison_op -> < .)
    ID              reduce using rule 18 (comparison_op -> < .)
    STRING          reduce using rule 18 (comparison_op -> < .)
    INTNUM          reduce using rule 18 (comparison_op -> < .)
    REALNUM         reduce using rule 18 (comparison_op -> < .)


state 105

    (19) comparison_op -> > .

    [               reduce using rule 19 (comparison_op -> > .)
    ZEROS           reduce using rule 19 (comparison_op -> > .)
    ONES            reduce using rule 19 (comparison_op -> > .)
    EYE             reduce using rule 19 (comparison_op -> > .)
    MINUS           reduce using rule 19 (comparison_op -> > .)
    (               reduce using rule 19 (comparison_op -> > .)
    ID              reduce using rule 19 (comparison_op -> > .)
    STRING          reduce using rule 19 (comparison_op -> > .)
    INTNUM          reduce using rule 19 (comparison_op -> > .)
    REALNUM         reduce using rule 19 (comparison_op -> > .)


state 106

    (20) comparison_op -> EQ .

    [               reduce using rule 20 (comparison_op -> EQ .)
    ZEROS           reduce using rule 20 (comparison_op -> EQ .)
    ONES            reduce using rule 20 (comparison_op -> EQ .)
    EYE             reduce using rule 20 (comparison_op -> EQ .)
    MINUS           reduce using rule 20 (comparison_op -> EQ .)
    (               reduce using rule 20 (comparison_op -> EQ .)
    ID              reduce using rule 20 (comparison_op -> EQ .)
    STRING          reduce using rule 20 (comparison_op -> EQ .)
    INTNUM          reduce using rule 20 (comparison_op -> EQ .)
    REALNUM         reduce using rule 20 (comparison_op -> EQ .)


state 107

    (21) comparison_op -> NEQ .

    [               reduce using rule 21 (comparison_op -> NEQ .)
    ZEROS           reduce using rule 21 (comparison_op -> NEQ .)
    ONES            reduce using rule 21 (comparison_op -> NEQ .)
    EYE             reduce using rule 21 (comparison_op -> NEQ .)
    MINUS           reduce using rule 21 (comparison_op -> NEQ .)
    (               reduce using rule 21 (comparison_op -> NEQ .)
    ID              reduce using rule 21 (comparison_op -> NEQ .)
    STRING          reduce using rule 21 (comparison_op -> NEQ .)
    INTNUM          reduce using rule 21 (comparison_op -> NEQ .)
    REALNUM         reduce using rule 21 (comparison_op -> NEQ .)


state 108

    (22) comparison_op -> GEQ .

    [               reduce using rule 22 (comparison_op -> GEQ .)
    ZEROS           reduce using rule 22 (comparison_op -> GEQ .)
    ONES            reduce using rule 22 (comparison_op -> GEQ .)
    EYE             reduce using rule 22 (comparison_op -> GEQ .)
    MINUS           reduce using rule 22 (comparison_op -> GEQ .)
    (               reduce using rule 22 (comparison_op -> GEQ .)
    ID              reduce using rule 22 (comparison_op -> GEQ .)
    STRING          reduce using rule 22 (comparison_op -> GEQ .)
    INTNUM          reduce using rule 22 (comparison_op -> GEQ .)
    REALNUM         reduce using rule 22 (comparison_op -> GEQ .)


state 109

    (23) comparison_op -> LEQ .

    [               reduce using rule 23 (comparison_op -> LEQ .)
    ZEROS           reduce using rule 23 (comparison_op -> LEQ .)
    ONES            reduce using rule 23 (comparison_op -> LEQ .)
    EYE             reduce using rule 23 (comparison_op -> LEQ .)
    MINUS           reduce using rule 23 (comparison_op -> LEQ .)
    (               reduce using rule 23 (comparison_op -> LEQ .)
    ID              reduce using rule 23 (comparison_op -> LEQ .)
    STRING          reduce using rule 23 (comparison_op -> LEQ .)
    INTNUM          reduce using rule 23 (comparison_op -> LEQ .)
    REALNUM         reduce using rule 23 (comparison_op -> LEQ .)


state 110

    (81) id_or_number -> identifier .

    :               reduce using rule 81 (id_or_number -> identifier .)
    )               reduce using rule 81 (id_or_number -> identifier .)
    IF              reduce using rule 81 (id_or_number -> identifier .)
    WHILE           reduce using rule 81 (id_or_number -> identifier .)
    FOR             reduce using rule 81 (id_or_number -> identifier .)
    {               reduce using rule 81 (id_or_number -> identifier .)
    PRINT           reduce using rule 81 (id_or_number -> identifier .)
    CONTINUE        reduce using rule 81 (id_or_number -> identifier .)
    BREAK           reduce using rule 81 (id_or_number -> identifier .)
    RETURN          reduce using rule 81 (id_or_number -> identifier .)
    ID              reduce using rule 81 (id_or_number -> identifier .)


state 111

    (14) for_loop -> FOR identifier = range . instruction_line
    (6) instruction_line -> . if_else
    (7) instruction_line -> . while_loop
    (8) instruction_line -> . for_loop
    (9) instruction_line -> . code_block
    (10) instruction_line -> . instruction ;
    (11) if_else -> . IF condition instruction_line
    (12) if_else -> . IF condition instruction_line ELSE instruction_line
    (13) while_loop -> . WHILE condition instruction_line
    (14) for_loop -> . FOR identifier = range instruction_line
    (15) code_block -> . { program }
    (25) instruction -> . assignment
    (26) instruction -> . printing
    (27) instruction -> . continue_statement
    (28) instruction -> . break_statement
    (29) instruction -> . returning
    (30) assignment -> . identifier assignment_op expression
    (31) printing -> . PRINT array_line
    (32) continue_statement -> . CONTINUE
    (33) break_statement -> . BREAK
    (34) returning -> . RETURN expression
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID

    IF              shift and go to state 10
    WHILE           shift and go to state 11
    FOR             shift and go to state 12
    {               shift and go to state 14
    PRINT           shift and go to state 20
    CONTINUE        shift and go to state 21
    BREAK           shift and go to state 22
    RETURN          shift and go to state 23
    ID              shift and go to state 24

    identifier                     shift and go to state 13
    instruction_line               shift and go to state 129
    if_else                        shift and go to state 5
    while_loop                     shift and go to state 6
    for_loop                       shift and go to state 7
    code_block                     shift and go to state 8
    instruction                    shift and go to state 9
    assignment                     shift and go to state 15
    printing                       shift and go to state 16
    continue_statement             shift and go to state 17
    break_statement                shift and go to state 18
    returning                      shift and go to state 19

state 112

    (24) range -> id_or_number . : id_or_number

    :               shift and go to state 130


state 113

    (50) array_line -> array_line , expression .
    (69) add_expression -> expression . PLUS expression
    (70) sub_expression -> expression . MINUS expression
    (71) mul_expression -> expression . * expression
    (72) div_expression -> expression . / expression
    (73) dot_add_expression -> expression . DOTADD expression
    (74) dot_sub_expression -> expression . DOTSUB expression
    (75) dot_mul_expression -> expression . DOTMUL expression
    (76) dot_div_expression -> expression . DOTDIV expression

    ,               reduce using rule 50 (array_line -> array_line , expression .)
    ;               reduce using rule 50 (array_line -> array_line , expression .)
    ]               reduce using rule 50 (array_line -> array_line , expression .)
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    *               shift and go to state 84
    /               shift and go to state 85
    DOTADD          shift and go to state 86
    DOTSUB          shift and go to state 87
    DOTMUL          shift and go to state 88
    DOTDIV          shift and go to state 89


state 114

    (69) add_expression -> expression PLUS expression .
    (69) add_expression -> expression . PLUS expression
    (70) sub_expression -> expression . MINUS expression
    (71) mul_expression -> expression . * expression
    (72) div_expression -> expression . / expression
    (73) dot_add_expression -> expression . DOTADD expression
    (74) dot_sub_expression -> expression . DOTSUB expression
    (75) dot_mul_expression -> expression . DOTMUL expression
    (76) dot_div_expression -> expression . DOTDIV expression

    PLUS            reduce using rule 69 (add_expression -> expression PLUS expression .)
    MINUS           reduce using rule 69 (add_expression -> expression PLUS expression .)
    DOTADD          reduce using rule 69 (add_expression -> expression PLUS expression .)
    DOTSUB          reduce using rule 69 (add_expression -> expression PLUS expression .)
    ,               reduce using rule 69 (add_expression -> expression PLUS expression .)
    ;               reduce using rule 69 (add_expression -> expression PLUS expression .)
    <               reduce using rule 69 (add_expression -> expression PLUS expression .)
    >               reduce using rule 69 (add_expression -> expression PLUS expression .)
    EQ              reduce using rule 69 (add_expression -> expression PLUS expression .)
    NEQ             reduce using rule 69 (add_expression -> expression PLUS expression .)
    GEQ             reduce using rule 69 (add_expression -> expression PLUS expression .)
    LEQ             reduce using rule 69 (add_expression -> expression PLUS expression .)
    ]               reduce using rule 69 (add_expression -> expression PLUS expression .)
    )               reduce using rule 69 (add_expression -> expression PLUS expression .)
    *               shift and go to state 84
    /               shift and go to state 85
    DOTMUL          shift and go to state 88
    DOTDIV          shift and go to state 89

  ! *               [ reduce using rule 69 (add_expression -> expression PLUS expression .) ]
  ! /               [ reduce using rule 69 (add_expression -> expression PLUS expression .) ]
  ! DOTMUL          [ reduce using rule 69 (add_expression -> expression PLUS expression .) ]
  ! DOTDIV          [ reduce using rule 69 (add_expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 83 ]
  ! DOTADD          [ shift and go to state 86 ]
  ! DOTSUB          [ shift and go to state 87 ]


state 115

    (70) sub_expression -> expression MINUS expression .
    (69) add_expression -> expression . PLUS expression
    (70) sub_expression -> expression . MINUS expression
    (71) mul_expression -> expression . * expression
    (72) div_expression -> expression . / expression
    (73) dot_add_expression -> expression . DOTADD expression
    (74) dot_sub_expression -> expression . DOTSUB expression
    (75) dot_mul_expression -> expression . DOTMUL expression
    (76) dot_div_expression -> expression . DOTDIV expression

    PLUS            reduce using rule 70 (sub_expression -> expression MINUS expression .)
    MINUS           reduce using rule 70 (sub_expression -> expression MINUS expression .)
    DOTADD          reduce using rule 70 (sub_expression -> expression MINUS expression .)
    DOTSUB          reduce using rule 70 (sub_expression -> expression MINUS expression .)
    ,               reduce using rule 70 (sub_expression -> expression MINUS expression .)
    ;               reduce using rule 70 (sub_expression -> expression MINUS expression .)
    <               reduce using rule 70 (sub_expression -> expression MINUS expression .)
    >               reduce using rule 70 (sub_expression -> expression MINUS expression .)
    EQ              reduce using rule 70 (sub_expression -> expression MINUS expression .)
    NEQ             reduce using rule 70 (sub_expression -> expression MINUS expression .)
    GEQ             reduce using rule 70 (sub_expression -> expression MINUS expression .)
    LEQ             reduce using rule 70 (sub_expression -> expression MINUS expression .)
    ]               reduce using rule 70 (sub_expression -> expression MINUS expression .)
    )               reduce using rule 70 (sub_expression -> expression MINUS expression .)
    *               shift and go to state 84
    /               shift and go to state 85
    DOTMUL          shift and go to state 88
    DOTDIV          shift and go to state 89

  ! *               [ reduce using rule 70 (sub_expression -> expression MINUS expression .) ]
  ! /               [ reduce using rule 70 (sub_expression -> expression MINUS expression .) ]
  ! DOTMUL          [ reduce using rule 70 (sub_expression -> expression MINUS expression .) ]
  ! DOTDIV          [ reduce using rule 70 (sub_expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 83 ]
  ! DOTADD          [ shift and go to state 86 ]
  ! DOTSUB          [ shift and go to state 87 ]


state 116

    (71) mul_expression -> expression * expression .
    (69) add_expression -> expression . PLUS expression
    (70) sub_expression -> expression . MINUS expression
    (71) mul_expression -> expression . * expression
    (72) div_expression -> expression . / expression
    (73) dot_add_expression -> expression . DOTADD expression
    (74) dot_sub_expression -> expression . DOTSUB expression
    (75) dot_mul_expression -> expression . DOTMUL expression
    (76) dot_div_expression -> expression . DOTDIV expression

    PLUS            reduce using rule 71 (mul_expression -> expression * expression .)
    MINUS           reduce using rule 71 (mul_expression -> expression * expression .)
    *               reduce using rule 71 (mul_expression -> expression * expression .)
    /               reduce using rule 71 (mul_expression -> expression * expression .)
    DOTADD          reduce using rule 71 (mul_expression -> expression * expression .)
    DOTSUB          reduce using rule 71 (mul_expression -> expression * expression .)
    DOTMUL          reduce using rule 71 (mul_expression -> expression * expression .)
    DOTDIV          reduce using rule 71 (mul_expression -> expression * expression .)
    ,               reduce using rule 71 (mul_expression -> expression * expression .)
    ;               reduce using rule 71 (mul_expression -> expression * expression .)
    <               reduce using rule 71 (mul_expression -> expression * expression .)
    >               reduce using rule 71 (mul_expression -> expression * expression .)
    EQ              reduce using rule 71 (mul_expression -> expression * expression .)
    NEQ             reduce using rule 71 (mul_expression -> expression * expression .)
    GEQ             reduce using rule 71 (mul_expression -> expression * expression .)
    LEQ             reduce using rule 71 (mul_expression -> expression * expression .)
    ]               reduce using rule 71 (mul_expression -> expression * expression .)
    )               reduce using rule 71 (mul_expression -> expression * expression .)

  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 83 ]
  ! *               [ shift and go to state 84 ]
  ! /               [ shift and go to state 85 ]
  ! DOTADD          [ shift and go to state 86 ]
  ! DOTSUB          [ shift and go to state 87 ]
  ! DOTMUL          [ shift and go to state 88 ]
  ! DOTDIV          [ shift and go to state 89 ]


state 117

    (72) div_expression -> expression / expression .
    (69) add_expression -> expression . PLUS expression
    (70) sub_expression -> expression . MINUS expression
    (71) mul_expression -> expression . * expression
    (72) div_expression -> expression . / expression
    (73) dot_add_expression -> expression . DOTADD expression
    (74) dot_sub_expression -> expression . DOTSUB expression
    (75) dot_mul_expression -> expression . DOTMUL expression
    (76) dot_div_expression -> expression . DOTDIV expression

    PLUS            reduce using rule 72 (div_expression -> expression / expression .)
    MINUS           reduce using rule 72 (div_expression -> expression / expression .)
    *               reduce using rule 72 (div_expression -> expression / expression .)
    /               reduce using rule 72 (div_expression -> expression / expression .)
    DOTADD          reduce using rule 72 (div_expression -> expression / expression .)
    DOTSUB          reduce using rule 72 (div_expression -> expression / expression .)
    DOTMUL          reduce using rule 72 (div_expression -> expression / expression .)
    DOTDIV          reduce using rule 72 (div_expression -> expression / expression .)
    ,               reduce using rule 72 (div_expression -> expression / expression .)
    ;               reduce using rule 72 (div_expression -> expression / expression .)
    <               reduce using rule 72 (div_expression -> expression / expression .)
    >               reduce using rule 72 (div_expression -> expression / expression .)
    EQ              reduce using rule 72 (div_expression -> expression / expression .)
    NEQ             reduce using rule 72 (div_expression -> expression / expression .)
    GEQ             reduce using rule 72 (div_expression -> expression / expression .)
    LEQ             reduce using rule 72 (div_expression -> expression / expression .)
    ]               reduce using rule 72 (div_expression -> expression / expression .)
    )               reduce using rule 72 (div_expression -> expression / expression .)

  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 83 ]
  ! *               [ shift and go to state 84 ]
  ! /               [ shift and go to state 85 ]
  ! DOTADD          [ shift and go to state 86 ]
  ! DOTSUB          [ shift and go to state 87 ]
  ! DOTMUL          [ shift and go to state 88 ]
  ! DOTDIV          [ shift and go to state 89 ]


state 118

    (73) dot_add_expression -> expression DOTADD expression .
    (69) add_expression -> expression . PLUS expression
    (70) sub_expression -> expression . MINUS expression
    (71) mul_expression -> expression . * expression
    (72) div_expression -> expression . / expression
    (73) dot_add_expression -> expression . DOTADD expression
    (74) dot_sub_expression -> expression . DOTSUB expression
    (75) dot_mul_expression -> expression . DOTMUL expression
    (76) dot_div_expression -> expression . DOTDIV expression

    PLUS            reduce using rule 73 (dot_add_expression -> expression DOTADD expression .)
    MINUS           reduce using rule 73 (dot_add_expression -> expression DOTADD expression .)
    DOTADD          reduce using rule 73 (dot_add_expression -> expression DOTADD expression .)
    DOTSUB          reduce using rule 73 (dot_add_expression -> expression DOTADD expression .)
    ,               reduce using rule 73 (dot_add_expression -> expression DOTADD expression .)
    ;               reduce using rule 73 (dot_add_expression -> expression DOTADD expression .)
    <               reduce using rule 73 (dot_add_expression -> expression DOTADD expression .)
    >               reduce using rule 73 (dot_add_expression -> expression DOTADD expression .)
    EQ              reduce using rule 73 (dot_add_expression -> expression DOTADD expression .)
    NEQ             reduce using rule 73 (dot_add_expression -> expression DOTADD expression .)
    GEQ             reduce using rule 73 (dot_add_expression -> expression DOTADD expression .)
    LEQ             reduce using rule 73 (dot_add_expression -> expression DOTADD expression .)
    ]               reduce using rule 73 (dot_add_expression -> expression DOTADD expression .)
    )               reduce using rule 73 (dot_add_expression -> expression DOTADD expression .)
    *               shift and go to state 84
    /               shift and go to state 85
    DOTMUL          shift and go to state 88
    DOTDIV          shift and go to state 89

  ! *               [ reduce using rule 73 (dot_add_expression -> expression DOTADD expression .) ]
  ! /               [ reduce using rule 73 (dot_add_expression -> expression DOTADD expression .) ]
  ! DOTMUL          [ reduce using rule 73 (dot_add_expression -> expression DOTADD expression .) ]
  ! DOTDIV          [ reduce using rule 73 (dot_add_expression -> expression DOTADD expression .) ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 83 ]
  ! DOTADD          [ shift and go to state 86 ]
  ! DOTSUB          [ shift and go to state 87 ]


state 119

    (74) dot_sub_expression -> expression DOTSUB expression .
    (69) add_expression -> expression . PLUS expression
    (70) sub_expression -> expression . MINUS expression
    (71) mul_expression -> expression . * expression
    (72) div_expression -> expression . / expression
    (73) dot_add_expression -> expression . DOTADD expression
    (74) dot_sub_expression -> expression . DOTSUB expression
    (75) dot_mul_expression -> expression . DOTMUL expression
    (76) dot_div_expression -> expression . DOTDIV expression

    PLUS            reduce using rule 74 (dot_sub_expression -> expression DOTSUB expression .)
    MINUS           reduce using rule 74 (dot_sub_expression -> expression DOTSUB expression .)
    DOTADD          reduce using rule 74 (dot_sub_expression -> expression DOTSUB expression .)
    DOTSUB          reduce using rule 74 (dot_sub_expression -> expression DOTSUB expression .)
    ,               reduce using rule 74 (dot_sub_expression -> expression DOTSUB expression .)
    ;               reduce using rule 74 (dot_sub_expression -> expression DOTSUB expression .)
    <               reduce using rule 74 (dot_sub_expression -> expression DOTSUB expression .)
    >               reduce using rule 74 (dot_sub_expression -> expression DOTSUB expression .)
    EQ              reduce using rule 74 (dot_sub_expression -> expression DOTSUB expression .)
    NEQ             reduce using rule 74 (dot_sub_expression -> expression DOTSUB expression .)
    GEQ             reduce using rule 74 (dot_sub_expression -> expression DOTSUB expression .)
    LEQ             reduce using rule 74 (dot_sub_expression -> expression DOTSUB expression .)
    ]               reduce using rule 74 (dot_sub_expression -> expression DOTSUB expression .)
    )               reduce using rule 74 (dot_sub_expression -> expression DOTSUB expression .)
    *               shift and go to state 84
    /               shift and go to state 85
    DOTMUL          shift and go to state 88
    DOTDIV          shift and go to state 89

  ! *               [ reduce using rule 74 (dot_sub_expression -> expression DOTSUB expression .) ]
  ! /               [ reduce using rule 74 (dot_sub_expression -> expression DOTSUB expression .) ]
  ! DOTMUL          [ reduce using rule 74 (dot_sub_expression -> expression DOTSUB expression .) ]
  ! DOTDIV          [ reduce using rule 74 (dot_sub_expression -> expression DOTSUB expression .) ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 83 ]
  ! DOTADD          [ shift and go to state 86 ]
  ! DOTSUB          [ shift and go to state 87 ]


state 120

    (75) dot_mul_expression -> expression DOTMUL expression .
    (69) add_expression -> expression . PLUS expression
    (70) sub_expression -> expression . MINUS expression
    (71) mul_expression -> expression . * expression
    (72) div_expression -> expression . / expression
    (73) dot_add_expression -> expression . DOTADD expression
    (74) dot_sub_expression -> expression . DOTSUB expression
    (75) dot_mul_expression -> expression . DOTMUL expression
    (76) dot_div_expression -> expression . DOTDIV expression

    PLUS            reduce using rule 75 (dot_mul_expression -> expression DOTMUL expression .)
    MINUS           reduce using rule 75 (dot_mul_expression -> expression DOTMUL expression .)
    *               reduce using rule 75 (dot_mul_expression -> expression DOTMUL expression .)
    /               reduce using rule 75 (dot_mul_expression -> expression DOTMUL expression .)
    DOTADD          reduce using rule 75 (dot_mul_expression -> expression DOTMUL expression .)
    DOTSUB          reduce using rule 75 (dot_mul_expression -> expression DOTMUL expression .)
    DOTMUL          reduce using rule 75 (dot_mul_expression -> expression DOTMUL expression .)
    DOTDIV          reduce using rule 75 (dot_mul_expression -> expression DOTMUL expression .)
    ,               reduce using rule 75 (dot_mul_expression -> expression DOTMUL expression .)
    ;               reduce using rule 75 (dot_mul_expression -> expression DOTMUL expression .)
    <               reduce using rule 75 (dot_mul_expression -> expression DOTMUL expression .)
    >               reduce using rule 75 (dot_mul_expression -> expression DOTMUL expression .)
    EQ              reduce using rule 75 (dot_mul_expression -> expression DOTMUL expression .)
    NEQ             reduce using rule 75 (dot_mul_expression -> expression DOTMUL expression .)
    GEQ             reduce using rule 75 (dot_mul_expression -> expression DOTMUL expression .)
    LEQ             reduce using rule 75 (dot_mul_expression -> expression DOTMUL expression .)
    ]               reduce using rule 75 (dot_mul_expression -> expression DOTMUL expression .)
    )               reduce using rule 75 (dot_mul_expression -> expression DOTMUL expression .)

  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 83 ]
  ! *               [ shift and go to state 84 ]
  ! /               [ shift and go to state 85 ]
  ! DOTADD          [ shift and go to state 86 ]
  ! DOTSUB          [ shift and go to state 87 ]
  ! DOTMUL          [ shift and go to state 88 ]
  ! DOTDIV          [ shift and go to state 89 ]


state 121

    (76) dot_div_expression -> expression DOTDIV expression .
    (69) add_expression -> expression . PLUS expression
    (70) sub_expression -> expression . MINUS expression
    (71) mul_expression -> expression . * expression
    (72) div_expression -> expression . / expression
    (73) dot_add_expression -> expression . DOTADD expression
    (74) dot_sub_expression -> expression . DOTSUB expression
    (75) dot_mul_expression -> expression . DOTMUL expression
    (76) dot_div_expression -> expression . DOTDIV expression

    PLUS            reduce using rule 76 (dot_div_expression -> expression DOTDIV expression .)
    MINUS           reduce using rule 76 (dot_div_expression -> expression DOTDIV expression .)
    *               reduce using rule 76 (dot_div_expression -> expression DOTDIV expression .)
    /               reduce using rule 76 (dot_div_expression -> expression DOTDIV expression .)
    DOTADD          reduce using rule 76 (dot_div_expression -> expression DOTDIV expression .)
    DOTSUB          reduce using rule 76 (dot_div_expression -> expression DOTDIV expression .)
    DOTMUL          reduce using rule 76 (dot_div_expression -> expression DOTDIV expression .)
    DOTDIV          reduce using rule 76 (dot_div_expression -> expression DOTDIV expression .)
    ,               reduce using rule 76 (dot_div_expression -> expression DOTDIV expression .)
    ;               reduce using rule 76 (dot_div_expression -> expression DOTDIV expression .)
    <               reduce using rule 76 (dot_div_expression -> expression DOTDIV expression .)
    >               reduce using rule 76 (dot_div_expression -> expression DOTDIV expression .)
    EQ              reduce using rule 76 (dot_div_expression -> expression DOTDIV expression .)
    NEQ             reduce using rule 76 (dot_div_expression -> expression DOTDIV expression .)
    GEQ             reduce using rule 76 (dot_div_expression -> expression DOTDIV expression .)
    LEQ             reduce using rule 76 (dot_div_expression -> expression DOTDIV expression .)
    ]               reduce using rule 76 (dot_div_expression -> expression DOTDIV expression .)
    )               reduce using rule 76 (dot_div_expression -> expression DOTDIV expression .)

  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 83 ]
  ! *               [ shift and go to state 84 ]
  ! /               [ shift and go to state 85 ]
  ! DOTADD          [ shift and go to state 86 ]
  ! DOTSUB          [ shift and go to state 87 ]
  ! DOTMUL          [ shift and go to state 88 ]
  ! DOTDIV          [ shift and go to state 89 ]


state 122

    (47) array -> [ array_lines ] .

    '               reduce using rule 47 (array -> [ array_lines ] .)
    PLUS            reduce using rule 47 (array -> [ array_lines ] .)
    MINUS           reduce using rule 47 (array -> [ array_lines ] .)
    *               reduce using rule 47 (array -> [ array_lines ] .)
    /               reduce using rule 47 (array -> [ array_lines ] .)
    DOTADD          reduce using rule 47 (array -> [ array_lines ] .)
    DOTSUB          reduce using rule 47 (array -> [ array_lines ] .)
    DOTMUL          reduce using rule 47 (array -> [ array_lines ] .)
    DOTDIV          reduce using rule 47 (array -> [ array_lines ] .)
    ,               reduce using rule 47 (array -> [ array_lines ] .)
    ;               reduce using rule 47 (array -> [ array_lines ] .)
    <               reduce using rule 47 (array -> [ array_lines ] .)
    >               reduce using rule 47 (array -> [ array_lines ] .)
    EQ              reduce using rule 47 (array -> [ array_lines ] .)
    NEQ             reduce using rule 47 (array -> [ array_lines ] .)
    GEQ             reduce using rule 47 (array -> [ array_lines ] .)
    LEQ             reduce using rule 47 (array -> [ array_lines ] .)
    ]               reduce using rule 47 (array -> [ array_lines ] .)
    )               reduce using rule 47 (array -> [ array_lines ] .)


state 123

    (48) array_lines -> array_lines ; . array_line
    (50) array_line -> . array_line , expression
    (51) array_line -> . expression
    (40) expression -> . expression_binary
    (41) expression -> . array
    (42) expression -> . array_special
    (43) expression -> . transposition
    (44) expression -> . negation
    (45) expression -> . expression_group
    (46) expression -> . elementary
    (59) expression_binary -> . normal_binary_expression
    (60) expression_binary -> . dot_binary_expression
    (47) array -> . [ array_lines ]
    (52) array_special -> . ZEROS array_special_specifier
    (53) array_special -> . ONES array_special_specifier
    (54) array_special -> . EYE array_special_specifier
    (56) transposition -> . identifier '
    (57) transposition -> . array '
    (58) negation -> . MINUS expression
    (77) expression_group -> . ( expression )
    (78) elementary -> . id_or_number
    (79) elementary -> . text
    (61) normal_binary_expression -> . add_expression
    (62) normal_binary_expression -> . sub_expression
    (63) normal_binary_expression -> . mul_expression
    (64) normal_binary_expression -> . div_expression
    (65) dot_binary_expression -> . dot_add_expression
    (66) dot_binary_expression -> . dot_sub_expression
    (67) dot_binary_expression -> . dot_mul_expression
    (68) dot_binary_expression -> . dot_div_expression
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID
    (81) id_or_number -> . identifier
    (82) id_or_number -> . number
    (80) text -> . STRING
    (69) add_expression -> . expression PLUS expression
    (70) sub_expression -> . expression MINUS expression
    (71) mul_expression -> . expression * expression
    (72) div_expression -> . expression / expression
    (73) dot_add_expression -> . expression DOTADD expression
    (74) dot_sub_expression -> . expression DOTSUB expression
    (75) dot_mul_expression -> . expression DOTMUL expression
    (76) dot_div_expression -> . expression DOTDIV expression
    (85) number -> . integer
    (86) number -> . real
    (87) integer -> . INTNUM
    (88) real -> . REALNUM

    [               shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51
    EYE             shift and go to state 52
    MINUS           shift and go to state 54
    (               shift and go to state 55
    ID              shift and go to state 24
    STRING          shift and go to state 67
    INTNUM          shift and go to state 70
    REALNUM         shift and go to state 71

    array_line                     shift and go to state 131
    expression                     shift and go to state 39
    expression_binary              shift and go to state 40
    array                          shift and go to state 41
    array_special                  shift and go to state 42
    transposition                  shift and go to state 43
    negation                       shift and go to state 44
    expression_group               shift and go to state 45
    elementary                     shift and go to state 46
    normal_binary_expression       shift and go to state 47
    dot_binary_expression          shift and go to state 48
    identifier                     shift and go to state 53
    id_or_number                   shift and go to state 56
    text                           shift and go to state 57
    add_expression                 shift and go to state 58
    sub_expression                 shift and go to state 59
    mul_expression                 shift and go to state 60
    div_expression                 shift and go to state 61
    dot_add_expression             shift and go to state 62
    dot_sub_expression             shift and go to state 63
    dot_mul_expression             shift and go to state 64
    dot_div_expression             shift and go to state 65
    number                         shift and go to state 66
    integer                        shift and go to state 68
    real                           shift and go to state 69

state 124

    (55) array_special_specifier -> ( id_or_number . )

    )               shift and go to state 132


state 125

    (77) expression_group -> ( expression ) .

    PLUS            reduce using rule 77 (expression_group -> ( expression ) .)
    MINUS           reduce using rule 77 (expression_group -> ( expression ) .)
    *               reduce using rule 77 (expression_group -> ( expression ) .)
    /               reduce using rule 77 (expression_group -> ( expression ) .)
    DOTADD          reduce using rule 77 (expression_group -> ( expression ) .)
    DOTSUB          reduce using rule 77 (expression_group -> ( expression ) .)
    DOTMUL          reduce using rule 77 (expression_group -> ( expression ) .)
    DOTDIV          reduce using rule 77 (expression_group -> ( expression ) .)
    ,               reduce using rule 77 (expression_group -> ( expression ) .)
    ;               reduce using rule 77 (expression_group -> ( expression ) .)
    <               reduce using rule 77 (expression_group -> ( expression ) .)
    >               reduce using rule 77 (expression_group -> ( expression ) .)
    EQ              reduce using rule 77 (expression_group -> ( expression ) .)
    NEQ             reduce using rule 77 (expression_group -> ( expression ) .)
    GEQ             reduce using rule 77 (expression_group -> ( expression ) .)
    LEQ             reduce using rule 77 (expression_group -> ( expression ) .)
    ]               reduce using rule 77 (expression_group -> ( expression ) .)
    )               reduce using rule 77 (expression_group -> ( expression ) .)


state 126

    (83) identifier -> ID [ array_line ] .

    =               reduce using rule 83 (identifier -> ID [ array_line ] .)
    ADDASSIGN       reduce using rule 83 (identifier -> ID [ array_line ] .)
    SUBASSIGN       reduce using rule 83 (identifier -> ID [ array_line ] .)
    MULASSIGN       reduce using rule 83 (identifier -> ID [ array_line ] .)
    DIVASSIGN       reduce using rule 83 (identifier -> ID [ array_line ] .)
    '               reduce using rule 83 (identifier -> ID [ array_line ] .)
    PLUS            reduce using rule 83 (identifier -> ID [ array_line ] .)
    MINUS           reduce using rule 83 (identifier -> ID [ array_line ] .)
    *               reduce using rule 83 (identifier -> ID [ array_line ] .)
    /               reduce using rule 83 (identifier -> ID [ array_line ] .)
    DOTADD          reduce using rule 83 (identifier -> ID [ array_line ] .)
    DOTSUB          reduce using rule 83 (identifier -> ID [ array_line ] .)
    DOTMUL          reduce using rule 83 (identifier -> ID [ array_line ] .)
    DOTDIV          reduce using rule 83 (identifier -> ID [ array_line ] .)
    ,               reduce using rule 83 (identifier -> ID [ array_line ] .)
    ;               reduce using rule 83 (identifier -> ID [ array_line ] .)
    <               reduce using rule 83 (identifier -> ID [ array_line ] .)
    >               reduce using rule 83 (identifier -> ID [ array_line ] .)
    EQ              reduce using rule 83 (identifier -> ID [ array_line ] .)
    NEQ             reduce using rule 83 (identifier -> ID [ array_line ] .)
    GEQ             reduce using rule 83 (identifier -> ID [ array_line ] .)
    LEQ             reduce using rule 83 (identifier -> ID [ array_line ] .)
    ]               reduce using rule 83 (identifier -> ID [ array_line ] .)
    )               reduce using rule 83 (identifier -> ID [ array_line ] .)
    :               reduce using rule 83 (identifier -> ID [ array_line ] .)
    IF              reduce using rule 83 (identifier -> ID [ array_line ] .)
    WHILE           reduce using rule 83 (identifier -> ID [ array_line ] .)
    FOR             reduce using rule 83 (identifier -> ID [ array_line ] .)
    {               reduce using rule 83 (identifier -> ID [ array_line ] .)
    PRINT           reduce using rule 83 (identifier -> ID [ array_line ] .)
    CONTINUE        reduce using rule 83 (identifier -> ID [ array_line ] .)
    BREAK           reduce using rule 83 (identifier -> ID [ array_line ] .)
    RETURN          reduce using rule 83 (identifier -> ID [ array_line ] .)
    ID              reduce using rule 83 (identifier -> ID [ array_line ] .)


state 127

    (12) if_else -> IF condition instruction_line ELSE instruction_line .

    IF              reduce using rule 12 (if_else -> IF condition instruction_line ELSE instruction_line .)
    WHILE           reduce using rule 12 (if_else -> IF condition instruction_line ELSE instruction_line .)
    FOR             reduce using rule 12 (if_else -> IF condition instruction_line ELSE instruction_line .)
    {               reduce using rule 12 (if_else -> IF condition instruction_line ELSE instruction_line .)
    PRINT           reduce using rule 12 (if_else -> IF condition instruction_line ELSE instruction_line .)
    CONTINUE        reduce using rule 12 (if_else -> IF condition instruction_line ELSE instruction_line .)
    BREAK           reduce using rule 12 (if_else -> IF condition instruction_line ELSE instruction_line .)
    RETURN          reduce using rule 12 (if_else -> IF condition instruction_line ELSE instruction_line .)
    ID              reduce using rule 12 (if_else -> IF condition instruction_line ELSE instruction_line .)
    $end            reduce using rule 12 (if_else -> IF condition instruction_line ELSE instruction_line .)
    }               reduce using rule 12 (if_else -> IF condition instruction_line ELSE instruction_line .)
    ELSE            reduce using rule 12 (if_else -> IF condition instruction_line ELSE instruction_line .)


state 128

    (17) bool_expression -> expression comparison_op expression .
    (69) add_expression -> expression . PLUS expression
    (70) sub_expression -> expression . MINUS expression
    (71) mul_expression -> expression . * expression
    (72) div_expression -> expression . / expression
    (73) dot_add_expression -> expression . DOTADD expression
    (74) dot_sub_expression -> expression . DOTSUB expression
    (75) dot_mul_expression -> expression . DOTMUL expression
    (76) dot_div_expression -> expression . DOTDIV expression

    )               reduce using rule 17 (bool_expression -> expression comparison_op expression .)
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    *               shift and go to state 84
    /               shift and go to state 85
    DOTADD          shift and go to state 86
    DOTSUB          shift and go to state 87
    DOTMUL          shift and go to state 88
    DOTDIV          shift and go to state 89


state 129

    (14) for_loop -> FOR identifier = range instruction_line .

    IF              reduce using rule 14 (for_loop -> FOR identifier = range instruction_line .)
    WHILE           reduce using rule 14 (for_loop -> FOR identifier = range instruction_line .)
    FOR             reduce using rule 14 (for_loop -> FOR identifier = range instruction_line .)
    {               reduce using rule 14 (for_loop -> FOR identifier = range instruction_line .)
    PRINT           reduce using rule 14 (for_loop -> FOR identifier = range instruction_line .)
    CONTINUE        reduce using rule 14 (for_loop -> FOR identifier = range instruction_line .)
    BREAK           reduce using rule 14 (for_loop -> FOR identifier = range instruction_line .)
    RETURN          reduce using rule 14 (for_loop -> FOR identifier = range instruction_line .)
    ID              reduce using rule 14 (for_loop -> FOR identifier = range instruction_line .)
    $end            reduce using rule 14 (for_loop -> FOR identifier = range instruction_line .)
    }               reduce using rule 14 (for_loop -> FOR identifier = range instruction_line .)
    ELSE            reduce using rule 14 (for_loop -> FOR identifier = range instruction_line .)


state 130

    (24) range -> id_or_number : . id_or_number
    (81) id_or_number -> . identifier
    (82) id_or_number -> . number
    (83) identifier -> . ID [ array_line ]
    (84) identifier -> . ID
    (85) number -> . integer
    (86) number -> . real
    (87) integer -> . INTNUM
    (88) real -> . REALNUM

    ID              shift and go to state 24
    INTNUM          shift and go to state 70
    REALNUM         shift and go to state 71

    id_or_number                   shift and go to state 133
    identifier                     shift and go to state 110
    number                         shift and go to state 66
    integer                        shift and go to state 68
    real                           shift and go to state 69

state 131

    (48) array_lines -> array_lines ; array_line .
    (50) array_line -> array_line . , expression

    ]               reduce using rule 48 (array_lines -> array_lines ; array_line .)
    ;               reduce using rule 48 (array_lines -> array_lines ; array_line .)
    ,               shift and go to state 81


state 132

    (55) array_special_specifier -> ( id_or_number ) .

    PLUS            reduce using rule 55 (array_special_specifier -> ( id_or_number ) .)
    MINUS           reduce using rule 55 (array_special_specifier -> ( id_or_number ) .)
    *               reduce using rule 55 (array_special_specifier -> ( id_or_number ) .)
    /               reduce using rule 55 (array_special_specifier -> ( id_or_number ) .)
    DOTADD          reduce using rule 55 (array_special_specifier -> ( id_or_number ) .)
    DOTSUB          reduce using rule 55 (array_special_specifier -> ( id_or_number ) .)
    DOTMUL          reduce using rule 55 (array_special_specifier -> ( id_or_number ) .)
    DOTDIV          reduce using rule 55 (array_special_specifier -> ( id_or_number ) .)
    ,               reduce using rule 55 (array_special_specifier -> ( id_or_number ) .)
    ;               reduce using rule 55 (array_special_specifier -> ( id_or_number ) .)
    <               reduce using rule 55 (array_special_specifier -> ( id_or_number ) .)
    >               reduce using rule 55 (array_special_specifier -> ( id_or_number ) .)
    EQ              reduce using rule 55 (array_special_specifier -> ( id_or_number ) .)
    NEQ             reduce using rule 55 (array_special_specifier -> ( id_or_number ) .)
    GEQ             reduce using rule 55 (array_special_specifier -> ( id_or_number ) .)
    LEQ             reduce using rule 55 (array_special_specifier -> ( id_or_number ) .)
    ]               reduce using rule 55 (array_special_specifier -> ( id_or_number ) .)
    )               reduce using rule 55 (array_special_specifier -> ( id_or_number ) .)


state 133

    (24) range -> id_or_number : id_or_number .

    IF              reduce using rule 24 (range -> id_or_number : id_or_number .)
    WHILE           reduce using rule 24 (range -> id_or_number : id_or_number .)
    FOR             reduce using rule 24 (range -> id_or_number : id_or_number .)
    {               reduce using rule 24 (range -> id_or_number : id_or_number .)
    PRINT           reduce using rule 24 (range -> id_or_number : id_or_number .)
    CONTINUE        reduce using rule 24 (range -> id_or_number : id_or_number .)
    BREAK           reduce using rule 24 (range -> id_or_number : id_or_number .)
    RETURN          reduce using rule 24 (range -> id_or_number : id_or_number .)
    ID              reduce using rule 24 (range -> id_or_number : id_or_number .)

